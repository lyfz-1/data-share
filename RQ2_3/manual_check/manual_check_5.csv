commitId,commitTime,diff,message,isImplicit
1816014eb95cb445de05e23d9369d2d25e55ed0c,2016-06-08 20:10:01+02:00,mmm DismantleBytecode . java <nl> ppp DismantleBytecode . java <nl> + } else if (constantRefOperand instanceof ConstantInvokeDynamic) { <nl> + ConstantInvokeDynamic id = (ConstantInvokeDynamic) constantRefOperand ; <nl> + ConstantNameAndType sig = (ConstantNameAndType) getConstantPool() . getConstant( <nl> + id . getNameAndTypeIndex()) ; <nl> + nameConstantOperand = getStringFromIndex(sig . getNameIndex()) ; <nl> + sigConstantOperand = getStringFromIndex(sig . getSignatureIndex()) ; <nl> - } else if (constantRefOperand instanceof ConstantInvokeDynamic) { <nl> - ConstantInvokeDynamic id = (ConstantInvokeDynamic) constantRefOperand ; <nl> - ConstantNameAndType sig = (ConstantNameAndType) getConstantPool() . getConstant( <nl> - id . getNameAndTypeIndex()) ; <nl> - nameConstantOperand = getStringFromIndex(sig . getNameIndex()) ; <nl> - <nl>,fix npe in dismantlebytecode:716 see bcel-273,1
c4bb5f058454a6b112ac756f4ff7ada3eda44445,2016-12-05 23:08:25-06:00,"mmm ExplicitSerialization . java <nl> ppp ExplicitSerialization . java <nl> - final static XMethod writeObject = XFactory . createXMethod(""java . io . ObjectOutputStream"", ""writeObject"", ""(Ljava/lang/Object ;)V"", false) ; <nl> + private final XMethod writeObject = XFactory . createXMethod(""java . io . ObjectOutputStream"", ""writeObject"", ""(Ljava/lang/Object ;)V"", false) ; <nl> + private final XMethod readObject = XFactory . createXMethod(""java . io . ObjectInputStream"", ""readObject"", ""()Ljava/lang/Object ;"", false) ; <nl> - final static XMethod readObject = XFactory . createXMethod(""java . io . ObjectInputStream"", ""readObject"", ""()Ljava/lang/Object ;"", false) ; <nl> + private static final ClassDescriptor ObjectOutputStream = DescriptorFactory . createClassDescriptor(ObjectOutputStream . class) ; <nl>",analysis dependant variable should not be static,1
389e33ac6e9d96f96f9e8c094c62041e5d09ec10,2017-02-16 01:22:31+09:00,mmm Version . java <nl> ppp Version . java <nl> + import java . util . Enumeration ; <nl> - try (final InputStream in = Version . class . getResourceAsStream("META-INF/MANIFEST . MF")) { <nl> - final Manifest manifest = new Manifest(in) ; <nl> - version = manifest . getMainAttributes() . getValue("Bundle-Version") ; <nl> + try { <nl> + final Enumeration<URL> resources = Version . class . getClassLoader() <nl> +  . getResources("META-INF/MANIFEST . MF") ; <nl> + while (resources . hasMoreElements()) { <nl> + try (final InputStream is = resources . nextElement() . openStream()) { <nl> + final Manifest <nl>,make sure we get the proper manifest,1
0313cbce1f406170e700e7025526e9b759ff7af6,2017-07-10 10:01:01+02:00,mmm SignatureParserTest . java <nl> ppp SignatureParserTest . java <nl> - import org . junit . Before ; <nl> - SignatureParser noParams ; <nl> - SignatureParser manyParams ; <nl> - @Before <nl> - public void setUp() { <nl> - noParams = new SignatureParser("()V") ; <nl> - manyParams = new SignatureParser("(IJFDZLjava/lang/String ;B)Ljava/lang/Object ;") ; <nl> - } <nl> - Iterator<String> i = noParams . parameterSignatureIterator() ; <nl> + SignatureParser sut = new SignatureParser("()V") ; <nl> + Iterator<String> i = sut . parameterSignatureIterator() ; <nl> - Iterator<String> i = manyParams . parameterSignatureIterator() ; <nl> + SignatureParser sut = new SignatureParser("(IJFDZLjava/lang/String ;B)Ljava/lang/Object <nl>,do not use @ before setup unless necessary,1
659b013752b7e44968e446edd31f127bb89bcd51,2017-07-25 10:12:27+02:00,new file <nl> ppp Issue259Test . java <nl> + package edu . umd . cs . findbugs . nullness ; <nl> + import edu . umd . cs . findbugs . BugCollection ; <nl> + import edu . umd . cs . findbugs . test . SpotBugsRule ; <nl> + import org . junit . Rule ; <nl> + import org . junit . Test ; <nl> + import java . nio . file . Paths ; <nl> + import static org . hamcrest . Matchers . emptyIterable ; <nl> + import static org . junit . Assert . <nl>,close # 259 : ensure that report problem be already fix in spotbugs,1
5f60fb3d956b1b4984567dbe6c7a9d4933a0b1d3,2017-09-01 07:37:20+04:00,mmm UnconditionalValueDerefAnalysis . java <nl> ppp UnconditionalValueDerefAnalysis . java <nl> + import org . apache . bcel . generic . INVOKEDYNAMIC ; <nl> + if (inv instanceof INVOKEDYNAMIC) { <nl> + return Collections . emptySet() ; <nl> + } <nl>,do not check parameter for indy call,1
be7e60721b042525d73fc550074c6983fa598088,2017-10-24 08:07:22-05:00,"mmm AbstractIntegrationTest . java <nl> ppp AbstractIntegrationTest . java <nl> - File f2 = new File(getFindbugsTestCases(), path . replace(BUILD_CLASSES_CLI, BUILD_CLASSES_ECLIPSE)) ; <nl> + String replaced = path . replace(BUILD_CLASSES_CLI, BUILD_CLASSES_ECLIPSE) ; <nl> + replaced = replaced . replace("" .  . /java9/"", """") ; <nl> + File f2 = new File(getFindbugsTestCases(), replaced) ; <nl> mmm Issue408Test . java <nl> ppp Issue408Test . java <nl> + import static edu . umd . cs . findbugs . test . CountMatcher . containsExactly ; <nl> + import static org . junit . Assert . assertThat ; <nl> + import java . io <nl>",do not remember module-info see to avoid pop up silly bcel error,1
80b8683ad3960e82697d97c1a2eba3d5efefd6ce,2018-01-05 11:08:06+01:00,mmm LocalVariableAnnotation . java <nl> ppp LocalVariableAnnotation . java <nl> - } else { <nl> - for (LocalVariable lv : localVariableTable . getLocalVariableTable()) { <nl> - if (lv . getIndex() == local) { <nl> - if (!"?" . equals(localName) && !localName . equals(lv . getName())) { <nl> - localName = "?" ; <nl> - break ; <nl> - } <nl> - localName = lv . getName() ; <nl> - } <nl> - } <nl>,do not `` guess '' variable name,0
cd78f5012577aa077d91494ec98e404ce84af980,2018-01-21 13:36:48+01:00,new file <nl> ppp Issue527Test . java <nl> + package edu . umd . cs . findbugs . ba ; <nl> + import static edu . umd . cs . findbugs . test . CountMatcher . containsExactly ; <nl> + import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertThat ; <nl> + import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> + import java . util . Iterator ; <nl> + import java . util . List ; <nl> <nl>,do not use garbage method attribute from invokedynamic for xmethod,1
34620b0088882a62dc42ba333b0d1f07c923a8bb,2018-01-21 13:36:48+01:00,mmm PruneUnconditionalExceptionThrowerEdges . java <nl> ppp PruneUnconditionalExceptionThrowerEdges . java <nl> + import org . apache . bcel . generic . INVOKEDYNAMIC ; <nl> + if (exceptionThrower instanceof INVOKEDYNAMIC) { <nl> + continue ; <nl> + } <nl> mmm BackwardTypeQualifierDataflowAnalysis . java <nl> ppp BackwardTypeQualifierDataflowAnalysis . java <nl> + import org . apache . bcel . generic . INVOKEDYNAMIC ; <nl> + if (inv instanceof INVOKEDYNAMIC) { <nl> + return ; <nl> + } <nl> mmm ForwardTypeQualifierDataflowAnalysis . java <nl> ppp ForwardTypeQualifierDataflowAnalysis . java <nl> + import org . apache . bcel . generic . INVOKEDYNAMIC ; <nl> + if <nl>,do not call createxmethod ( invokeinstruction ) with invokedynamic,1
c5f0afe33b9d2a3270e278fd18cc423667578533,2018-01-28 17:41:18+01:00,mmm Hierarchy . java <nl> ppp Hierarchy . java <nl> - } else { <nl> - String className = inv . getClassName(cpg) ; <nl> - String methodName = inv . getName(cpg) ; <nl> - String methodSig = inv . getSignature(cpg) ; <nl> - if (DEBUG_METHOD_LOOKUP) { <nl> - System . out . println("[Class name is " + className + "]") ; <nl> - System . out . println("[Method name is " + methodName + "]") ; <nl> - System . out . println("[Method signature is " + methodSig + "]") ; <nl> - } <nl> - if (className . <nl>,do not try to resolve class name for lambda method,1
f87c69d75e7b697a4ce38f36e977943c07820628,2018-01-28 17:41:18+01:00,new file <nl> ppp Issue547Test . java <nl> + package edu . umd . cs . findbugs . ba ; <nl> + import static edu . umd . cs . findbugs . test . CountMatcher . containsExactly ; <nl> + import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertThat ; <nl> + import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> + import java . util . Iterator ; <nl> + import java . util . List ; <nl> <nl>,do not look into constantinvokedynamic contain garbage data,1
5f8879483e685b6f0db816486da10fa97b4b3f6f,2018-05-18 19:19:46+08:00,"mmm BugRanker . java <nl> ppp BugRanker . java <nl> + import edu . umd . cs . findbugs . io . IO ; <nl> - BufferedReader in = UTF8 . bufferedReader(u . openStream()) ; <nl> + BufferedReader in = UTF8 . bufferedReader(IO . openNonCachedStream(u)) ; <nl> mmm FindBugs2 . java <nl> ppp FindBugs2 . java <nl> + import edu . umd . cs . findbugs . io . IO ; <nl> - public class FindBugs2 implements IFindBugsEngine { <nl> + public class FindBugs2 implements IFindBugsEngine, AutoCloseable { <nl> - if (classPath != null) { <nl> - classPath . <nl>",fix resource leak,1
1f759da07e28f28fb83ed7d61b9640e6a0c1dccb,2018-06-06 23:21:50+02:00,mmm AssertionMethods . java <nl> ppp AssertionMethods . java <nl> - import org . apache . bcel . Constants ; <nl> - public class AssertionMethods implements Constants { <nl> + public class AssertionMethods { <nl> mmm AssignedFieldMap . java <nl> ppp AssignedFieldMap . java <nl> - import org . apache . bcel . Constants ; <nl> - public class AssignedFieldMap implements Constants { <nl> + public class AssignedFieldMap { <nl> mmm FieldAccess . java <nl> ppp FieldAccess . java <nl> - public abstract class FieldAccess extends SingleInstruction implements org . apache . bcel . Constants { <nl> + public <nl>,do not implement constant due to deprecate,1
df5424a54ad69643fb0e7342c6211b57395fd8f0,2018-06-08 12:44:39+08:00,"mmm CheckReturnAnnotationDatabase . java <nl> ppp CheckReturnAnnotationDatabase . java <nl> + addMethodAnnotation(""com . google . common . base . Preconditions"", ""checkNotNull"", ""(Ljava/lang/Object ;)Ljava/lang/Object ;"", true, <nl> + CheckReturnValueAnnotation . CHECK_RETURN_VALUE_IGNORE) ; <nl>",ref # 579 : try to fix report problem,0
fec4bd8ce4d6e834e6c8a934ed9d62c6bb020014,2018-08-08 09:44:12+08:00,mmm FindBugs . java <nl> ppp FindBugs . java <nl> - boolean verbose = !commandLine . quiet() || commandLine . setExitCode() ; <nl> + boolean verbose = !commandLine . quiet() ; <nl> - if (verbose) { <nl> + if (verbose || commandLine . setExitCode()) { <nl> - System . err . println("Calculating exit code .  .  . ") ; <nl> + if (verbose) { <nl> + System . err . println("Calculating exit code .  .  . ") ; <nl> + } <nl> - System . err . println("Setting 'errors encountered' flag (" + ExitCodes . <nl>,do not print exit code information when -quiet be pass,0
7e2bd93dfec1f0f55acd47b1cf8fea20fe7db413,2019-03-04 20:32:13+08:00,"mmm OpcodeStack . java <nl> ppp OpcodeStack . java <nl> + import java . util . concurrent . ConcurrentHashMap ; <nl> + import java . util . concurrent . ConcurrentMap ; <nl> + import java . util . concurrent . atomic . AtomicInteger ; <nl> - @Deprecated <nl> - @StaticConstant <nl> - public static final HashMap<Integer, String> specialKindNames = new HashMap<>() ; <nl> + @edu . umd . cs . findbugs . internalAnnotations . StaticConstant <nl> + private static final ConcurrentMap<Integer, String> specialKindToName = new ConcurrentHashMap<>() ; <nl> - private static @SpecialKind int nextSpecialKind = asSpecialKind(TYPE_ONLY + 1) ; <nl>",close # 28 : make special kind handle thread-safe,1
71a56f6fa1ab6711c1b75f0ea951639eb0af23a5,2020-10-06 20:12:52+02:00,"mmm FindBugsWorker . java <nl> ppp FindBugsWorker . java <nl> + import java . util . concurrent . ExecutionException ; <nl> - private void runFindBugs(final FindBugs2 findBugs) { <nl> + private static void runFindBugs(final FindBugs2 findBugs) { <nl> - } catch (InterruptedException e) { <nl> - if (DEBUG) { <nl> - FindbugsPlugin . getDefault() . logException(e, ""Worker interrupted"") ; <nl> + } catch (Exception e) { <nl> + if (isInterrupted(e)) { <nl> + if (DEBUG) { <nl> + FindbugsPlugin . getDefault() . logException(e, ""Worker interrupted"") ; <nl> + } <nl> + } else { <nl> + FindbugsPlugin . getDefault() <nl>",fix error dialog on cancel spotbugs job in eclipse,1
5fc27ac5177ea71971c6588e1fd8a2c3a5d8487f,2020-10-06 20:12:52+02:00,new file <nl> ppp Issue893Test . java <nl> + package edu . umd . cs . findbugs . ba ; <nl> + import static edu . umd . cs . findbugs . test . CountMatcher . containsExactly ; <nl> + import static org . hamcrest . MatcherAssert . assertThat ; <nl> + import org . junit . Test ; <nl> + import edu . umd . cs . findbugs . AbstractIntegrationTest ; <nl> + import edu . umd . cs . findbugs . test . matcher . BugInstanceMatcher ; <nl> + import edu . umd . cs . findbugs <nl>,fix illegalargumentexception in opcodestack.constanttoint,1
4e88d9f6017ab4d36d541be662183ff79babf033,2021-02-20 15:27:26+08:00,mmm BugRanker . java <nl> ppp BugRanker . java <nl> + import java . util . Iterator ; <nl> - origCollection . getCollection() . removeIf(b -> BugRanker . findRank(b) > maxRank) ; <nl> + for (Iterator<BugInstance> i = origCollection . iterator() ; i . hasNext() ;) { <nl> + BugInstance b = i . next() ; <nl> + if (BugRanker . findRank(b) > maxRank) { <nl> + i . remove() ; <nl> + } <nl> + } <nl> new file <nl> ppp BugRankerTest . java <nl> + package edu . umd . cs . findbugs ; <nl> + import <nl>,fix unsupportedoperationexception in bugranker.trimtomaxrank,1
06b137861015e2b02fdd3e5241e537f9e041c14b,2021-10-07 18:12:00+08:00,mmm JrtfsCodeBase . java <nl> ppp JrtfsCodeBase . java <nl> + import java . util . stream . Stream ; <nl> - Files . list(path) . forEach(p -> { <nl> - try { <nl> - Iterator<Path> modIter = Files . list(p) . iterator() ; <nl> + try(Stream<Path> packList = Files . list(path)) { <nl> + packList . forEach(p -> { <nl> + try(try(Stream<Path> pList = Files . list(p)) { <nl> + Iterator<Path> modIter = pList . iterator() ; <nl> - }) ; <nl> + })} ; <nl>,fix resource leak due to files.list,1
bcb6e02eba94ca9b400b2d55f2232459bd8af5b8,2009-11-16 14:19:42+00:00,"mmm CxfEndpoint . java <nl> ppp CxfEndpoint . java <nl> + import org . apache . camel . Service ; <nl> - public class CxfEndpoint extends DefaultEndpoint implements HeaderFilterStrategyAware { <nl> + public class CxfEndpoint extends DefaultEndpoint implements HeaderFilterStrategyAware, Service { <nl> - private AtomicBoolean cxfBindingInitialized = new AtomicBoolean(false) ; <nl> - cxfBindingInitialized . set(false) ; <nl> - if (cxfBinding == null) { <nl> - cxfBinding = new DefaultCxfBinding() ;    <nl> - if (LOG . isDebugEnabled()) { <nl> - LOG . debug(""Create default CXF Binding "" + cxfBinding) ; <nl> - } <nl> - } <nl> <nl>",fix initialization of cxfendpoint not be thread safe,1
62f0b43cf83439e58f777a4bcd8b1da469ff12d6,2012-02-15 16:17:01+00:00,"deleted file <nl> mmm AnySoftKeyboardInstalledReceiver . java <nl> - package com . anysoftkeyboard . receivers ; <nl> - import android . content . BroadcastReceiver ; <nl> - import android . content . Context ; <nl> - import android . content . Intent ; <nl> - import android . util . Log ; <nl> - public class AnySoftKeyboardInstalledReceiver extends BroadcastReceiver { <nl> - private static final String TAG = ""ASK Installed"" ; <nl> - @Override <nl> - public void onReceive(Context context, Intent intent) { <nl> - Log . i(TAG, ""Thank you for installing AnySoftKeyboard! We hope you'll like it . <nl>","no need to show notification about how to setup ask , since it be not activate upon install now the ask setting will start it",1
5a5b87c2a65ee4e8a16dc15ad1c62a556c3d48ae,2012-03-12 16:01:07+00:00,"mmm AnySoftKeyboard . java <nl> ppp AnySoftKeyboard . java <nl> + Log . d(TAG, ""Updating cursor position: cursorPosition:""+cursorPosition+"" mWord . cursorPosition():""+mWord . cursorPosition()+"" mWord . candidatesStartPosition():""+mWord . candidatesStartPosition()) ; <nl> + Log . d(TAG, ""Updating cursor position: cursorPosition:""+cursorPosition+"" mWord . cursorPosition():""+mWord . cursorPosition()+"" mWord . candidatesStartPosition():""+mWord . candidatesStartPosition()) ; <nl> mmm WordComposer . java <nl> ppp WordComposer . java <nl> - return null ; <nl> + return """" ; <nl>",npe fix on no typed word,1
f927e732aa5299bb35fdfd24d761c0e1ac6c3b88,2022-02-09 06:27:34+01:00,mmm WorkItem . java <nl> ppp WorkItem . java <nl> + public boolean isProject() { <nl> + return resource instanceof IProject || javaElt instanceof IJavaProject ; <nl> + } <nl> mmm ResourceBugCountDecorator . java <nl> ppp ResourceBugCountDecorator . java <nl> + import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> + import java . util . Iterator ; <nl> + import java . util . LinkedHashMap ; <nl> + import java . util . LinkedHashSet ; <nl> + import java . util . List ; <nl> + import java . util <nl>,fix freeze in decorator due marker query on ui thread,1
1637599721ade043ea174201b4cf6322d91afe49,2022-04-20 02:28:20+00:00,mmm FindReturnRef . java <nl> ppp FindReturnRef . java <nl> - if (seen == Const . CHECKCAST) { <nl> + if (seen == Const . CHECKCAST && !stack . isTop()) { <nl>,fix : findreturnref throw an illegalargumentexception unexpectedly,1
119956bce1c594cf21052a1c541df2ed90e6b696,2022-10-12 06:41:57+08:00,new file <nl> ppp Issue2120Test . java <nl> + package edu . umd . cs . findbugs . detect ; <nl> + import org . junit . Before ; <nl> + import org . junit . Test ; <nl> + import edu . umd . cs . findbugs . AbstractIntegrationTest ; <nl> + import edu . umd . cs . findbugs . test . matcher . BugInstanceMatcher ; <nl> + import edu . umd . cs . findbugs . test . matcher . BugInstanceMatcherBuilder ; <nl> + import static edu . umd . cs . findbugs . test . <nl>,fix for detector ` uncallablemethodofanonymousclass ` to not report unused method of method-local enumeration and record,1
e391d0032567b6006d33cb6b0d6753439a489ce3,2023-01-23 17:11:57+01:00,"mmm FilterBugsDialog . java <nl> ppp FilterBugsDialog . java <nl> - txt = presenter . updatePresentation(getShell() . getDisplay(), txt, presentation, size . width, size . height) ; <nl> + if (size . width > 0 && size . height > 0) { <nl> + txt = presenter . updatePresentation(getShell() . getDisplay(), txt, presentation, size . width, size . height) ; <nl> + } <nl>",fix for `` unhandled event loop exception '' open bug filter,1
9dec5144f669b1fb97208a0b9c848af14b7cbccf,2018-12-20 19:02:47+02:00,"mmm Drillbit . java <nl> ppp Drillbit . java <nl> - GracefulShutdownThread gracefulShutdownThread ; <nl> + private GracefulShutdownThread gracefulShutdownThread ; <nl> + gracefulShutdownThread = new GracefulShutdownThread(this, new StackTrace()) ; <nl> - gracefulShutdownThread = new GracefulShutdownThread(this, new StackTrace()) ; <nl> + @VisibleForTesting <nl> + public GracefulShutdownThread getGracefulShutdownThread() { <nl> + return gracefulShutdownThread ; <nl> + } <nl> mmm TestGracefulShutdown . java <nl> ppp TestGracefulShutdown . java <nl> + import org . apache . drill . common . exceptions . UserException ; <nl> + import org . apache . hadoop . net . ServerSocketUtil ; <nl> + import static org . <nl>",npe when other drillbit be already run,1
44f17eaf1b9489fc16fadee0178e975f6aff5185,2018-12-24 17:49:01+02:00,mmm ExecConstants . java <nl> ppp ExecConstants . java <nl> - new OptionDescription("Enables recursive files listing when querying the `INFORMATION_SCHEMA . FILES` table or executing the SHOW FILES command .  Default is false .  (Drill 1 . 15+)")) ; <nl> + new OptionDescription("Enables recursive files listing when querying the `INFORMATION_SCHEMA . FILES` table or executing the SHOW FILES command .  " + <nl> + "Default is false .  (Drill 1 . 15+)")) ; <nl> - public static final String RETURN_RESULT_SET_FOR_DDL = "exec . return_result_set_for_ddl" ; <nl> + public static final String RETURN_RESULT_SET_FOR_DDL = "exec . <nl>,do not set return result set option on query level if it be the same a current value,1
4b66226dc7e33d9173e6e714d5cf85beea1e4e46,2019-01-10 10:30:08-08:00,mmm KafkaRecordReader . java <nl> ppp KafkaRecordReader . java <nl> - messageReader . ensureAtLeastOneField() ; <nl> + if (currentMessageCount > 0) { <nl> + messageReader . ensureAtLeastOneField() ; <nl> + } <nl>,skip ensureatleastonefield when there be no record,1
1887cce249e79058c7328c2bbf094b3d979e6ab2,2019-01-25 17:30:58+02:00,"mmm RuntimeFilterRecordBatch . java <nl> ppp RuntimeFilterRecordBatch . java <nl> - for (int i = 0 ; i < toFilterFields . size() ; i++) { <nl> - BloomFilter bloomFilter = bloomFilters . get(i) ; <nl> - String fieldName = toFilterFields . get(i) ; <nl> - computeBitSet(field2id . get(fieldName), bloomFilter, bitSet) ; <nl> - } <nl> + int filterSize = toFilterFields . size() ; <nl> - for (int i = 0 ; i < originalRecordCount ; i++) { <nl> - boolean contain = bitSet . get(i) ; <nl> - if (contain) { <nl> - sv2 . setIndex(svIndex, i) ; <nl> <nl>",fix runtimefilter memory leak,1
da343738f3a485a514fe132a38d076b59fdacd5f,2023-10-17 17:54:28-04:00,new file <nl> ppp Issue2640Test . java <nl> + package edu . umd . cs . findbugs . detect ; <nl> + import edu . umd . cs . findbugs . AbstractIntegrationTest ; <nl> + import org . junit . jupiter . api . Assertions ; <nl> + import org . junit . jupiter . api . Test ; <nl> + class Issue2640Test extends AbstractIntegrationTest { <nl> + @Test <nl> + void testIssue() { <nl> + Assertions . assertDoesNotThrow(() -> performAnalysis("ghIssues/Issue2640 . class")) ; <nl> + } <nl> + } <nl> mmm DumbMethods . java <nl> ppp DumbMethods . <nl>,fix escape exception from dumbmethods,1
bb2d705c83c394a5a6b08138d209c81dc6d2f97a,2023-10-17 19:18:39-04:00,"mmm SarifBugReporterTest . java <nl> ppp SarifBugReporterTest . java <nl> + @Test <nl> + void testRuleWithInvalidArguments() { <nl> + final String EXPECTED_BUG_TYPE = ""BUG_TYPE"" ; <nl> + final int EXPECTED_PRIORITY = Priorities . NORMAL_PRIORITY ; <nl> + final String EXPECTED_DESCRIPTION = ""describing about this bug type .  .  . "" ; <nl> + BugPattern bugPattern = new BugPattern(EXPECTED_BUG_TYPE, ""abbrev"", ""category"", false, EXPECTED_DESCRIPTION, <nl> + ""describing about this bug type with value {1234} .  .  . "", ""detailText"", null, 0) ; <nl> + DetectorFactoryCollection . instance() . registerBugPattern(bugPattern) ; <nl> + reporter . reportBug(new BugInstance(bugPattern . <nl>",fix for indexoutofboundsexception in sarif placeholder,1
a9ed9ef169fe4274962813f9d3a7d5e662dcc128,2023-11-15 14:36:18+01:00,"mmm FindOverridableMethodCall . java <nl> ppp FindOverridableMethodCall . java <nl> - private static final Map<XMethod, CallerInfo> callerConstructors = new HashMap<>() ; <nl> - private static final Map<XMethod, CallerInfo> callerClones = new HashMap<>() ; <nl> - private static final Map<XMethod, XMethod> callsToOverridable = new HashMap<>() ; <nl> - private static final MultiMap<XMethod, XMethod> callerToCalleeMap = new MultiMap<>(ArrayList . class) ; <nl> - private static final MultiMap<XMethod, XMethod> calleeToCallerMap = new MultiMap<>(ArrayList . class) ; <nl> + private final Map<XMethod, CallerInfo> callerConstructors = new HashMap<>() ; <nl> + private final Map<XMethod, CallerInfo> callerClones = new HashMap<>() ; <nl> + private final <nl>",findoverridablemethodcall be not thread safe,1
c5ea9ad1f28d2a2ec7b8b5bf3db9e9ad8aee7a1f,2023-12-01 21:26:03-05:00,mmm ConstructorThrowTest . java <nl> ppp ConstructorThrowTest . java <nl> - assertCTBugInLine(10) ; <nl> + assertCTBugInLine(11) ; <nl> + @Test <nl> + void testConstructorThrowCheck18() { <nl> + performAnalysis("constructorthrow/ConstructorThrowTest18 . class") ; <nl> + assertNumOfCTBugs(1) ; <nl> + assertCTBugInLine(11) ; <nl> + } <nl> + @Test <nl> + void testConstructorThrowCheck19() { <nl> + performAnalysis("constructorthrow/ConstructorThrowTest19 . class") ; <nl> + assertNumOfCTBugs(1) ; <nl> + assertCTBugInLine(11) ; <nl> + } <nl> + @Test <nl> + void testConstructorThrowCheck20() { <nl> + performAnalysis("constructorthrow/ConstructorThrowTest20 . class") ; <nl> + assertNumOfCTBugs(1) ; <nl> + assertCTBugInLine(13) ; <nl> + } <nl> + @Test <nl> + void testGoodConstructorThrowCheck16() <nl>,fix fps in constructorthrow when the finalizer do not run for checked exception,1
09873588a593b71e632b7f2be4c1b60741017f22,2023-12-25 20:49:49-05:00,mmm UnionResultsTest . java <nl> ppp UnionResultsTest . java <nl> - File outputFile = new File("src/test/resources/output . xml") ; <nl> + File outputFile = new File("build/tmp/test/unionresults/output . xml") ; <nl> + outputFile . getParentFile() . mkdirs() ; <nl> - Files . deleteIfExists(new File(fileName) . toPath()) ; <nl> - Files . deleteIfExists(outputFile . toPath()) ; <nl> - File firstFile = new File("src/test/resources/firstFile . xml") ; <nl> - File secondFile = new File("src/test/resources/secondFile . xml") ; <nl> + File firstFile = new File("build/tmp/test/unionresults/firstFile . xml") ; <nl> + File secondFile = new File("build/tmp/test/unionresults/secondFile . xml") ; <nl>,optimize for incremental building,1
adbf363d286d548b324b55aa167b333addad8441,2017-03-20 08:14:24-07:00,"mmm DrillRelOptUtil . java <nl> ppp DrillRelOptUtil . java <nl> + import org . apache . calcite . rex . RexCall ; <nl> + import org . apache . calcite . rex . RexVisitor ; <nl> + import org . apache . calcite . rex . RexVisitorImpl ; <nl> + import org . apache . calcite . util . Util ; <nl> + public static RexCall findItemOrFlatten( <nl> + final RexNode node, <nl> + final List<RexNode> projExprs) { <nl> + try { <nl> + RexVisitor<Void> visitor = <nl> + new RexVisitorImpl<Void>(true) { <nl> + public Void visitCall(RexCall call) { <nl>",fix classcastexception when drill push down filter on the output of flatten operator,1
e03d7f9b1ac510ccee909b42653ee9b9ca3d69b1,2017-03-31 15:31:40-07:00,"mmm MapRDBPushFilterIntoScan . java <nl> ppp MapRDBPushFilterIntoScan . java <nl> - groupScan . getFormatPlugin(), newScanSpec, groupScan . getColumns()) ; <nl> + groupScan . getFormatPlugin(), newScanSpec, groupScan . getColumns(), <nl> + groupScan . getTableStats()) ; <nl> mmm BinaryTableGroupScan . java <nl> ppp BinaryTableGroupScan . java <nl> + public BinaryTableGroupScan(String userName, FileSystemPlugin storagePlugin, <nl> + MapRDBFormatPlugin formatPlugin, HBaseScanSpec scanSpec, <nl> + List<SchemaPath> columns, MapRDBTableStats tableStats) { <nl> + super(storagePlugin, formatPlugin, columns, userName) ; <nl> + this . hbaseScanSpec = scanSpec ; <nl> + this . tableStats = tableStats ; <nl> + init() ; <nl> + } <nl> - tableStats = new <nl>",optimize query planning for mapr-db table by cache row count,1
adfdcf8ed0bf5d0765be8c8c94858190b33bb783,2017-08-17 11:53:48-07:00,mmm UrlConnectionHttpClientIntegrationTest . java <nl> ppp UrlConnectionHttpClientIntegrationTest . java <nl> + import java . net . HttpURLConnection ; <nl> + import java . util . HashMap ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> - import software . amazon . awssdk . http . urlconnection . UrlConnectionSdkHttpClientFactory ; <nl> - SdkHttpFullRequest request = mock(SdkHttpFullRequest . class) ; <nl> - when(request . getEndpoint()) . thenReturn(uri) ; <nl> - when(request . getHttpMethod()) . thenReturn(SdkHttpMethod . GET) ; <nl> - when(request . getResourcePath()) . thenReturn("/") ; <nl> - when(request . <nl>,fix url connection client so that it handle error response correctly,1
29087cdf12f1115f33b7730e4a9d7174c4ba1f52,2017-08-25 12:18:54-07:00,"mmm ClientExecutionTimedStage . java <nl> ppp ClientExecutionTimedStage . java <nl> - } catch (InterruptedException ie) { <nl> - throw handleInterruptedException(context, ie) ; <nl> - } catch (AbortedException ae) { <nl> - throw handleAbortedException(context, ae) ; <nl> + } catch (Exception e) { <nl> + throw translatePipelineException(context, e) ; <nl> + } finally { <nl> + Thread . interrupted() ; <nl> + private Exception translatePipelineException(RequestExecutionContext context, Exception e) { <nl> + if (e instanceof InterruptedException) { <nl> + return handleInterruptedException(context, (InterruptedException) e) ; <nl> + } <nl> + if (Thread . currentThread() . isInterrupted() && context . clientExecutionTrackerTask() . hasTimeoutExpired()) <nl>",surface correct exception when ie not rethrown,1
3462ca988e6804607403f32e3d262c2b52551e58,2017-10-18 13:31:24-07:00,"mmm ClassLoaderHelper . java <nl> ppp ClassLoaderHelper . java <nl> + @Deprecated <nl> mmm ClasspathInterceptorChainFactory . java <nl> ppp ClasspathInterceptorChainFactory . java <nl> - return Validate . notNull(Thread . currentThread() . getContextClassLoader(), <nl> - ""Failed to load the classloader for the current thread . "") ; <nl> + return Validate . notNull(ClassLoaderHelper . classLoader(), <nl> + ""Failed to load the classloader for the current thread or the system . "") ; <nl> mmm ClassLoaderHelper . java <nl> ppp ClassLoaderHelper . java <nl> - ClassLoader loader = Thread . currentThread() . getContextClassLoader() ; <nl> + ClassLoader loader = classLoader() ; <nl>",attempt to fix class-loader exception raise on gitter,1
594bba002588508cff91ec5616260d33ea4b2bf2,2017-10-27 16:30:07-07:00,"mmm MessageMD5ChecksumInterceptor . java <nl> ppp MessageMD5ChecksumInterceptor . java <nl> - import java . io . UnsupportedEncodingException ; <nl> - private static void updateLengthAndBytes(MessageDigest digest, String str) throws UnsupportedEncodingException { <nl> + private static void updateLengthAndBytes(MessageDigest digest, String str) { <nl> mmm JsonPolicyWriter . java <nl> ppp JsonPolicyWriter . java <nl> - import com . fasterxml . jackson . core . JsonGenerationException ; <nl> - private String jsonStringOf(Policy policy) throws JsonGenerationException, <nl> - IOException { <nl> + private String jsonStringOf(Policy policy) throws IOException { <nl> - private void writeConditions(List<Condition> conditions) <nl> - throws JsonGenerationException, IOException { <nl> + private <nl>",fix sonar issue category method declare throw an exception that be n't thrown,1
32a5c48d2403bad54eb38b995d331f04dc63d542,2017-11-13 14:22:55-08:00,mmm NettyNioAsyncHttpClient . java <nl> ppp NettyNioAsyncHttpClient . java <nl> - import static software . amazon . awssdk . http . SdkHttpConfigurationOption . CONNECTION_TIMEOUT ; <nl> - import static software . amazon . awssdk . http . SdkHttpConfigurationOption . MAX_CONNECTIONS ; <nl> - import static software . amazon . awssdk . http . SdkHttpConfigurationOption . SOCKET_TIMEOUT ; <nl> - import static software . amazon . awssdk . http . SdkHttpConfigurationOption . USE_STRICT_HOSTNAME_VERIFICATION ; <nl> - import static software . amazon . awssdk . utils . NumericUtils . saturatedCast ; <nl> + import software . amazon . awssdk . http <nl>,fix logic of when read/write timeout handler be add/remove from the pipeline,1
8ee3b2b4706fa386765d54f4f654502cafaf14a2,2017-12-12 16:47:19-08:00,"mmm StandardErrorUnmarshaller . java <nl> ppp StandardErrorUnmarshaller . java <nl> - import software . amazon . awssdk . annotations . ReviewBeforeRelease ; <nl> - if (errorCode != null) { <nl> - return standardErrorPathException(errorCode, in, xpath) ; <nl> - } <nl> - return s3ErrorPathException(in, xpath) ; <nl> + return standardErrorPathException(errorCode, in, xpath) ; <nl> - @ReviewBeforeRelease(""We shouldn't have S3 speific code in core .  Also the way this is doesn't"" + <nl> - "" work with modeled exceptions as they are still looking for the error code"" + <nl> - "" in the standard location . "") <nl> - <nl>",fix s3 exception unmarshalling # 297,0
8d8fae09950da2322165bcb2ba8cb5d2c8c33bf3,2018-02-01 13:43:16-08:00,mmm JsonProtocolMarshaller . java <nl> ppp JsonProtocolMarshaller . java <nl> - import static software . amazon . awssdk . utils . StringUtils . isNotBlank ; <nl> - if (!request . getHeaders() . containsKey(CONTENT_TYPE) && isNotBlank(contentType)) { <nl> + if (!request . getHeaders() . containsKey(CONTENT_TYPE) && contentType != null) { <nl>,fix content-type override from be remove,1
5f52036ff7ebad0fe673ab6d69322fb81f0126c1,2018-02-02 16:50:07-08:00,"mmm StreamManagingStage . java <nl> ppp StreamManagingStage . java <nl> + import java . util . Optional ; <nl> - final InputStream toBeClosed = createManagedStream(request) ; <nl> + Optional<InputStream> toBeClosed = createManagedStream(request) ; <nl> - return wrapped . execute(request . toBuilder() . content(nonCloseableInputStream(toBeClosed)) . build(), context) ; <nl> + return wrapped . execute(request . toBuilder() . content(nonCloseableInputStream(toBeClosed) . orElse(null)) . build(), <nl> + context) ; <nl> - closeQuietly(toBeClosed, log) ; <nl> + toBeClosed . ifPresent(i -> closeQuietly(i, log)) ; <nl> - private InputStream nonCloseableInputStream(InputStream toBeClosed) { <nl> - return toBeClosed == null ? null : ReleasableInputStream . wrap(toBeClosed) . <nl>",make sure all resource be release,1
bf6ce49c9927257f1c7bd074d3e1c652c316c08d,2018-06-27 15:51:03-07:00,"mmm AsyncClientClass . java <nl> ppp AsyncClientClass . java <nl> + import static java . util . Collections . singletonList ; <nl> + import com . squareup . javapoet . FieldSpec ; <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + import software . amazon . awssdk . codegen . poet . StaticImport ; <nl> + import software . amazon . awssdk . utils . FunctionalUtils ; <nl> +  . addField(FieldSpec . builder(ClassName . get(Logger . class), ""log"") <nl> +  . addModifiers(Modifier . PRIVATE, Modifier . <nl>",exception be now deliver to response handler in all scenario fix error unmarshalling for subscribetoshard,1
b645fb3357873ab994a13e0cabd376347d1eade3,2018-07-26 16:06:19-07:00,"mmm ChannelPipelineInitializer . java <nl> ppp ChannelPipelineInitializer . java <nl> - pipeline . addLast(ForkedHttp2MultiplexCodecBuilder <nl> -  . forClient(new NoOpChannelInitializer()) <nl> -  . frameLogger(SdkHttp2FrameLogger . frameLogger()) <nl> -  . headerSensitivityDetector((name, value) -> lowerCase(name . toString()) . equals(""authorization"")) <nl> -  . initialSettings(Http2Settings . defaultSettings() . initialWindowSize(1_048_576)) <nl> -  . build()) ; <nl> + ForkedHttp2MultiplexCodecBuilder codecBuilder = ForkedHttp2MultiplexCodecBuilder <nl> +  . forClient(new NoOpChannelInitializer()) <nl> +  . headerSensitivityDetector((name, value) -> lowerCase(name . toString()) . equals(""authorization"")) <nl> +  . initialSettings(Http2Settings . defaultSettings() . initialWindowSize(1_048_576)) ; <nl> + SdkHttp2FrameLogger . frameLogger() . ifPresent(codecBuilder::frameLogger) ; <nl> + pipeline <nl>",fix npe when framelogger be null,1
6825899f5258536cccfa6f49fce2be24289fbcef,2018-07-31 19:15:24-07:00,mmm PaginationDocs . java <nl> ppp PaginationDocs . java <nl> - import software . amazon . awssdk . core . internal . async . SequentialSubscriber ; <nl> + import software . amazon . awssdk . utils . async . SequentialSubscriber ; <nl> mmm DefaultEventStreamResponseHandlerBuilder . java <nl> ppp DefaultEventStreamResponseHandlerBuilder . java <nl> - import software . amazon . awssdk . core . internal . async . SequentialSubscriber ; <nl> + import software . amazon . awssdk . utils . async . SequentialSubscriber ; <nl> mmm SdkPublisher . java <nl> ppp SdkPublisher . java <nl> - import software . amazon <nl>,not call terminal method on cancel and fix simple method,0
f01c6beb81c4abd7f1196e780f20b7a92631024e,2018-08-20 10:19:59-07:00,mmm AwsS3V4Signer . java <nl> ppp AwsS3V4Signer . java <nl> - if (!request . protocol() . equals("https")) { <nl> + if (!request . protocol() . equals("https") && request . content() != null) { <nl> new file <nl> ppp EndpointOverrideTest . java <nl> + package software . amazon . awssdk . services . s3 ; <nl> + import static com . github . tomakehurst . wiremock . client . WireMock . aResponse ; <nl> + import static com . github . tomakehurst . wiremock . client . WireMock . anyUrl ; <nl> + import static com . github . tomakehurst <nl>,fix the bug where awss34singer try to sign the payload when the request do not have payload see # 612,1
f6998490d7912e93888190c0387f03a64f02a554,2018-10-03 17:59:25-07:00,mmm AsyncResponseClassSpec . java <nl> ppp AsyncResponseClassSpec . java <nl> + import java . util . Objects ; <nl> +  . filter(Objects::nonNull) <nl> - TypeName resultKeyType = getTypeForResultKey(resultKey) ; <nl> + if (!(resultKeyModel . isList() || resultKeyModel . isMap())) { <nl> + return null ; <nl> + } <nl> + TypeName resultKeyType = getTypeForResultKey(resultKey) ; <nl> mmm SyncResponseClassSpec . java <nl> ppp SyncResponseClassSpec . java <nl> + import java . util . Objects ; <nl> +  . filter(Objects::nonNull) <nl> - TypeName resultKeyType = getTypeForResultKey(resultKey) ; <nl> + if (!(resultKeyModel . isList() || resultKeyModel . isMap())) { <nl> <nl>,do not generate item paginator for non-containers,1
5e377fa8fe9b2a8a2121bdd6242bca074e69e2db,2018-10-19 10:41:17-07:00,mmm VersionInfo . java . vm <nl> ppp VersionInfo . java . vm <nl> - import javax . annotation . Generated ; <nl> + import software . amazon . awssdk . annotations . Generated ; <nl>,fix generated annotation,1
6d1e5fdc73c0f1ac9d4188cef2ceb21e260f890f,2018-11-16 18:40:16-08:00,mmm ChannelAttributeKey . java <nl> ppp ChannelAttributeKey . java <nl> - public static final AttributeKey<CompletableFuture<Protocol>> PROTOCOL_FUTURE = AttributeKey . newInstance("protocolFuture") ; <nl> + public static final AttributeKey<CompletableFuture<Protocol>> PROTOCOL_FUTURE = AttributeKey . newInstance( <nl> + "aws . http . nio . netty . async . protocolFuture") ; <nl> - public static final AttributeKey<MultiplexedChannelRecord> CHANNEL_POOL_RECORD = <nl> - AttributeKey . newInstance("channelPoolRecord") ; <nl> + public static final AttributeKey<MultiplexedChannelRecord> CHANNEL_POOL_RECORD = AttributeKey . newInstance( <nl> + "aws . http . nio . netty . async . channelPoolRecord") ; <nl> - public static final AttributeKey<Long> MAX_CONCURRENT_STREAMS = AttributeKey . newInstance("maxConcurrentStreams") ; <nl> + <nl>,not fireexceptioncaught if the channel be not execute the request,1
b5f2be135b14711943856dda065463014595b667,2019-01-30 15:22:00-08:00,"mmm EventStreamAsyncResponseTransformer . java <nl> ppp EventStreamAsyncResponseTransformer . java <nl> + if (isDone) { <nl> + return ; <nl> + } <nl> + if (isCompletedOrDeliverEvent()) { <nl> + onEventComplete() ; <nl> + } <nl> + } <nl> + private boolean isCompletedOrDeliverEvent() { <nl> - onEventComplete() ; <nl> - return ; <nl> + return true ; <nl> -  . thenRunAsync(this::drainEvents, executor) ; <nl> +  . thenRunAsync(this::drainEvents, executor) <nl> +  . whenComplete((v, t) -> { <nl> + if (t != null) { <nl> + log . error(""Error occurred when delivering an event"", t) ; <nl> + throw SdkClientException <nl>",fix the deadlock issue in event stream operation trigger in an edge case where request and oncomplete be signal at the same time,1
f061b0f85f3426c6ecc2b925970a00d3018df140,2019-02-25 18:03:48-08:00,"mmm ExceptionUnmarshallingIntegrationTest . java <nl> ppp ExceptionUnmarshallingIntegrationTest . java <nl> + @Test <nl> + public void getBucketPolicyNoSuchBucket() { <nl> + assertThatThrownBy(() -> s3 . getBucketPolicy(b -> b . bucket(BUCKET KEY))) <nl> +  . isInstanceOf(NoSuchBucketException . class) <nl> +  . satisfies(e -> assertMetadata((S3Exception) e, ""NoSuchBucket"")) ; <nl> + } <nl> + @Test <nl> + public void asyncGetBucketPolicyNoSuchBucket() { <nl> + assertThatThrownBy(() -> s3Async . getBucketPolicy(b -> b . bucket(BUCKET KEY)) . join()) <nl> +  . hasCauseExactlyInstanceOf(NoSuchBucketException . class) <nl> +  . satisfies(e -> assertMetadata((S3Exception) e . getCause(), ""NoSuchBucket"")) ; <nl> + } <nl> mmm GetBucketPolicyInterceptor . <nl>",fix the issue where nosuchbucketexception be not unmarshalled correctly for s3.getbucketpolicy,1
1fee753c79558efd8f547fb3c36b773ce57880f3,2019-03-12 11:59:03-07:00,mmm NettyRequestExecutor . java <nl> ppp NettyRequestExecutor . java <nl> - channel . close() . addListener(ignored -> context . channelPool() . release(channel)) ; <nl> + channel . close() ; <nl> + context . channelPool() . release(channel) ; <nl> mmm ResponseHandler . java <nl> ppp ResponseHandler . java <nl> - channel . close() . addListener(i -> requestContext . channelPool() . release(channel)) ; <nl> + ctx . close() ; <nl> + requestContext . channelPool() . release(channel) ; <nl> mmm NettyNioAsyncHttpClientWireMockTest . java <nl> ppp NettyNioAsyncHttpClientWireMockTest . java <nl> + import com . github . tomakehurst . wiremock . http . Fault <nl>,fix the bug where channel be not be release back to the pool when there be an exception thrown,1
59fe01717a50185ec640c05d3bb2363f529208bd,2019-04-26 10:55:39-07:00,mmm ChecksumValidatingPublisher . java <nl> ppp ChecksumValidatingPublisher . java <nl> + return ; // Return after onError and not call onComplete below <nl> mmm ChecksumValidatingPublisherTest . java <nl> ppp ChecksumValidatingPublisherTest . java <nl> + import static org . junit . Assert . assertFalse ; <nl> + assertFalse(s . isOnErrorCalled()) ; <nl> + assertFalse(s . isOnErrorCalled()) ; <nl> + assertFalse(s . isOnErrorCalled()) ; <nl> + assertFalse(s . isOnErrorCalled()) ; <nl> + } <nl> + @Test <nl> + public void checksumValidationFailure_throwsSdkClientException_NotNPE() { <nl> + final byte[] incorrectData = new byte[0] ; <nl> + final TestPublisher driver = new TestPublisher() ; <nl> <nl>,do not call oncomplete after onerror in checksumvalidatingsubscriber # oncomplete method which result in npe,1
4df5708b6f68cd491da0968a10213203228660c8,2019-06-25 16:25:51-07:00,mmm EventStreamAsyncResponseTransformer . java <nl> ppp EventStreamAsyncResponseTransformer . java <nl> + future . complete(null) ; <nl> + transformFuture . complete(null) ; <nl> mmm EventStreamResponseHandler . java <nl> ppp EventStreamResponseHandler . java <nl>  <nl> mmm SdkPublisher . java <nl> ppp SdkPublisher . java <nl>  <nl> mmm ResponseHandler . java <nl> ppp ResponseHandler . java <nl> - requestContext . handler() . onError(e) ; <nl> + log . warn("Subscriber cancelled before all events were published") ; <nl> mmm SubscribeToShardIntegrationTest . java <nl> ppp SubscribeToShardIntegrationTest . java <nl> + import java . util . concurrent . CountDownLatch ; <nl> - public <nl>,when subscription be cancel from the subscriber we should not invoke from publisher and we should let the subscriber to handle the cancellation,1
766460061e6ead3f2354308b500ac21da19cfd67,2019-07-29 17:59:23-07:00,"mmm BaseAsyncClientHandler . java <nl> ppp BaseAsyncClientHandler . java <nl> + import static software . amazon . awssdk . utils . FunctionalUtils . runAndLogError ; <nl> + import software . amazon . awssdk . utils . Logger ; <nl> + private static final Logger log = Logger . loggerFor(BaseAsyncClientHandler . class) ; <nl> - CompletableFuture<ReturnT> asyncTransformerFuture = asyncResponseTransformer . prepare() ; <nl> + AsyncStreamingResponseHandler<OutputT, ReturnT> asyncStreamingResponseHandler = <nl> + new AsyncStreamingResponseHandler<>(asyncResponseTransformer) ; <nl> + CompletableFuture<ReturnT> asyncTransformerFuture = asyncStreamingResponseHandler . prepare() ; <nl> - AsyncStreamingResponseHandler<OutputT, ReturnT> asyncStreamingResponseHandler = <nl> - new AsyncStreamingResponseHandler<>(asyncResponseTransformer, decoratedResponseHandlers) ; <nl> + asyncStreamingResponseHandler . responseHandler(decoratedResponseHandlers) ; <nl>",fix the issue where asyncstreamingresponsehandler # prepare be not invoked,1
0878ffba773e394de8fecc819b8ff374ca148e42,2019-09-10 10:59:47-07:00,"mmm AwsCrtAsyncHttpClient . java <nl> ppp AwsCrtAsyncHttpClient . java <nl> + import software . amazon . awssdk . utils . IoUtils ; <nl> - connPool . close() ; <nl> + IoUtils . closeQuietly(connPool, log . logger()) ; <nl> - r . close() ; <nl> + IoUtils . closeQuietly(r, log . logger()) ; <nl>",do not leak native crtresources if error occur during close,1
bafffbb68d2aee028629d8d95d575c386af15afb,2019-11-19 13:53:51-08:00,mmm InstanceProfileCredentialsProvider . java <nl> ppp InstanceProfileCredentialsProvider . java <nl> - import java . net . SocketTimeoutException ; <nl> - boolean isSocketTimeout = e instanceof SocketTimeoutException ; <nl> - if (is400ServiceException || isSocketTimeout) { <nl> + if (is400ServiceException) { <nl> mmm EC2MetadataServiceMock . java <nl> ppp EC2MetadataServiceMock . java <nl> + import software . amazon . awssdk . auth . signer . internal . SignerTestUtils ; <nl> + import software . amazon . awssdk . utils . StringUtils ; <nl> + private static final String TOKEN_RESOURCE_PATH = "/latest/api/token" ; <nl> - } else { <nl> + } else if <nl>,do not fail for request timeout,1
6a7d3159f4d0c9ffbfa70fb9921ced74dec4aae9,2020-02-03 11:25:15-08:00,new file <nl> ppp UrlEncodingIntegrationTest . java <nl> + package software . amazon . awssdk . services . s3 ; <nl> + import static org . assertj . core . api . Assertions . assertThat ; <nl> + import static software . amazon . awssdk . testutils . service . S3BucketUtils . temporaryBucketName ; <nl> + import org . apache . commons . lang3 . RandomStringUtils ; <nl> + import org . junit . AfterClass ; <nl> + import org . junit . BeforeClass ; <nl> + import org . junit . Test ; <nl> + import software . <nl>,fix an issue where field in and be not decode correctly when encodingtype be specify a url,1
28ed143a6fce54d240570c41a6744f41908227fe,2020-02-07 10:31:58-08:00,"mmm HandlerSubscriber . java <nl> ppp HandlerSubscriber . java <nl> + import software . amazon . awssdk . http . nio . netty . internal . utils . OrderedWriteChannelHandlerContext ; <nl> + import software . amazon . awssdk . utils . Validate ; <nl> + ctx = OrderedWriteChannelHandlerContext . wrap(ctx) ; <nl> + Validate . notNull(t, ""Event must not be null . "") ; <nl> new file <nl> ppp DelegatingChannelHandlerContext . java <nl> + package software . amazon . awssdk . http . nio . netty . internal . utils ; <nl> + import io . netty . buffer <nl>",fix an issue with transcribe streaming 's startstreamingtranscription api that could cause signature mismatch exception,1
0b071010f3ff87936b3565693500b36a04c2b35b,2020-05-12 14:26:35-07:00,mmm FileAsyncResponseTransformer . java <nl> ppp FileAsyncResponseTransformer . java <nl> + writeInProgress = false ; <nl> - writeInProgress = false ; <nl> - } <nl> + } <nl> deleted file <nl> mmm FileAsyncResponseTransfomerTest . java <nl> - package software . amazon . awssdk . core . internal . async ; <nl> - import static org . assertj . core . api . Assertions . assertThat ; <nl> - import com . google . common . jimfs . Jimfs ; <nl> - import java . io . IOException ; <nl> - import java . nio . file . FileSystem ; <nl>,fix a race condition in ` fileasyncresponsetransformer ` where the future fail to complete when oncomplete event be dispatch on the same thread that execute request,1
2f20c92aab898945ee4e375921a30537fd376b38,2020-06-15 15:25:21-07:00,mmm OptionalAttributeConverter . java <nl> ppp OptionalAttributeConverter . java <nl> - if (input . nul()) { <nl> + if (Boolean . TRUE . equals(input . nul())) { <nl> new file <nl> ppp OptionalAttributeValueConverterTest . java <nl> + package software . amazon . awssdk . enhanced . dynamodb . internal . converter . attribute ; <nl> + import org . junit . Test ; <nl> + import software . amazon . awssdk . services . dynamodb . model . AttributeValue ; <nl> + public class OptionalAttributeValueConverterTest { <nl> + private static final OptionalAttributeConverter<String> CONVERTER = <nl> + OptionalAttributeConverter . create(StringAttributeConverter <nl>,fix npe in optionalattributevalueconverter,1
b5148ee1df12e97e96cfb35c2c700d8bcc66f6c6,2020-06-24 12:21:36-07:00,"mmm DeleteItemOperation . java <nl> ppp DeleteItemOperation . java <nl> + import java . util . Map ; <nl> + import software . amazon . awssdk . services . dynamodb . model . AttributeValue ; <nl> + Map<String, String> expressionNames = this . request . conditionExpression() . expressionNames() ; <nl> + Map<String, AttributeValue> expressionValues = this . request . conditionExpression() . expressionValues() ; <nl> - if (!this . request . conditionExpression() . expressionNames() . isEmpty()) { <nl> - requestBuilder = requestBuilder . expressionAttributeNames(this . request . conditionExpression() . expressionNames()) ; <nl> + if (expressionNames != null && !expressionNames . <nl>",fix npe in deleteitemoperation when conditionexpression have null attributenames or attributevalues,1
f9fba79f16555951ccbefb7f25449d4cedec5182,2020-08-12 12:10:56-07:00,"mmm MetricPublisher . java <nl> ppp MetricPublisher . java <nl> - import software . amazon . awssdk . metrics . MetricCollection ; <nl> mmm CloudWatchMetricPublisher . java <nl> ppp CloudWatchMetricPublisher . java <nl> + import java . util . concurrent . CompletableFuture ; <nl> + import java . util . concurrent . ExecutionException ; <nl> + import java . util . concurrent . Future ; <nl> + import java . util . concurrent . TimeoutException ; <nl> - this . scheduledExecutor . scheduleAtFixedRate(this::flushMetrics, <nl> + this . scheduledExecutor . scheduleAtFixedRate(this::flushMetricsQuietly, <nl> - private void flushMetrics() { <nl> - while <nl>",fix an issue where ` cloudwatchmetricpublisher ` might not always complete flush pending metric on ` close `,1
255e17c804d12faba60887285314ca0d8b136ebe,2020-08-31 17:41:10-07:00,"new file <nl> ppp TestStringUtils . java <nl> + package software . amazon . awssdk . codegen ; <nl> + import software . amazon . awssdk . codegen . internal . Constant ; <nl> + public final class TestStringUtils { <nl> + private TestStringUtils() { <nl> + } <nl> + public static String toPlatformLfs(String str) { <nl> + return str . replaceAll(""\n"", Constant . LF) ; <nl> + } <nl> + } <nl> mmm PoetGeneratorTaskIntegrationTest . java <nl> ppp PoetGeneratorTaskIntegrationTest . java <nl> + import static software . amazon . awssdk . codegen . TestStringUtils . toPlatformLfs ; <nl> <nl>",ensure build work for window # 986,0
82bb676516caab09349332b8487a3b269cdef7ab,2020-09-02 14:23:02-07:00,"mmm CrtRequestExecutor . java <nl> ppp CrtRequestExecutor . java <nl> + import software . amazon . awssdk . http . SdkCancellationException ; <nl> - CompletableFuture<Void> requestFuture = new CompletableFuture<>() ; <nl> + CompletableFuture<Void> requestFuture = createExecutionFuture(executionContext . sdkRequest()) ; <nl> + private CompletableFuture<Void> createExecutionFuture(AsyncExecuteRequest request) { <nl> + CompletableFuture<Void> future = new CompletableFuture<>() ; <nl> + future . whenComplete((r, t) -> { <nl> + if (t == null) { <nl> + return ; <nl> + } <nl> + if (future . isCancelled()) { <nl> + request . responseHandler() . onError(new SdkCancellationException(""The request was cancelled"")) ; <nl> + } <nl> <nl>",invoke responsehandler # onerror when the request future be cancel,1
8e40275fdab369644a399110b66b055931da32c8,2020-10-30 14:49:10-07:00,"mmm SdkPublisher . java <nl> ppp SdkPublisher . java <nl> - import software . amazon . awssdk . utils . async . DelegatingSubscriber ; <nl> + import software . amazon . awssdk . utils . internal . MappingSubscriber ; <nl> - return subscriber -> subscribe(new DelegatingSubscriber<T, U>(subscriber) { <nl> - @Override <nl> - public void onNext(T t) { <nl> - subscriber . onNext(mapper . apply(t)) ; <nl> - } <nl> - }) ; <nl> + return subscriber -> subscribe(MappingSubscriber . create(subscriber, mapper)) ; <nl> mmm SdkPublishersTest . java <nl> ppp SdkPublishersTest . java <nl> + import utils . FakeSdkPublisher <nl>",fix for handle transormation error in async dynamodb enhanced client operation that return an sdkpublisher,1
944c2f585e3a5e0efe3138769634a58d09ee0782,2020-10-30 15:47:39-07:00,mmm EventStreamAsyncResponseTransformer . java <nl> ppp EventStreamAsyncResponseTransformer . java <nl> - eventsToDeliver . add(ON_COMPLETE_EVENT) ; <nl> + synchronized (eventsToDeliver) { <nl> + eventsToDeliver . add(ON_COMPLETE_EVENT) ; <nl> + } <nl>,field eventstodeliver be a linkedlist i.e. not thread-safe access to field eventstodeliver be protect by synchronization on itself but not in 1 location,1
5133ba3c6230a76cf19afc13276ec136b9c80516,2020-11-04 09:38:37-08:00,mmm AwsS3V4aSigner . java <nl> ppp AwsS3V4aSigner . java <nl> + signingConfig . setSignedBodyHeader(AwsSigningConfig . AwsSignedBodyHeaderType . X_AMZ_CONTENT_SHA256) ; <nl> + -            signingConfig . setSignedBodyHeader(AwsSigningConfig . AwsSignedBodyHeaderType . NONE) ; <nl> - } else { <nl> - signingConfig . setSignedBodyHeader(AwsSigningConfig . AwsSignedBodyHeaderType . X_AMZ_CONTENT_SHA256) ; <nl> mmm AbstractAws4aSigner . java <nl> ppp AbstractAws4aSigner . java <nl> + import software . amazon . awssdk . auth . credentials . CredentialUtils ; <nl> - signingConfig . setSignedBodyHeader(AwsSigningConfig . AwsSignedBodyHeaderType . X_AMZ_CONTENT_SHA256) ; <nl> + if (!request . protocol() . equals("https") <nl>,unconditional s3 body signing ; do not sign on anonymous credential,0
2a7b0a9e228c871139af8ac4a6298e34cebc8ad5,2020-11-09 16:40:04-08:00,"mmm ProfileCredentialsUtils . java <nl> ppp ProfileCredentialsUtils . java <nl> + import software . amazon . awssdk . core . internal . util . ClassLoaderHelper ; <nl> - Class<?> stsCredentialsProviderFactory = Class . forName(STS_PROFILE_CREDENTIALS_PROVIDER_FACTORY, true, <nl> - Thread . currentThread() . getContextClassLoader()) ; <nl> + Class<?> stsCredentialsProviderFactory = ClassLoaderHelper . loadClass(STS_PROFILE_CREDENTIALS_PROVIDER_FACTORY, <nl> + getClass()) ; <nl> mmm WebIdentityCredentialsUtils . java <nl> ppp WebIdentityCredentialsUtils . java <nl> + import software . amazon . awssdk . core . internal . util . ClassLoaderHelper ; <nl> - Class<?> stsCredentialsProviderFactory = Class . forName(STS_WEB_IDENTITY_CREDENTIALS_PROVIDER_FACTORY, true, <nl> - Thread . currentThread() . getContextClassLoader()) ; <nl>",pr # 2123 sts not on class path when use parallel stream,1
b67c0cc9f71725a649086ba78dfff86e94de4c76,2020-12-16 14:52:02-08:00,"mmm ModelBuilderSpecs . java <nl> ppp ModelBuilderSpecs . java <nl> - import java . util . stream . Collectors ; <nl> - if (isEvent()) { <nl> - fluentSetters = stripAnnotation(fluentSetters, SafeVarargs . class) ; <nl> - } <nl> - private MethodSpec stripAnnotation(MethodSpec methodSpec, Class<?> annotation) { <nl> - MethodSpec . Builder builder = methodSpec . toBuilder() ; <nl> - builder . annotations . clear() ; <nl> - methodSpec . annotations . forEach(a -> { <nl> - if (!a . type . equals(ClassName . get(annotation))) { <nl> - builder . addAnnotation(a) ; <nl> - } <nl> - }) ; <nl> <nl>",do not strip safevarargs,0
de8a41184243097f6b682c380082af83c59ab5b3,2021-03-10 16:09:41-08:00,"mmm S3PresignerIntegrationTest . java <nl> ppp S3PresignerIntegrationTest . java <nl> - import java . io . Closeable ; <nl> - import software . amazon . awssdk . core . ResponseInputStream ; <nl> - import software . amazon . awssdk . services . s3 . model . GetObjectResponse ; <nl> - import software . amazon . awssdk . services . s3 . model . ListMultipartUploadsResponse ; <nl> - String scaryObjectKey = testGetObjectKey + "" !'/()~`"" ; <nl> + String scaryObjectKey = ""a0A!-_ . *'()&@:,$=+? ; \n\\^`<>{}[]#%\""~|闂?"" testGetObjectKey ; <nl> mmm S3AccessPointEndpointResolver . java <nl> ppp S3AccessPointEndpointResolver . java <nl> + <nl>",fix an issue where presigned url for access point object could bypass encode cause an illegalargumentexception,1
eca256f6af7fc23385c11916c09d1f1bf267f307,2021-04-06 15:04:48-07:00,"mmm GoAwayException . java <nl> ppp GoAwayException . java <nl> - import io . netty . buffer . ByteBuf ; <nl> - import java . nio . charset . StandardCharsets ; <nl> - GoAwayException(long errorCode, ByteBuf debugData) { <nl> + GoAwayException(long errorCode, String debugData) { <nl> - errorCode, debugData . toString(StandardCharsets . UTF_8)) ; <nl> + errorCode, debugData) ; <nl> mmm Http2GoAwayEventListener . java <nl> ppp Http2GoAwayEventListener . java <nl> + import java . nio . charset . StandardCharsets ; <nl> - GoAwayException exception = new GoAwayException(errorCode, debugData . retain()) ; <nl> + GoAwayException exception = new GoAwayException(errorCode, debugData <nl>",do not increase retain count of byebuf,1
b9b2ad36d1df1b6adcfa3a1228a4ae3b1d5eafc1,2021-05-06 16:14:03-07:00,"mmm AsyncWaiterExecutor . java <nl> ppp AsyncWaiterExecutor . java <nl> + import java . util . concurrent . CompletionException ; <nl> - Either<T, Throwable> responseOrException = exception == null ? Either . left(response) : Either . right(exception) ; <nl> + Either<T, Throwable> responseOrException ; <nl> + if (exception == null) { <nl> + responseOrException = Either . left(response) ; <nl> + } else { <nl> + if (exception instanceof CompletionException) { <nl> + responseOrException = Either . right(exception . getCause()) ; <nl> + } else { <nl> + responseOrException = Either . right(exception) ; <nl> + } <nl> + <nl>",fix an issue where async waiter fail to match wrapped exception,1
a3fc4b483c224c5fa86e74161353d339aed4d733,2021-07-31 11:12:05-07:00,"mmm SystemSettingsCredentialsProvider . java <nl> ppp SystemSettingsCredentialsProvider . java <nl> - if (StringUtils . isEmpty(accessKey)) { <nl> + if (StringUtils . isBlank(accessKey)) { <nl> - if (StringUtils . isEmpty(secretKey)) { <nl> + if (StringUtils . isBlank(secretKey)) { <nl> - return sessionToken == null ? AwsBasicCredentials . create(accessKey, secretKey) <nl> - : AwsSessionCredentials . create(accessKey, secretKey, sessionToken) ; <nl> + return StringUtils . isBlank(sessionToken) ? AwsBasicCredentials . create(accessKey, secretKey) <nl> + : AwsSessionCredentials . create(accessKey, secretKey, sessionToken) ; <nl>",do not attempt to use empty session token,1
21879c8a3fa8de01d7c8f98e88e333e4735d625d,2021-08-11 17:56:55-07:00,"mmm AsyncClientClass . java <nl> ppp AsyncClientClass . java <nl> + import software . amazon . awssdk . awscore . AwsRequestOverrideConfiguration ; <nl> - builder . addStatement(""\n\nString key = clientConfiguration . option($T . CREDENTIALS_PROVIDER) . resolveCredentials()"" + <nl> - "" . accessKeyId()"", AwsClientOption . class) ; <nl> - builder . addStatement(""EndpointDiscoveryRequest endpointDiscoveryRequest = $T . builder() . required($L)"" + <nl> - "" . defaultEndpoint(clientConfiguration . option($T . ENDPOINT)) . build()"", <nl> - EndpointDiscoveryRequest . class, <nl> - opModel . getInputShape() . getEndpointDiscovery() . isRequired(), <nl> - SdkClientOption . class) ; <nl> - builder . addStatement(""cachedEndpoint = $L . get(key, <nl>",fix an issue where request-level override credential ) be not apply to endpoint discovery call,1
be56f145038eb8d35260f893da2829e0140b4a43,2021-08-23 14:40:29-07:00,mmm RetryPolicy . java <nl> ppp RetryPolicy . java <nl> - result = 31 * result + Boolean . hashCode(fastFailRateLimiting) ; <nl> + result = 31 * result Objects . hashCode(fastFailRateLimiting) ; <nl> mmm RetryPolicyTest . java <nl> ppp RetryPolicyTest . java <nl> + @Test <nl> + public void hashCodeDoesNotThrow() { <nl> + RetryPolicy . defaultRetryPolicy() . hashCode() ; <nl> + } <nl>,fix npe in retrypolicy.hashcode (,1
135b3738c6bfcc1416e97d0f5fe0cd6c61165e3d,2021-08-31 13:19:48-07:00,mmm EventStreamAsyncResponseTransformer . java <nl> ppp EventStreamAsyncResponseTransformer . java <nl> + import static java . util . Collections . emptyList ; <nl> + import static java . util . Collections . singleton ; <nl> - import static software . amazon . awssdk . utils . FunctionalUtils . runAndLogError ; <nl> - import java . util . LinkedList ; <nl> - import java . util . Queue ; <nl> - import java . util . concurrent . atomic . AtomicLong ; <nl> - import java . util . concurrent . atomic . AtomicReference ; <nl> - import org . reactivestreams <nl>,fix an issue where event stream might fail with classcastexception or nosuchelementexception,1
eee6bbba8e45681fcf94ecd867851c340070d812,2021-09-09 12:38:37-07:00,"mmm DeleteItemEnhancedRequest . java <nl> ppp DeleteItemEnhancedRequest . java <nl> + import java . util . Objects ; <nl> - return key != null ? key . equals(that . key) : that . key == null ; <nl> + return Objects . equals(key, that . key) && Objects . equals(conditionExpression, that . conditionExpression) ; <nl> - return key != null ? key . hashCode() : 0 ; <nl> + int result = key != null ? key . hashCode() : 0 ; <nl> + result = 31 * result (conditionExpression != null ? conditionExpression . hashCode() : 0) ; <nl>",fix to put and delete item enhanced request,1
49ce75ae71c3a01375db2b6a40facc6f023f644b,2021-09-21 09:41:10-07:00,mmm DefaultS3TransferManager . java <nl> ppp DefaultS3TransferManager . java <nl> - public DefaultS3TransferManager(DefaultBuilder builder) { <nl> + public DefaultS3TransferManager(DefaultBuilder tmBuilder) { <nl> - builder . s3ClientConfiguration . credentialsProvider() . ifPresent(clientBuilder::credentialsProvider) ; <nl> - builder . s3ClientConfiguration . maxConcurrency() . ifPresent(clientBuilder::maxConcurrency) ; <nl> - builder . s3ClientConfiguration . minimumPartSizeInBytes() . ifPresent(clientBuilder::minimumPartSizeInBytes) ; <nl> - builder . s3ClientConfiguration . region() . ifPresent(clientBuilder::region) ; <nl> - builder . s3ClientConfiguration . targetThroughputInGbps() . ifPresent(clientBuilder::targetThroughputInGbps) ; <nl> - builder . s3ClientConfiguration . asyncConfiguration() . ifPresent(clientBuilder::asyncConfiguration) ; <nl> + if (tmBuilder . s3ClientConfiguration != null) { <nl> + tmBuilder . s3ClientConfiguration . credentialsProvider() . ifPresent(clientBuilder::credentialsProvider) <nl>,fix npe thrown when create a default transfer manager,1
cea7a9fa2b97aecd75dcd8feb24aa7dcccf390b0,2021-10-25 16:31:43-07:00,"mmm NettyRequestExecutor . java <nl> ppp NettyRequestExecutor . java <nl> - done = true ; <nl> - subscriber . onComplete() ; <nl> + Long expectedContentLength = requestContentLength . orElse(null) ; <nl> + if (expectedContentLength != null && written < expectedContentLength) { <nl> + onError(new IllegalStateException(""Request content was only "" written "" bytes, but the specified "" <nl> + ""content-length was "" expectedContentLength "" bytes . "")) ; <nl> + } else { <nl> + done = true ; <nl> + subscriber . onComplete() ; <nl> + } <nl> mmm ChecksumCalculatingAsyncRequestBody . java <nl> ppp ChecksumCalculatingAsyncRequestBody . java <nl> + <nl>",fix sdk behavior when request content-length do not match the data length return by the publisher,1
4f812748e8ae341089284f24b2a1d5a320123cf0,2021-10-26 11:03:43-07:00,"mmm FileAsyncRequestBody . java <nl> ppp FileAsyncRequestBody . java <nl> + import java . nio . file . NoSuchFileException ; <nl> + import java . nio . file . attribute . FileTime ; <nl> - Subscription subscription = new FileSubscription(channel, channel . size(), s, chunkSizeInBytes) ; <nl> + Subscription subscription = new FileSubscription(path, channel, s, chunkSizeInBytes) ; <nl> - } catch (IOException e) { <nl> + } catch (IOException | RuntimeException e) { <nl> + private final Path path ; <nl> + private final long sizeAtStart ; <nl> + private final FileTime modifiedTimeAtStart ; <nl> - private FileSubscription(AsynchronousFileChannel inputChannel, <nl>",verify the file size do not change while asyncrequestbody.fromfile 's publisher be execute,1
538f998e87c823c40d8eddaa60eed178b50e6f65,2021-12-03 21:44:55-08:00,new file <nl> ppp ListBucketsIntegrationTest . java <nl> + package software . amazon . awssdk . services . s3 ; <nl> + import org . junit . Test ; <nl> + import software . amazon . awssdk . regions . Region ; <nl> + public class ListBucketsIntegrationTest extends S3IntegrationTestBase { <nl> + @Test <nl> + public void listBuckets_InGlobal_DoesNotThrowException() { <nl> + try (S3Client s3 = s3ClientBuilder() . region(Region . AWS_GLOBAL) . build()) { <nl> + s3 . listBuckets() ; <nl> + } <nl> + } <nl> + } <nl> mmm S3BucketEndpointResolver . java <nl> ppp S3BucketEndpointResolver . java <nl> <nl>,fix an issue that result in a nullpointerexception when an invalid or global region be use on an s3 client,1
7e499dba4597e384e7fb5ef36df36110bd5597df,2021-12-16 17:04:49-08:00,"mmm AwaitCloseChannelPoolMap . java <nl> ppp AwaitCloseChannelPoolMap . java <nl> + import java . util . Arrays ; <nl> - sdkChannelPool = new HandlerRemovingChannelPool(sdkChannelPool) ; <nl> + sdkChannelPool = new ListenerInvokingChannelPool(bootstrap . config() . group(), sdkChannelPool, Arrays . asList( <nl> + InUseTrackingChannelPoolListener . create(), <nl> + HandlerRemovingChannelPoolListener . create() <nl> + )) ; <nl> deleted file <nl> mmm HandlerRemovingChannelPool . java <nl> - package software . amazon . awssdk . http . nio . netty . internal ; <nl> - import static software . amazon . awssdk . http . nio . netty . internal . ChannelAttributeKey . IN_USE <nl>",ensure in-use channel be not incorrectly close,1
2bd587b39997f04fcc588e1ecb4eaefffca977f1,2022-01-18 13:05:14-08:00,mmm DefaultAwsClientBuilderTest . java <nl> ppp DefaultAwsClientBuilderTest . java <nl> + String clientName = "foobarsync" ; <nl> + SdkHttpClient sdkHttpClient = mock(SdkHttpClient . class) ; <nl> -  . httpClient(mock(SdkHttpClient . class)) <nl> +  . httpClient(sdkHttpClient) <nl> + when(sdkHttpClient . clientName()) . thenReturn(clientName) ; <nl> + assertThat(client . clientConfiguration . option(SdkClientOption . SYNC_HTTP_CLIENT) . clientName()) <nl> +  . isEqualTo(clientName) ; <nl> + String clientName = "foobarasync" ; <nl> + SdkAsyncHttpClient sdkAsyncHttpClient = mock(SdkAsyncHttpClient . class) ; <nl> -  . httpClient(mock(SdkAsyncHttpClient . class)) <nl> +  . httpClient(sdkAsyncHttpClient) <nl> + when(sdkAsyncHttpClient . clientName()) . thenReturn(clientName) ; <nl> <nl>,fix an issue where the clientname be not overridden for unmanaged async client,1
aa31cccc4f5ecfe23be4280e5447a447dbe841c8,2022-02-15 13:50:33-08:00,"mmm FutureCancelHandler . java <nl> ppp FutureCancelHandler . java <nl> + import io . netty . util . Attribute ; <nl> - if (currentRequestCancelled(ctx, cancelledException)) { <nl> + Long channelExecutionId = executionId(ctx) ; <nl> + if (channelExecutionId == null) { <nl> + RequestContext requestContext = ctx . channel() . attr(REQUEST_CONTEXT_KEY) . get() ; <nl> + LOG . warn(ctx . channel(), () -> String . format(""Received a cancellation exception on a channel that doesn't have an "" <nl> + ""execution Id attached .  Exception's execution ID is %d .  "" <nl> + ""Exception is being ignored .  <nl>",fix npe in netty client,1
03677b2826ec2e9f9500c0245d506d53782ea216,2022-02-21 09:24:46-08:00,"mmm MakeAsyncHttpRequestStage . java <nl> ppp MakeAsyncHttpRequestStage . java <nl> - import org . reactivestreams . Publisher ; <nl> - import software . amazon . awssdk . http . SdkHttpResponse ; <nl> - private static final class WrappedErrorForwardingResponseHandler<T> <nl> - implements TransformingAsyncResponseHandler<T> { <nl> - private final TransformingAsyncResponseHandler<T> wrappedHandler ; <nl> - private final CompletableFuture<T> responseFuture ; <nl> - private WrappedErrorForwardingResponseHandler(TransformingAsyncResponseHandler<T> wrappedHandler, <nl> - CompletableFuture<T> responseFuture) { <nl> - this . wrappedHandler = wrappedHandler ; <nl> - this . responseFuture = responseFuture ; <nl> - } <nl> - private static <T> WrappedErrorForwardingResponseHandler<T> of( <nl> - TransformingAsyncResponseHandler<T> wrappedHandler, <nl> - <nl>",fix the issue where the sdk do not offload future completion,1
3408ef757ae83ded88768ab9f5ac271ca8103595,2022-03-14 20:53:12-04:00,mmm ApiCallTimeoutTrackingStage . java <nl> ppp ApiCallTimeoutTrackingStage . java <nl> - if (context . apiCallTimeoutTracker() . hasExecuted()) { <nl> + if (apiCallTimerExecuted(context)) { <nl> - if (context . apiCallTimeoutTracker() . hasExecuted()) { <nl> + if (apiCallTimerExecuted(context)) { <nl> + private static boolean apiCallTimerExecuted(RequestExecutionContext context) { <nl> + return context . apiCallTimeoutTracker() != null && context . apiCallTimeoutTracker() . hasExecuted() ; <nl> + } <nl>,fix an issue where npe could be throw when a request fail before timer start,1
cc79f02277a0ad40d88986ae9f991e2ec22832c8,2022-03-31 13:48:55-04:00,"mmm MemberCopierSpec . java <nl> ppp MemberCopierSpec . java <nl> - code . add(""$T $N = $N . build() ;"", buildableOutputType, buildableOutput, inputVariableName) ; <nl> + code . add(""$T $N = $N == null ? null : $N . build() ;"", buildableOutputType, buildableOutput, inputVariableName, <nl> + inputVariableName) ; <nl> - code . add(""$T $N = $N . toBuilder() ;"", builderOutputType, builderOutput, inputVariableName) ; <nl> + code . add(""$T $N = $N == null ? null : $N . toBuilder() ;"", builderOutputType, builderOutput, inputVariableName, <nl> + inputVariableName) ; <nl> mmm listofmapofstringtostructcopier . java <nl> ppp listofmapofstringtostructcopier . java <nl> - <nl>",fix npe thrown from serializing/deserializing a structure that have map type with null value,1
26bb6dcf058b08f55665f931d02937238b00e576,2022-08-22 21:16:18-07:00,"mmm AbstractAwsSigner . java <nl> ppp AbstractAwsSigner . java <nl> + if (StringUtils . isEmpty(key)) { <nl> + return ; <nl> + } <nl> mmm Aws4SignerTest . java <nl> ppp Aws4SignerTest . java <nl> + @Test <nl> + public void canonicalizedQueryString_keyWithEmptyNames_doNotGetSigned() throws Exception { <nl> + AwsBasicCredentials credentials = AwsBasicCredentials . create(""akid"", ""skid"") ; <nl> + SdkHttpFullRequest . Builder request = generateBasicRequest() ; <nl> + request . putRawQueryParameter("""", (String) null) ; <nl> + SdkHttpFullRequest actual = SignerTestUtils . signRequest(signer, request . build(), credentials, ""demo"", signingOverrideClock, ""us-east-1"") ; <nl> + assertThat(actual . firstMatchingHeader(""Authorization"")) <nl> +  . hasValue(""AWS4-HMAC-SHA256 Credential=akid/19810216/us-east-1/demo/aws4_request, "" <nl>",fix signature mismatch exception generate when sign query parameter with empty-value key,1
a65355a494e533c4268c49efb10be57709bcc29a,2022-08-23 12:43:48-07:00,"mmm BaseSyncClientHandler . java <nl> ppp BaseSyncClientHandler . java <nl> - return transformResponse(resp, response . content() . orElse(null)) ; <nl> + return transformResponse(resp, response . content() . orElseGet(AbortableInputStream::createEmpty)) ; <nl> mmm ResponseTransformer . java <nl> ppp ResponseTransformer . java <nl> - return ResponseBytes . fromByteArray(response, IoUtils . toByteArray(inputStream)) ; <nl> + return ResponseBytes . fromByteArrayUnsafe(response, IoUtils . toByteArray(inputStream)) ; <nl> mmm AbortableInputStream . java <nl> ppp AbortableInputStream . java <nl> + import java . io . ByteArrayInputStream ; <nl> + public static AbortableInputStream createEmpty() { <nl> + return create(new ByteArrayInputStream(new byte[0])) ; <nl> + } <nl> new file <nl> <nl>",fix an issue in sync client where empty response payload could cause a null pointer exception,1
5951f6bfab38ee1f1a91538f4306cbfd370a9278,2022-09-21 09:16:34-07:00,"mmm AsyncWaiterExecutor . java <nl> ppp AsyncWaiterExecutor . java <nl> - future . completeExceptionally(executorHelper . noneMatchException(responseOrException)) ; <nl> + Optional<Throwable> t = responseOrException . right() ; <nl> + if (t . isPresent() && t . get() instanceof Error) { <nl> + future . completeExceptionally(t . get()) ; <nl> + } else { <nl> + future . completeExceptionally(executorHelper . noneMatchException(responseOrException)) ; <nl> + } <nl> - future . completeExceptionally(SdkClientException . create(""Encountered unexpected exception . "", t)) ; <nl> + Throwable cause = t instanceof CompletionException ? t . getCause() : t ; <nl> + if (cause instanceof Error) { <nl> <nl>",error should not be wrap async waiter,0
cef6161ed33b472cb4ad31dd5954227f96102818,2022-12-08 11:31:04-08:00,"mmm EndpointResolverInterceptorSpec . java <nl> ppp EndpointResolverInterceptorSpec . java <nl> - b . beginControlFlow(""switch (operationName)"") ; <nl> + boolean generateSwitch = operations . values() . stream() . anyMatch(this::hasStaticContextParams) ; <nl> + if (generateSwitch) { <nl> + b . beginControlFlow(""switch (operationName)"") ; <nl> - operations . forEach((n, m) -> { <nl> - if (!hasStaticContextParams(m)) { <nl> - return ; <nl> - } <nl> + operations . forEach((n, m) -> { <nl> + if (!hasStaticContextParams(m)) { <nl> + return ; <nl> + } <nl> - b . addCode(""case $S:"", n) ; <nl> - b . addStatement(""$N(params)"", staticContextParamsMethodName(m)) ; <nl> + b <nl>",do not generate switch statement if there be no case statement,1
ee512835fc40f9307fb770113f4cd8a9df22f445,2023-01-26 00:18:29+00:00,"mmm CrtRequestExecutor . java <nl> ppp CrtRequestExecutor . java <nl> - reportFailure(new IOException(""An exception occurred when acquiring a connection"", throwable), <nl> + reportFailure(crtConn, <nl> + new IOException(""An exception occurred when acquiring a connection"", throwable), <nl> - reportFailure(toThrow, <nl> + reportFailure(crtConn, <nl> + toThrow, <nl> - reportFailure(new IOException(""An exception occurred when making the request"", e), <nl> + reportFailure(crtConn, new IOException(""An exception occurred when making the request"", e), <nl> - private void reportFailure(Throwable cause, <nl> + private void reportFailure(HttpClientConnection crtConn, <nl> + Throwable cause, <nl> + if (crtConn != null) { <nl> + crtConn . close() ; <nl> + } <nl> <nl>",fix an issue that could result in resource leak when send request fails due to error such a invalid request,1
bc4a6b05183d25dcdca1323304fea0cd9f157d24,2023-02-21 12:03:43-08:00,"mmm ProfileCredentialsProvider . java <nl> ppp ProfileCredentialsProvider . java <nl> + private final Object credentialsProviderLock = new Object() ; <nl> - if (isNewProfileFile(cachedOrRefreshedProfileFile)) { <nl> - synchronized (this) { <nl> - if (isNewProfileFile(cachedOrRefreshedProfileFile)) { <nl> + if (shouldUpdateCredentialsProvider(cachedOrRefreshedProfileFile)) { <nl> + synchronized (credentialsProviderLock) { <nl> + if (shouldUpdateCredentialsProvider(cachedOrRefreshedProfileFile)) { <nl> - private boolean isNewProfileFile(ProfileFile profileFile) { <nl> - return !Objects . equals(currentProfileFile, profileFile) ; <nl> + private boolean shouldUpdateCredentialsProvider(ProfileFile profileFile) { <nl> + return credentialsProvider == null || !Objects . equals(currentProfileFile, profileFile) ; <nl>",fix race condition that could cause a nullpointerexception to be raise from profilecredentialsprovider,1
a5cd20eb31694eda1e05d8c8ebc9f37219787229,2023-03-02 10:16:38-08:00,"mmm CopyObjectHelper . java <nl> ppp CopyObjectHelper . java <nl> - private final S3NativeClientConfiguration s3NativeClientConfiguration ; <nl> + private final long partSizeInBytes ; <nl> - public CopyObjectHelper(S3AsyncClient s3AsyncClient, S3NativeClientConfiguration s3NativeClientConfiguration) { <nl> + public CopyObjectHelper(S3AsyncClient s3AsyncClient, long partSizeInBytes) { <nl> - this . s3NativeClientConfiguration = s3NativeClientConfiguration ; <nl> + this . partSizeInBytes = partSizeInBytes ; <nl> - long partSize = s3NativeClientConfiguration . partSizeBytes() ; <nl> - if (contentLength <= partSize) { <nl> + if (contentLength <= partSizeInBytes) { <nl> - long optimalPartSize = calculateOptimalPartSizeForCopy(s3NativeClientConfiguration . partSizeBytes()) ; <nl> + long optimalPartSize = calculateOptimalPartSizeForCopy(partSizeInBytes) ; <nl> - return (long) Math <nl>",fix the thread safety issue with crt base s3 client,1
cc750240766e27716e0d82e7782cd28af8cfdfe5,2023-03-24 12:58:16-07:00,mmm ConverterUtils . java <nl> ppp ConverterUtils . java <nl> + String result ; <nl> - int padding = paddingAmount value . length() ; <nl> - StringBuilder result = new StringBuilder(paddingAmount) ; <nl> - for (int i = 0 ; i < padding ; i++) { <nl> - result . append('0') ; <nl> + if (value . length() == paddingAmount) { <nl> + result = value ; <nl> + } else { <nl> + int padding = paddingAmount - value . length() ; <nl> + StringBuilder sb = new StringBuilder(paddingAmount) ; <nl> + for (int i = 0 ; <nl>,do not attempt to pad time string if current length be sufficient,1
754d525187feaf79686a70673117fd6b8bd720de,2023-05-16 13:28:21-07:00,"mmm MakeAsyncHttpRequestStage . java <nl> ppp MakeAsyncHttpRequestStage . java <nl> - responseHandlerFuture . whenCompleteAsync((r, t) -> { <nl> - if (t == null) { <nl> - responseFuture . complete(r) ; <nl> - } else { <nl> - responseFuture . completeExceptionally(t) ; <nl> + CompletableFuture<Response<OutputT>> asyncComplete = <nl> + responseHandlerFuture . whenCompleteAsync((r, t) -> completeResponseFuture(responseFuture, r, t), <nl> + futureCompletionExecutor) ; <nl> + asyncComplete . whenComplete((ignored, asyncCompleteError) -> { <nl> + if (asyncCompleteError != null) { <nl> + log . debug(() -> String . format(""Could not complete the service call future on the provided "" <nl> + ""FUTURE_COMPLETION_EXECUTOR .  <nl>",fix leak future when executor reject runnable,1
9f53186ba77bbb3aece5a7993c1ecc5921a51d01,2023-06-16 13:47:53-07:00,"mmm WaiterExecutor . java <nl> ppp WaiterExecutor . java <nl> - import java . util . Optional ; <nl> - import software . amazon . awssdk . core . waiters . WaiterState ; <nl> - return doExecute(pollingFunction, 0, System . currentTimeMillis()) ; <nl> - } <nl> - WaiterResponse<T> doExecute(Supplier<T> pollingFunction, int attemptNumber, long startTime) { <nl> - attemptNumber++ ; <nl> - T response ; <nl> - try { <nl> - response = pollingFunction . get() ; <nl> - } catch (Exception exception) { <nl> - return evaluate(pollingFunction, Either . right(exception), attemptNumber, startTime) ; <nl> - } <nl> - return <nl>",fix the stackoverflowexception in waiterexecutor in case of large retries count,1
0326bf1b78cbed5a29181be2c79d043c4491d81f,2023-08-28 13:04:30-07:00,new file <nl> ppp FileRequestBodyConfiguration . java <nl> + package software . amazon . awssdk . core ; <nl> + import java . nio . file . Path ; <nl> + import java . util . Objects ; <nl> + import software . amazon . awssdk . annotations . SdkPublicApi ; <nl> + import software . amazon . awssdk . core . async . AsyncRequestBody ; <nl> + import software . amazon . awssdk . utils . Validate ; <nl> + import software . amazon . awssdk . utils . builder . CopyableBuilder ; <nl> + import software . <nl>,optimize file uploads by read from file in parallel,1
e565b364cc2ab98e144056ce89d2c8b61367a9e3,2023-09-19 15:21:38-07:00,mmm CaptureTransferListener . java <nl> ppp CaptureTransferListener . java <nl> + import java . util . concurrent . CompletableFuture ; <nl> + public CompletableFuture<Void> getCompletionFuture() { <nl> + return completionFuture ; <nl> + } <nl> + CompletableFuture<Void> completionFuture = new CompletableFuture<>() ; <nl> + completionFuture . complete(null) ; <nl> + completionFuture . completeExceptionally(exceptionCaught) ; <nl> mmm S3IntegrationTestBase . java <nl> ppp S3IntegrationTestBase . java <nl> - protected static S3TransferManager tm ; <nl> + protected static S3TransferManager tmCrt ; <nl> + protected static S3TransferManager tmJava ; <nl> - tm = S3TransferManager . builder() <nl> + tmCrt = S3TransferManager . builder() <nl>,fix java s3 client transfer manager issue with transfercomplete ( ) not call for asyncrequestbody.fromfile,1
3ca853c87255249fd1c73537a0c71c49bb0ad761,2023-09-20 16:21:10-07:00,mmm GenericMultipartHelper . java <nl> ppp GenericMultipartHelper . java <nl> + import software . amazon . awssdk . core . exception . SdkException ; <nl> - if (cause instanceof Error) { <nl> + if (cause instanceof Error || cause instanceof SdkException) { <nl> + cause . addSuppressed(SdkClientException . create(message . get())) ; <nl> mmm CopyObjectHelperTest . java <nl> ppp CopyObjectHelperTest . java <nl> - assertThatThrownBy(future::join) . hasCauseInstanceOf(SdkClientException . class) <nl> -  . hasMessageContaining("Failed to retrieve metadata") <nl> + assertThatThrownBy(future::join) . hasCauseInstanceOf(NoSuchBucketException . class) <nl> +  . hasStackTraceContaining("Failed to retrieve metadata") <nl> - assertThatThrownBy(future::join) . hasMessageContaining("Failed to send <nl>,fix the issue where sdkexception be unnecessarily re-wrapped with sdkclientexception in s3 multipart client and aws crt-based s3 client,1
6969fbe254129b83a5eb1da1c34a74927127abad,2023-09-21 14:37:35-07:00,"mmm InputStreamSubscriber . java <nl> ppp InputStreamSubscriber . java <nl> + private final Object subscribeLock = new Object() ; <nl> - if (!inputStreamState . compareAndSet(State . UNINITIALIZED, State . READABLE)) { <nl> - close() ; <nl> - return ; <nl> - } <nl> + synchronized (subscribeLock) { <nl> + if (!inputStreamState . compareAndSet(State . UNINITIALIZED, State . READABLE)) { <nl> + close() ; <nl> + return ; <nl> + } <nl> - this . subscription = new CancelWatcher(s) ; <nl> - delegate . onSubscribe(subscription) ; <nl> + this . subscription = new CancelWatcher(s) ; <nl> + delegate . onSubscribe(subscription) <nl>",fix an issue in that could cause npe to be throw when close and onsubscribed get invoke concurrently,1
20bd76764563d854eedaa5832d18a3acfe828c14,2023-09-27 14:25:15-07:00,"mmm OptionalDependencyLoaderUtil . java <nl> ppp OptionalDependencyLoaderUtil . java <nl> - String msg = String . format( <nl> - ""Could not load class .  You must add a dependency on the '%s' module to enable the %s feature: "", <nl> - feature, <nl> - module <nl> - ) ; <nl> + String msg = String . format(""Could not load class .  You must add a dependency on the '%s' module to enable the %s "" <nl> + ""feature: "", module, feature) ; <nl>",fix order of parameter in exception message,0
d7d38928985fb31ad5ea4e60cb7a93c78fa7cf75,2023-10-03 13:00:36-07:00,"mmm AwsExecutionContextBuilder . java <nl> ppp AwsExecutionContextBuilder . java <nl> + import software . amazon . awssdk . core . SelectedAuthScheme ; <nl> + import software . amazon . awssdk . http . auth . scheme . NoAuthAuthScheme ; <nl> - return attributes . getAttribute(SdkInternalExecutionAttribute . AUTH_SCHEMES) == null || <nl> - SignerOverrideUtils . isSignerOverridden(request, attributes) ; <nl> + Map<String, AuthScheme<?>> authSchemes = attributes . getAttribute(SdkInternalExecutionAttribute . AUTH_SCHEMES) ; <nl> + if (authSchemes == null) { <nl> + return attributes . getOptionalAttribute(SdkInternalExecutionAttribute . IS_NONE_AUTH_TYPE_REQUEST) . orElse(true) ; <nl> + } <nl> + SelectedAuthScheme<?> selectedAuthScheme = attributes . getAttribute(SdkInternalExecutionAttribute . <nl>",if authtype=none do not use the old signer even if overridden,1
b2ffac9e20f744d9541139a0dae2ecff58d199ad,2024-01-31 07:51:48-08:00,mmm InstanceProfileCredentialsProvider . java <nl> ppp InstanceProfileCredentialsProvider . java <nl> + private final Ec2MetadataDisableV1Resolver ec2MetadataDisableV1Resolver ; <nl> - this . profileFile = builder . profileFile ; <nl> - this . profileName = builder . profileName ; <nl> + this . profileFile = Optional . ofNullable(builder . profileFile) <nl> +  . orElseGet(() -> ProfileFileSupplier . fixedProfileFile(ProfileFile . defaultProfileFile())) ; <nl> + this . profileName = Optional . ofNullable(builder . profileName) <nl> +  . orElseGet(ProfileFileSystemSetting . AWS_PROFILE::getStringValueOrThrow) ; <nl> -  . profileFile(builder . profileFile) <nl> -  . profileName(builder . profileName) <nl> +  . profileFile(profileFile) <nl> + <nl>,optimize profile file load,0
918657ca6f35fb20584b465af2449ef49155fd41,2024-02-13 13:30:22-08:00,mmm AwsClientHandlerUtils . java <nl> ppp AwsClientHandlerUtils . java <nl> - byte[] payload = null ; <nl> + byte[] payload ; <nl> + } else { <nl> + payload = new byte[0] ; <nl> new file <nl> ppp AwsClientHandlerUtilsTest . java <nl> + package software . amazon . awssdk . awscore . client . handler ; <nl> + import static org . assertj . core . api . Assertions . assertThat ; <nl> + import java . net . URI ; <nl> + import java . nio . ByteBuffer ; <nl> + import org . junit . jupiter . <nl>,fix an issue where npe would be throw for empty event,1
e2b3d669da0efd84d73805d0fe11383b049ca3de,2009-04-10 23:31:37+00:00,mmm ValueReader . java <nl> ppp ValueReader . java <nl> - import java . io . * ; <nl> + import java . io . EOFException ; <nl> + import java . io . FilterInputStream ; <nl> + import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> + public int read() throws IOException { <nl> + int value = in . read() ; <nl> + if (value < 0) throw new EOFException() ; <nl> + return value ; <nl> + } <nl> + -    } else <nl> + <nl>,fix valuereader to throw an exception at eof contribute by pat hunt,1
e6d1fca400c0f5627f81f0f673ba06393b8745d0,2009-04-14 22:15:14+00:00,"mmm ByteBufferInputStream . java <nl> ppp ByteBufferInputStream . java <nl> + if (len == 0) return 0 ; <nl> + if (length == 0) return ByteBuffer . allocate(0) ; <nl> mmm TestProtocolSpecific . java <nl> ppp TestProtocolSpecific . java <nl> + public void testEmptyEchoBytes() throws IOException { <nl> + ByteBuffer data = ByteBuffer . allocate(0) ; <nl> + ByteBuffer echoed = proxy . echoBytes(data) ; <nl> + data . flip() ; <nl> + assertEquals(data, echoed) ; <nl> + } <nl>",fix so that eof be not throw when one attempt to read an empty buffer contribute by sharad,1
2b7ea9cc6054a9408457fdd01a5a82181144c992,2009-05-22 20:45:01+00:00,"mmm Schema . java <nl> ppp Schema . java <nl> + import java . util . HashSet ; <nl> + import java . util . IdentityHashMap ; <nl> + import java . util . Set ; <nl> + private static class SeenPair { <nl> + private Object s1 ; private Object s2 ; <nl> + private SeenPair(Object s1, Object s2) { this . s1 = s1 ; this . s2 = s2 ; } <nl> + public boolean equals(Object o) { <nl> + return this . s1 == ((SeenPair)o) . s1 && this . s2 == ((SeenPair)o) . s2 <nl>",fix recursive schema so that equal ( ) and hashcode ( ) do not cause stack overflow,1
ac3528e555e4d896d275f9213c755ace0f549a15,2009-05-22 21:31:32+00:00,"mmm Schema . java <nl> ppp Schema . java <nl> + if (name == null) <nl> + throw new SchemaParseException(""No name in schema: ""+schema) ; <nl> mmm TestDataFile . java <nl> ppp TestDataFile . java <nl> - ""{\""type\"": \""record\"", \""fields\"": ["" <nl> + ""{\""type\"": \""record\"", \""name\"": \""Test\"", \""fields\"": ["" <nl> mmm TestSchema . java <nl> ppp TestSchema . java <nl> - String recordJson =  <nl> - ""{\""type\"":\""record\"",\""fields\"":[{\""name\"":\""f\"", \""type\"":\""long\""}]}"" ; <nl> + String recordJson = ""{\""type\"":\""record\"", \""name\"":\""Test\"", \""fields\"":"" <nl> - check(recordJson, ""{\""f\"":11}"", record) ; <nl> + check(recordJson, ""{\""f\"":11}"", record, false) ; <nl> - check(""{\""type\"": \""enum\"", \""symbols\"": [\""A\"", \""B\""]}"", ""\""B\"""", <nl>",when parse schema in java do not permit anonymous,0
5e4733ecf7b1102772af70a2255924c3903653c0,2009-06-02 19:02:36+00:00,mmm Protocol . java <nl> ppp Protocol . java <nl> + import java . security . MessageDigest ; <nl> + private byte[] md5 ; <nl> + public byte[] getMD5() { <nl> + if (md5 == null) <nl> + try { <nl> + md5 = MessageDigest . getInstance("MD5") <nl> +  . digest(this . toString() . getBytes("UTF-8")) ; <nl> + } catch (Exception e) { <nl> + throw new AvroRuntimeException(e) ; <nl> + } <nl> + return md5 ; <nl> + } <nl> mmm GenericData . java <nl> ppp GenericData . java <nl> - protected void bytes(byte[] bytes) { this <nl>,optimized java rpc handshake protocol,1
acba0fcdc047d14f0a28a88aec0a9b8b0cf524f8,2009-08-27 22:24:54+00:00,mmm Protocol . java <nl> ppp Protocol . java <nl> + && this . types . equals(that . types) <nl> - return name . hashCode() + namespace . hashCode() + messages . hashCode() ; <nl> + return name . hashCode() namespace . hashCode() <nl> + types . hashCode() messages . hashCode() ; <nl> mmm Schema . java <nl> ppp Schema . java <nl> + if (!(o instanceof FixedSchema)) return false ; <nl>,fix minor problem with equal ( ) and hashcode ( ) in schema and protocol,1
a7bfbd4b56d99655062c069e26ab6d476f5f06a0,2009-10-14 18:50:49+00:00,mmm ReflectData . java <nl> ppp ReflectData . java <nl> + if (datum == null) return false ; <nl> mmm TestReflect . java <nl> ppp TestReflect . java <nl> + private SampleRecord s = null ; <nl> + this . s = new SampleRecord() ; <nl> - return (a != null ? a . hashCode() : 0) ; <nl> + int hash = (a != null ? a . hashCode() : 0) ; <nl> + hash += (s != null ? s . hashCode() : 0) ; <nl> + return hash ; <nl> - return this . a == <nl>,fix a nullpointerexception in reflectdata # isrecord ( ) contribute by isabel drost,1
8f3ad160ce8c452bfbafc4ca09ab263a2e6aa06a,2010-01-27 17:27:38+00:00,mmm GenericData . java <nl> ppp GenericData . java <nl> - return o . hashCode() ; <nl> + return (o == null) ? 0 : o . hashCode() ; <nl> mmm TestProtocolSpecific . java <nl> ppp TestProtocolSpecific . java <nl> + @Test <nl> + public void testHashCode() throws IOException { <nl> + TestError error = new TestError() ; <nl> + error . hashCode() ; <nl> + } <nl>,avro hashcode throw a nullpointerexception when field be uninitialized contribute by michael armbrust,1
6e4ae0b6566b795e14dadf6d1902cfbd69bbe2b7,2010-02-02 05:04:56+00:00,"mmm ResolvingDecoder . java <nl> ppp ResolvingDecoder . java <nl> - in = (new BinaryDecoder(new ByteArrayInputStream(dsa . contents))) ; <nl> + in = new BinaryDecoder(new ByteArrayInputStream(dsa . contents)) ; <nl> - in = (new JsonDecoder(dsa . root, new ByteArrayInputStream(dsa . contents))) ; <nl> + in = new BinaryDecoder(new ByteArrayInputStream(dsa . contents)) ; <nl> mmm ResolvingGrammarGenerator . java <nl> ppp ResolvingGrammarGenerator . java <nl> - Symbol r = new JsonGrammarGenerator() . generate(rf . schema()) ; <nl> - production[--count] = new Symbol . DefaultStartAction(r, bb) ; <nl> + production[--count] = new Symbol . DefaultStartAction(bb) ; <nl> mmm Symbol . java <nl> <nl>",optimize resolvingdecoder for default value default value '' which was't handle correctly in the previous commit,1
1167caf735140964f5dcba441b76d99e7c9ceed1,2010-02-02 05:19:08+00:00,"mmm ResolvingGrammarGenerator . java <nl> ppp ResolvingGrammarGenerator . java <nl> - private static Symbol mkEnumAdjust(List<String> rsymbols, <nl> - List<String> wsymbols){ <nl> + private static Symbol mkEnumAdjust(List<String> wsymbols, <nl> + List<String> rsymbols){ <nl> mmm TestResolvingIOResolving . java <nl> ppp TestResolvingIOResolving . java <nl> + { ""{\""type\"":\""enum\"",\""name\"":\""e\"",\""symbols\"":[\""x\"",\""y\"",\""z\""]}"", <nl> + ""e2"", <nl> + new Object[] {  }, <nl> + ""{\""type\"":\""enum\"",\""name\"":\""e\"",\""symbols\"":[ \""y\"", \""z\"" ]}"", <nl> + ""e1"", <nl> + new Object[] {  } }, <nl> + { ""{\""type\"":\""enum\"",\""name\"":\""e\"",\""symbols\"":[ \""x\"", \""y\"" ]}"", <nl> + ""e1"", <nl> + new Object[] {  }, <nl> + ""{\""type\"":\""enum\"",\""name\"":\""e\"",\""symbols\"":[ \""y\"", \""z\"" ]}"", <nl> + ""e0"", <nl> <nl>",resolvingdecoder do not resolve enum well,1
bf7db0c2ecb2104fb087f0eea560a7d36935929c,2010-02-02 05:34:17+00:00,"mmm ResolvingGrammarGenerator . java <nl> ppp ResolvingGrammarGenerator . java <nl> - production[--count] = super . generate(rf . schema(), seen) ; <nl> + production[--count] = generate(rf . schema(), rf . schema(), seen) ; <nl> mmm TestResolvingIOResolving . java <nl> ppp TestResolvingIOResolving . java <nl> - + ""{\""name\"":\""f1\"", \""type\"":\""long\""}]}"", ""LS10"", <nl> + ""{\""name\"":\""f1\"", \""type\"":\""long\""}]}"", ""RLS10"", <nl> - + ""{\""name\"":\""f\"", \""type\"":\""int\"", \""default\"": 100}]}"", ""I"", <nl> + ""{\""name\"":\""f\"", \""type\"":\""int\"", \""default\"": 100}]}"", ""RI"", <nl> - + ""{\""name\"":\""f2\"", \""type\"":\""int\""}]}"", ""II"", <nl> + ""{\""name\"":\""f2\"", \""type\"":\""int\""}]}"", ""RII"", <nl> - + ""{\""name\"": \""g2\"", \""type\"": \""long\""}]}}"", ""IIL"", <nl> + ""{\""name\"": \""g2\"", \""type\"": \""long\""}]}}"", ""RRIIL"", <nl> + { ""{\""type\"":\""record\"",\""name\"":\""outer\"",\""fields\"":["" <nl> <nl>",resolvingdecoder do not handle default value for record well,1
1d6b6c5549fd0086e0682d519527d879b1efda33,2010-02-10 06:49:14+00:00,new file <nl> ppp TestGenericDatumWriter . java <nl> + package org . apache . avro . generic ; <nl> + import static org . junit . Assert . assertEquals ; <nl> + import java . io . ByteArrayInputStream ; <nl> + import java . io . ByteArrayOutputStream ; <nl> + import java . io . IOException ; <nl> + import org . apache . avro . Schema ; <nl> + import org . apache . avro . io . Encoder ; <nl> + import org . apache . avro . io . JsonDecoder ; <nl> + import org . <nl>,jsonencoder be not flush after write use reflectdatumwriter,1
af00ca67a7726c88f9e875f242cb09ea5a72f56f,2010-02-21 00:54:29+00:00,"mmm TestDataFile . java <nl> ppp TestDataFile . java <nl> - = new File(System . getProperty(""test . dir"", ""/Users/scottc/Documents/workspace/avro2/build/interop/data"")) ; <nl> + = new File(System . getProperty(""test . dir"", ""/tmp"")) ; <nl>",a local setting get leak into the trunk a part of avro-392 fix,1
4313c25bb307d1c79f64cdb54104ba86a80edc60,2010-03-03 23:48:50+00:00,"mmm GenericRequestor . java <nl> ppp GenericRequestor . java <nl> + @Override <nl> + public Object request(String messageName, Object request) <nl> + throws IOException { <nl> + try { <nl> + return super . request(messageName, request) ; <nl> + } catch (Exception e) { <nl> + if (e instanceof RuntimeException) <nl> + throw (RuntimeException)e ; <nl> + if (e instanceof IOException) <nl> + throw (IOException)e ; <nl> + throw new AvroRemoteException(e) ; <nl> + } <nl> + } <nl> mmm GenericResponder . java <nl> ppp GenericResponder . java <nl> - public void writeError(Schema schema, AvroRemoteException error, <nl> + public <nl>",fix exception in java reflect rpc,1
e3123126b5b07d7a71e2e15f838d98f047597554,2010-03-24 19:49:36+00:00,"mmm ReflectData . java <nl> ppp ReflectData . java <nl> - schema = Schema . createRecord(name, null , space,  <nl> - Throwable . class . isAssignableFrom(c)) ; <nl> + boolean error = Throwable . class . isAssignableFrom(c) ; <nl> + schema = Schema . createRecord(name, null , space, error) ; <nl> + if (error)                              // add Throwable message <nl> + fields . add(new Schema . Field(""detailMessage"", THROWABLE_MESSAGE, <nl> + <nl>",fix java reflect protocol to transmit error message,1
bbb830dff638cb1e80395941db1d0e0b58103eff,2010-06-15 23:36:51+00:00,"mmm SpecificCompiler . java <nl> ppp SpecificCompiler . java <nl> - File writeToDestination(File destDir) throws IOException { <nl> + File writeToDestination(File src, File destDir) throws IOException { <nl> + if (src != null && f . exists() && f . lastModified() >= src . lastModified()) <nl> + return f ;                                 // already up to date: ignore <nl> - compiler . compileToDestination(dest) ; <nl> + compiler . compileToDestination(src, <nl>",fix compiler to not re-generate up-to-date code contribute by john yu,1
7f5901e8bdc281305ab29a32fd5630c5024b4feb,2010-07-05 03:17:04+00:00,"mmm ResolvingGrammarGenerator . java <nl> ppp ResolvingGrammarGenerator . java <nl> - new Symbol . SkipAction(super . generate(wf . schema(), <nl> - seen)) ; <nl> + new Symbol . SkipAction(generate(wf . schema(), wf . schema(), seen)) ; <nl> mmm TestResolvingIO . java <nl> ppp TestResolvingIO . java <nl> - performTest(eEnc, iSkipL, sJsWrtSchm, sWrtCls, sJsRdrSchm, sRdrCls) ; <nl> + performTest(eEnc, iSkipL, sJsWrtSchm, sWrtCls, sJsWrtSchm, sWrtCls) ; <nl> mmm TestResolvingIOResolving . java <nl> ppp TestResolvingIOResolving . java <nl> + { ""{\""type\"":\""record\"",\""name\"":\""r\"",\""fields\"":["" <nl> + ""{\""name\"":\""f0\"", \""type\"":\""boolean\""},"" <nl> + ""{\""name\"":\""f1\"", \""type\"":\""int\""},"" <nl> + ""{\""name\"":\""f2\"", \""type\"":[\""int\"", \""long\""]},"" <nl> + ""{\""name\"":\""f3\"", \""type\"":\""float\""}"" <nl> + ""]}"", ""BIU0IF"", <nl>",classcastexception : org.apache.avro.io.parsing.symbol $ alternative can not be cast to org.apache.avro.io.parsing.symbol $ unionadjustaction,1
2dc24e02526e29a3bd385276d7db162f8624fc65,2010-07-28 19:44:50+00:00,"mmm GenericRequestor . java <nl> ppp GenericRequestor . java <nl> + import org . apache . avro . AvroRuntimeException ; <nl> + import org . apache . avro . util . Utf8 ; <nl> - public AvroRemoteException readError(Schema schema, Decoder in) <nl> + public Exception readError(Schema schema, Decoder in) <nl> - return new AvroRemoteException(new GenericDatumReader<Object>(schema) . read(null,in)) ; <nl> + Object error = new GenericDatumReader<Object>(schema) . read(null,in) ; <nl> + if (error instanceof Utf8) <nl> + return new AvroRuntimeException(error . toString()) ; // system error <nl> + return new AvroRemoteException(error) ; <nl> mmm ReflectResponder . java <nl> ppp ReflectResponder <nl>",fix various bug with undeclared rpc exception,1
ce397913a36beaf1077aa2f98cab98f9b2a0a45a,2010-08-25 17:43:11+00:00,"mmm ReflectData . java <nl> ppp ReflectData . java <nl> - String space = c . getPackage() . getName() ; <nl> + String space = c . getPackage() == null ? """" : c . getPackage() . getName() ; <nl> - if (c . getPackage() . getName() . startsWith(""java . "")) <nl> + if (c . getPackage() != null <nl> + && c . getPackage() . getName() . startsWith(""java . "")) <nl> - new Protocol(iface . getSimpleName(), iface . getPackage() . getName()) ;  <nl> + new Protocol(iface . getSimpleName(), <nl> + iface . getPackage()==null?"""":iface . getPackage() . getName()) <nl>",fix nullpointerexception when reflect api infers schema for a class without a package,1
8fed51d2d0faf08c744611b6feef61f853d43244,2010-09-03 01:27:09+00:00,"mmm GenericDatumReader . java <nl> ppp GenericDatumReader . java <nl> - private ResolvingDecoder resolver ; <nl> - resolver = null ; <nl> + threadResolver . set(null) ; <nl> + threadResolver . set(null) ; <nl> + private final ThreadLocal<ResolvingDecoder> threadResolver = <nl> + new ThreadLocal<ResolvingDecoder>() ; <nl> - private static ResolvingDecoder getResolver(Schema actual, Schema expected) <nl> + private ResolvingDecoder getResolver(Schema actual, Schema expected) <nl> + ResolvingDecoder resolver = threadResolver . get() ; <nl> + if (resolver != null) <nl> + return resolver ; <nl> - ResolvingDecoder resolver = cache . get(expected) ; <nl> + resolver = cache . get(expected) ; <nl>",fix genericdatumreader to be thread-safe,1
3efcc1ed043bc4f9866a34d9d9206f75a8e0b905,2010-09-17 01:41:49+00:00,mmm GenericData . java <nl> ppp GenericData . java <nl> - import java . util . Iterator ; <nl> + import java . util . AbstractList ; <nl> - import java . util . Map ; <nl> - import java . util . AbstractList ; <nl> + import java . util . Iterator ; <nl> + import java . util . Map ; <nl> + import org . apache . avro . util . Utf8 ; <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> + <nl>,genericarray fail to compare with list specificrecord compare get classcastexception,1
78d9518f26978baafb69670fefd1417a36bb10e7,2010-10-26 20:45:46+00:00,"mmm TetheredProcess . java <nl> ppp TetheredProcess . java <nl> - this . inputClient = (InputProtocol) <nl> + this . inputClient = <nl> mmm ReflectRequestor . java <nl> ppp ReflectRequestor . java <nl> - public static Object getClient(Class<?> iface, Transceiver transciever) <nl> + public static <T> T getClient(Class<T> iface, Transceiver transciever)  <nl> - public static Object getClient(Class<?> iface, Transceiver transciever, ReflectData reflectData) <nl> - throws IOException { <nl> + @SuppressWarnings(""unchecked"") <nl> + public static <T> T getClient(Class<T> iface, Transceiver transciever, <nl> + ReflectData reflectData) throws IOException { <nl> - return Proxy . newProxyInstance(iface . getClassLoader(), <nl> + return <nl>",fix rpc proxy factory to not require casting contribute by stephen gargan,1
5440e53a1a9792b3f67eaf3eedc0c7c5f38629e8,2010-12-03 16:39:42+00:00,mmm ResolvingDecoder . java <nl> ppp ResolvingDecoder . java <nl> + @Override <nl> + public float readFloat() throws IOException { <nl> + Symbol actual = parser . advance(Symbol . FLOAT) ; <nl> + if (actual == Symbol . INT) { <nl> + return (float) in . readInt() ; <nl> + } else if (actual == Symbol . LONG) { <nl> + return (float) in . readLong() ; <nl> + } else { <nl> + assert actual == Symbol . FLOAT ; <nl> + return (float) in . readFloat() ; <nl> + } <nl> + } <nl> mmm ResolvingGrammarGenerator . <nl>,fix avro-706 type promotion not succeed for long > float,1
bc55a1460c19c127d143736baef3e1881f22418c,2010-12-10 19:43:21+00:00,"mmm SocketServer . java <nl> ppp SocketServer . java <nl> + import org . apache . avro . Protocol ; <nl> + import org . apache . avro . Protocol . Message ; <nl> + import org . apache . avro . generic . GenericResponder ; <nl> - channel . close() ; <nl> + xc . close() ; <nl> - SocketServer server = new SocketServer(null, new InetSocketAddress(0)) ; <nl> - System . out . println(""started"") ; <nl> + Responder responder = <nl> + new GenericResponder(Protocol . parse(""{\""protocol\"": \""X\""}"")) { <nl> + public Object respond(Message message, Object request) <nl> + <nl>",fix socketserver connection thread to exit rather than busywait when client close connection,1
d5ec60896fef71973d49436df077664b830aaa46,2010-12-15 22:31:29+00:00,mmm Requestor . java <nl> ppp Requestor . java <nl> + if (remote != null) return remote ;            // already have it <nl> - if (remote != null) <nl> - return remote ; <nl> + if (remote != null) return remote ;            // already cached <nl>,fix a nullpointerexception,1
701473043802d2e54638df2c8c112af8d8d4504a,2011-01-07 20:36:11+00:00,"mmm NettyServer . java <nl> ppp NettyServer . java <nl> + private NettyTransceiver connectionMetadata = new NettyTransceiver() ; <nl> - List<ByteBuffer> res = responder . respond(req) ; <nl> + List<ByteBuffer> res = responder . respond(req, connectionMetadata) ; <nl> - e . getChannel() . close() ; <nl> + if(!connectionMetadata . isConnected()){ <nl> + e . getChannel() . close() ; <nl> + } <nl> mmm NettyTransceiver . java <nl> ppp NettyTransceiver . java <nl> + NettyTransceiver() {} <nl> mmm TestProtocolDatagram . java <nl> ppp TestProtocolDatagram . java <nl> + import java . net . InetSocketAddress ; <nl> - import org . <nl>",fix netty-based rpc to keep connection open contribute by stephen gargan,1
ad935798984a24a6e9e9d2c136ff06a93b761ead,2011-03-08 00:55:57+00:00,mmm DataFileReader . java <nl> ppp DataFileReader . java <nl> + @Override <nl> + public void close() throws IOException { <nl> + in . close() ; <nl> + super . close() ; <nl> + } <nl> mmm SeekableInput . java <nl> ppp SeekableInput . java <nl> + import java . io . Closeable ; <nl> - public interface SeekableInput { <nl> + public interface SeekableInput extends Closeable { <nl>,fix a file handle leak in datafilereader,0
16f9fbc19a28d6c22e6a8fe8550ff5801b853d0b,2011-03-08 01:01:17+00:00,"mmm RPCContext . java <nl> ppp RPCContext . java <nl> - protected Map<CharSequence,ByteBuffer> requestHandshakeMeta, responseHandshakeMeta ; <nl> + private HandshakeRequest handshakeRequest ; <nl> + private HandshakeResponse handshakeResponse ; <nl> + public void setHandshakeRequest(HandshakeRequest handshakeRequest) { <nl> + this . handshakeRequest = handshakeRequest ; <nl> + } <nl> + public HandshakeRequest getHandshakeRequest() { <nl> + return this . handshakeRequest ; <nl> + } <nl> + public void setHandshakeResponse(HandshakeResponse handshakeResponse) { <nl> + this . handshakeResponse = handshakeResponse ; <nl> + } <nl> + public HandshakeResponse getHandshakeResponse() { <nl> + return this . handshakeResponse ; <nl> + } <nl> - if <nl>",fix requestor to not send client 's protocol redundantly,1
a02c5c2ce3edae38b70648b177a78cc7a64a7b25,2011-03-30 23:36:20+00:00,"mmm ReflectData . java <nl> ppp ReflectData . java <nl> + if (datum == null) return false ; <nl> mmm ReflectDatumWriter . java <nl> ppp ReflectDatumWriter . java <nl> - result . initCause(e) ; <nl> + result . initCause(e . getCause() == null ? e : e . getCause()) ; <nl> mmm TestReflect . java <nl> ppp TestReflect . java <nl> + @Test <nl> + public void testNullArray() throws Exception { <nl> + String json = ""[{\""type\"":\""array\"", \""items\"": \""long\""}, \""null\""]"" ; <nl> + Schema schema = Schema . parse(json) ; <nl> + checkBinary(schema, null) ; <nl> + } <nl>",fix a nullpointerexception with reflect data when a union contain an array and null,1
c4f243262392626c8a9e95ba1e4c355e21ab388a,2011-07-01 16:30:54+00:00,"mmm NettyTransceiver . java <nl> ppp NettyTransceiver . java <nl> - private boolean open = false ;  // Synchronized on stateLock <nl> - public NettyTransceiver(InetSocketAddress addr) { <nl> + public NettyTransceiver(InetSocketAddress addr) throws IOException { <nl> - public NettyTransceiver(InetSocketAddress addr, ChannelFactory channelFactory) { <nl> + public NettyTransceiver(InetSocketAddress addr, ChannelFactory channelFactory) throws IOException { <nl> + if (channelFactory == null) { <nl> + throw new NullPointerException(""channelFactory is null"") ; <nl> + } <nl> - connect() ; <nl> + stateLock . readLock() . lock() ; <nl> + try { <nl> + getChannel() ; <nl> + } finally { <nl> + <nl>",fix netty-based ipc client to provide good error when attempt to use a closed connection contribute by james baldassari,1
72c9d6bb7aa23546a0bf82c2ce546fd1278bd72b,2011-09-07 19:31:09+00:00,mmm Requestor . java <nl> ppp Requestor . java <nl> + if (request . getMessage() . isOneWay()) { <nl> + Throwable error = callFuture . getError() ; <nl> + if (error != null) { <nl> + if (error instanceof Exception) { <nl> + throw (Exception) error ; <nl> + } else { <nl> + throw new AvroRemoteException(error) ; <nl> + } <nl> + } <nl> + } <nl> mmm TestProtocolSpecific . java <nl> ppp TestProtocolSpecific . java <nl> + import org . apache . avro . ipc . HttpTransceiver ; <nl> + import java . net . URL ; <nl>,fix a regression in rpc so that one-way message fail when the transciever can not connect contribute by tom white,1
21223692e8066b2bdf2100641fb7befdae453e8e,2011-10-01 18:37:14+00:00,mmm JsonDecoder . java <nl> ppp JsonDecoder . java <nl> - import java . io . IOException ; <nl> + import java . io . IOException ; <nl> + import java . math . BigDecimal ; <nl> + import java . math . BigInteger ; <nl> + import java . util . ArrayList ; <nl> + import java . util . HashMap ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + import java . util . Stack ; <nl> + import org . codehaus . jackson . <nl>,jsondecoder do not tolerate json record with different field order,0
ff1e35fb0774691aa77ff47b196c5a1e7335240b,2011-10-07 20:41:37+00:00,mmm SpecificResponder . java <nl> ppp SpecificResponder . java <nl> - throw (Exception)e . getTargetException() ; <nl> + if (e . getTargetException() instanceof Exception) { <nl> + throw (Exception) e . getTargetException() ; <nl> + } else { <nl> + throw new Exception(e . getTargetException()) ; <nl> + } <nl>,fix specificresponder to well handle non-exception throwables contribute by philz,1
f6ddbe438d7f488314c50d536e2a1b2dd79adf8c,2011-10-20 06:00:09+00:00,mmm AbstractAvroMojo . java <nl> ppp AbstractAvroMojo . java <nl> - import org . apache . avro . generic . GenericData . StringType ; <nl> - protected StringType stringType = StringType . CharSequence ; <nl> + protected String stringType = "CharSequence" ; <nl> mmm ProtocolMojo . java <nl> ppp ProtocolMojo . java <nl> + import org . apache . avro . generic . GenericData . StringType ; <nl> - compiler . setStringType(stringType) ; <nl> + compiler . setStringType(StringType . valueOf(stringType)) ; <nl> mmm SchemaMojo . java <nl> ppp SchemaMojo . java <nl> + import org . apache . avro <nl>,avro java do not build with maven 2,0
4e10536f31e6a1de4df0fceb77bfc7d34bbb1b21,2011-11-04 20:58:36+00:00,"mmm Schema . java <nl> ppp Schema . java <nl> + public String getName() { return name ; } <nl> + public Integer getIndexNamed(String name) { <nl> + throw new AvroRuntimeException(""Not a union: ""+this) ; <nl> + } <nl> + private final Map<String,Integer> indexByName <nl> + = new HashMap<String,Integer>() ; <nl> - int seen = 0 ; <nl> - Set<String> seenNames = new HashSet<String>() ; <nl> - for (Schema type : types) {                 // check legality of union <nl> - switch (type . <nl>",optimize union resolution when writing,1
2d4458383bd8a4a99da25171525ae9716061a339,2011-12-16 19:35:35+00:00,"mmm NettyTransceiver . java <nl> ppp NettyTransceiver . java <nl> - disconnect() ; <nl> + disconnect(false, true, null) ; <nl> mmm TestNettyServerWithCallbacks . java <nl> ppp TestNettyServerWithCallbacks . java <nl> - blockingSimpleImpl . acquirePermit() ; <nl> + blockingSimpleImpl . acquireRunPermit() ; <nl> - blockingSimpleImpl . releasePermit() ; <nl> + blockingSimpleImpl . releaseRunPermit() ; <nl> + @Test <nl> + public void cancelPendingRequestsAfterChannelCloseByServerShutdown() throws Exception { <nl> + BlockingSimpleImpl blockingSimpleImpl = new BlockingSimpleImpl() ; <nl> + Server server2 = new NettyServer(new SpecificResponder(Simple . class, <nl> + blockingSimpleImpl), new InetSocketAddress(0)) ; <nl> + server2 . start() ; <nl> + Transceiver transceiver2 = <nl>",fix nettytransceiver to not hang when server stop contribute by bruno dumon,1
c9dfafb695b7d7b3e4f637e0f9af862c6dad8a28,2012-03-02 22:09:30+00:00,mmm NettyTransceiver . java <nl> ppp NettyTransceiver . java <nl> - import java . util . concurrent . locks . ReadWriteLock ; <nl> - private final ReadWriteLock stateLock = new ReentrantReadWriteLock() ; <nl> + private final ReentrantReadWriteLock stateLock = new ReentrantReadWriteLock() ; <nl> + boolean stateReadLockHeld = stateLock . getReadHoldCount() != 0 ; <nl> + if (stateReadLockHeld) { <nl> + stateLock . readLock() . unlock() ; <nl> + } <nl> + if (stateReadLockHeld) { <nl> + stateLock . readLock() . lock() ; <nl> + } <nl>,fix deadlock in nettytransceiver contribute by jbaldassari,1
a581cf389f5d4ce82ff95f3d9d98efbe326cacae,2012-05-23 20:28:44+00:00,"mmm BinaryDecoder . java <nl> ppp BinaryDecoder . java <nl> + if (pos >= limit) <nl> + throw new EOFException() ; <nl> mmm TestBinaryDecoder . java <nl> ppp TestBinaryDecoder . java <nl> + @Test(expected = EOFException . class) <nl> + public void testEOF() throws IOException { <nl> + ByteArrayOutputStream baos = new ByteArrayOutputStream() ; <nl> + Encoder e = EncoderFactory . get() . binaryEncoder(baos, null) ; <nl> + e . writeLong(0x10000000000000l) ; <nl> + e . flush() ; <nl> + Decoder d = newDecoder(new ByteArrayInputStream(baos . toByteArray())) ; <nl> + Assert . assertEquals(0x10000000000000l, d . readLong()) ; <nl> + <nl>",fix binarydecoder so that eofexception be throw instead of a generic ioexception when reading ints and longs past the end of file,1
6d91cdfad4aeb24a82579ffb1e136e7c565a47b7,2012-09-11 11:48:44+00:00,mmm NettyTransportCodec . java <nl> ppp NettyTransportCodec . java <nl> + import org . apache . avro . AvroRuntimeException ; <nl> + private final long maxMem ; <nl> + private static final long SIZEOF_REF = 8L ; // mem usage of 64-bit pointer <nl> + public NettyFrameDecoder() { <nl> + maxMem = Runtime . getRuntime() . maxMemory() ; <nl> + } <nl> - listSize = buffer . readInt() ; <nl> + int listSize = buffer . readInt() ; <nl> + if (listSize * SIZEOF_REF > 0 . 1 * maxMem) { <nl> + channel . close() . await() ; <nl>,malformed data can cause outofmemoryerror in avro ipc contribute by mike percy,1
6f5327bf7fc0a62f7e1d737571780e20fcbfe4a2,2012-09-13 20:34:48+00:00,mmm NettyTransceiver . java <nl> ppp NettyTransceiver . java <nl> - import java . util . concurrent . locks . ReentrantReadWriteLock ; <nl> + import java . util . concurrent . locks . ReentrantReadWriteLock ; <nl> + volatile ChannelFuture channelFuture ; <nl> + volatile boolean stopping ; <nl> + private final Object channelFutureLock = new Object() ; <nl> + channelFuture = null ; <nl> + synchronized(channelFutureLock) { <nl> + if (!stopping) { <nl> - ChannelFuture channelFuture = bootstrap . connect(remoteAddr) ; <nl> + channelFuture = bootstrap . connect(remoteAddr) ; <nl> + } <nl> + } <nl> + if (channelFuture <nl>,fix nettytransciever to not hang when the server be stop contribute by bruno dumon & karel vervaeke,1
c3577650285efd083a22a86670e33137d0fc6cdf,2012-09-27 13:25:47+00:00,mmm AvroSequenceFile . java <nl> ppp AvroSequenceFile . java <nl> - import org . apache . hadoop . io . SequenceFileBase ; <nl> - public class AvroSequenceFile extends SequenceFileBase { <nl> + public class AvroSequenceFile { <nl> - switch (options . getCompressionType()) { <nl> - case NONE: <nl> - return new Writer(options) ; <nl> - case RECORD: <nl> - return new RecordCompressWriter(options) ; <nl> - case BLOCK: <nl> - return new BlockCompressWriter(options) ; <nl> - default: <nl> - throw new IllegalArgumentException( <nl> - "Invalid compression type: " + options . getCompressionType()) ; <nl> - } <nl> + return SequenceFile <nl>,avro 's new mapreduce apis do not work with hadoop 2,0
0c5813b70f38952cbac69f5217bbf13e0e0b1a4c,2012-11-28 22:38:28+00:00,mmm AvroMultipleOutputs . java <nl> ppp AvroMultipleOutputs . java <nl> - "Name cannot be NULL or emtpy") ; <nl> + "Name cannot be NULL or empty") ; <nl> - "Name cannot be have a '" + ch + "' char") ; <nl> + "Name cannot have a '" ch "' char") ; <nl> mmm AvroMultipleOutputs . java <nl> ppp AvroMultipleOutputs . java <nl> - "Name cannot be NULL or emtpy") ; <nl> + "Name cannot be NULL or empty") ; <nl> - "Name cannot be have a '" + ch + "' char") ; <nl> + "Name cannot have <nl>,fix mistake in avromultipleoutputs error message contribute by dave beech,0
acf33453c71da6b92f9feface1a9e7c8d36456a0,2013-02-04 21:58:45+00:00,"mmm InputBuffer . java <nl> ppp InputBuffer . java <nl> + import java . nio . charset . CharsetDecoder ; <nl> + private CharsetDecoder utf8 = Charset . forName(""UTF-8"") . newDecoder() ; <nl> - private static final Charset UTF8 = Charset . forName(""UTF-8"") ; <nl> - String result = new String(buf, pos, length, UTF8) ; // read directly <nl> + String result = utf8 . decode(ByteBuffer . wrap(buf, pos, length)) . toString() ; <nl> - return new String(bytes, 0, length, UTF8) ; <nl> + return utf8 . decode(ByteBuffer . wrap(bytes, 0, length)) . toString() ; <nl>",optimize trevni string input contribute by joseph adler,1
57c9811a1695761d3e0f224b7e89e8174d927e43,2013-02-09 00:22:05+00:00,"mmm JsonGrammarGenerator . java <nl> ppp JsonGrammarGenerator . java <nl> - return Symbol . seq(new Symbol . EnumLabelsAction(sc . getEnumSymbols()), <nl> + return Symbol . seq(Symbol . enumLabelsAction(sc . getEnumSymbols()), <nl> - production[--i] = new Symbol . FieldAdjustAction(n, f . name()) ; <nl> + production[--i] = Symbol . fieldAdjustAction(n, f . name()) ; <nl> mmm ResolvingGrammarGenerator . java <nl> ppp ResolvingGrammarGenerator . java <nl> - return Symbol . seq(new Symbol . IntCheckAction(writer . getFixedSize()), <nl> + return Symbol . seq(Symbol . intCheckAction(writer . getFixedSize()), <nl> - return Symbol . seq(new Symbol . UnionAdjustAction(j, s), Symbol . UNION) ; <nl> <nl>",fix a deadlock when reading by replace parser symbol constructor with factory method,1
c6d00c7462eaef15703f1b4ac635ac278263a6fe,2013-02-12 23:28:10+00:00,mmm DataFileWriter . java <nl> ppp DataFileWriter . java <nl> - flush() ; <nl> - out . close() ; <nl> - isOpen = false ; <nl> + if (isOpen) { <nl> + flush() ; <nl> + out . close() ; <nl> + isOpen = false ; <nl> + } <nl> mmm TestDataFile . java <nl> ppp TestDataFile . java <nl> + Exception doubleCloseEx = null ; <nl> + try { <nl> + writer . close() ; <nl> + } catch (Exception e) { <nl> + doubleCloseEx = e ; <nl> + } <nl> + Assert . assertNull("Double close() threw <nl>,fix datafilewriter # close ( ) to not throw an exception when call twice contribute by e. sammer,1
ecee999e3be6ea7ffec8f3c7bce267efe9395d4d,2013-07-02 17:45:37+00:00,mmm NettyTransceiver . java <nl> ppp NettyTransceiver . java <nl> + ChannelFuture channelFutureToCancel = null ; <nl> - channelFuture . cancel() ; <nl> + channelFutureToCancel = channelFuture ; <nl> + channelFuture = null ; <nl> + if (channelFutureToCancel != null) { <nl> + channelFutureToCancel . cancel() ; <nl> + } <nl>,fix potential deadlock in nettytransceiver contribute by james baldassari,1
50baf4cfb47fbdd29c311de756bbc503f0508dd5,2013-09-04 20:59:57+00:00,mmm SpecificDatumWriter . java <nl> ppp SpecificDatumWriter . java <nl> + public SpecificData getSpecificData() { <nl> + return (SpecificData) getData() ; <nl> + } <nl> - if (!(datum instanceof CharSequence))         // Stringable <nl> - datum = datum . toString() ;                   // call toString() <nl> + if (!(datum instanceof CharSequence) <nl> + && getSpecificData() . isStringable(datum . getClass())) { <nl> + datum = datum . toString() ;        <nl>,fix specificdatumwriter to when write a string schema not silently convert any object to a string contribute by christophe taton,1
07b6a7cd3b6bef66d4fdff2b0199b823324db59a,2014-01-09 23:34:08+00:00,"mmm SpecificCompiler . java <nl> ppp SpecificCompiler . java <nl> + for (String alias : s . getAliases()) <nl> + result . addAlias(alias, null) ;             // copy aliases <nl> + for (String a : f . aliases()) <nl> + newF . addAlias(a) ;                       // copy aliases <nl> mmm TestSpecificCompiler . java <nl> ppp TestSpecificCompiler . java <nl> + import org . apache . avro . <nl>",fix compiler to not drop alias when stringtype be string,1
e0966a1ec55a6ca45baf5d3f53ad6b0e7a049452,2014-03-03 15:25:57+00:00,mmm GenericData . java <nl> ppp GenericData . java <nl> - return (T)new Boolean((Boolean)value) ; <nl> + return value ; // immutable <nl> - return (T)new Double((Double)value) ; <nl> + return value ; // immutable <nl> - return (T)new Float((Float)value) ; <nl> + return value ; // immutable <nl> - return (T)new Integer((Integer)value) ; <nl> + return value ; // immutable <nl> - return (T)new Long((Long)value) ; <nl> + return value ; // immutable <nl> mmm TestDeepCopy . java <nl> ppp TestDeepCopy . java <nl> - interopBuilder . setUnionField(true) ; <nl> + interopBuilder . setUnionField(Arrays . asList(new ByteBuffer[] { <nl>,deep copy do not need to create new instance for primitive,1
c533aeff68af47a99f3f61d091451a4cff700e19,2014-05-28 21:26:30+00:00,"mmm Encoder . java <nl> ppp Encoder . java <nl> - bytes . get(b, 0, len) ; <nl> + bytes . duplicate() . get(b, 0, len) ; <nl> mmm JsonEncoder . java <nl> ppp JsonEncoder . java <nl> - for (int i = 0 ; i < b . length ; i++) { <nl> - b[i] = bytes . get() ; <nl> - } <nl> + bytes . duplicate() . get(b) ; <nl> mmm TestBinaryEncoderFidelity . java <nl> ppp TestBinaryEncoderFidelity . java <nl> - public static void generateData(Encoder e) throws IOException { <nl> + public static void generateData(Encoder e, <nl>",fix encoder so that offset in non-array-backed bytebuffers be not alter when write contribute by rob turner,1
cc7ec43e22f65fdea2bec9be04832f194c9bc6b8,2014-06-12 08:55:33+00:00,"mmm ReflectData . java <nl> ppp ReflectData . java <nl> + if (datum instanceof GenericFixed) return false ; <nl> mmm TestReflect . java <nl> ppp TestReflect . java <nl> + @Test public void testUnionWithFixed() { <nl> + Schema s = new Schema . Parser() . parse <nl> + (""[\""null\"", {\""type\"":\""fixed\"",\""name\"":\""f\"",\""size\"":1}]"") ; <nl> + Schema f = new Schema . Parser() . parse(""{\""type\"":\""fixed\"",\""name\"":\""f\"",\""size\"":1}"") ; <nl> + GenericData data = ReflectData . get() ; <nl> + assertEquals(1, data . resolveUnion(s, new GenericData . Fixed(f))) ; <nl> + } <nl> + @Test public void testUnionWithEnum() { <nl> + Schema s = new <nl>",reflectdata can not resolve union with fix,0
7c0f04e97f6b324ce2447afc4f05665bf83762a8,2014-09-22 22:13:38+00:00,mmm ReflectData . java <nl> ppp ReflectData . java <nl> + if (field . getType() . isPrimitive()) { <nl> + return schema ; <nl> + } <nl> new file <nl> ppp TestReflectAllowNulls . java <nl> + package org . apache . avro . reflect ; <nl> + import java . util . Arrays ; <nl> + import org . apache . avro . Schema ; <nl> + import org . junit . Assert ; <nl> + import org . junit . Test ; <nl> + public class TestReflectAllowNulls { <nl> + private static class Primitives { <nl> + boolean <nl>,fix reflectdata.allownulls to not create union for primitive type contribute by ryan blue,1
3bb62d24aa90230d17da5ab612042799f5c2d7c9,2014-11-17 15:27:49+00:00,mmm DataFileStream . java <nl> ppp DataFileStream . java <nl> + availableBlock = false ; <nl> - availableBlock = false ; <nl> new file <nl> ppp TestDataFileCorruption . java <nl> + package org . apache . avro ; <nl> + import java . io . ByteArrayOutputStream ; <nl> + import java . io . File ; <nl> + import java . io . FileOutputStream ; <nl> + import java . io . IOException ; <nl> + import org . apache . avro . Schema . Type ; <nl> + import org . apache . avro . file . DataFileConstants <nl>,can not read past corrupted block in avro data file,0
f66a7875b8b904e21e0f0e40a418627ea98d9ce7,2014-11-18 09:58:21+00:00,"mmm JsonProperties . java <nl> ppp JsonProperties . java <nl> + import org . apache . avro . util . internal . JacksonUtils ; <nl> + public static class Null { <nl> + private Null() {} <nl> + } <nl> + public static final Null NULL_VALUE = new Null() ; <nl> + @Deprecated <nl> + public synchronized Object getObjectProp(String name) { <nl> + return JacksonUtils . toObject(props . get(name)) ; <nl> + } <nl> + @Deprecated <nl> + public synchronized void addProp(String name, Object value) { <nl> + addProp(name, JacksonUtils . toJsonNode(value)) ; <nl> + } <nl> + @Deprecated <nl>",deprecate jackson class in public api,1
5009caa85de9f61c3d8144713c5fecd0331eee61,2014-11-26 19:33:41+00:00,"mmm ReflectData . java <nl> ppp ReflectData . java <nl> - return Schema . createUnion(Arrays . asList(Schema . create(Schema . Type . NULL), <nl> - schema)) ; <nl> + if (schema . getType() == Schema . Type . UNION) { <nl> + for (Schema subType : schema . getTypes()) { <nl> + if (subType . getType() == Schema . Type . NULL) { <nl> + return schema ; <nl> + } <nl> + } <nl> + List<Schema> withNull = new ArrayList<Schema>() ; <nl> + withNull . add(Schema . create(Schema . Type . NULL)) ; <nl> + withNull . addAll(schema <nl>",fix reflectdata.allownull to work with @ nullable annotation contribute by ryan blue,1
630562a0b16ae73c8cb8d85da723bca6b28de6db,2015-03-31 23:19:05+00:00,mmm Schema . java <nl> ppp Schema . java <nl> - if ((defaultValue != null) <nl> + if (VALIDATE_DEFAULTS . get() && (defaultValue != null) <nl> - if (VALIDATE_DEFAULTS . get()) <nl> - throw new AvroTypeException(message) ;     // throw exception <nl> - System . err . println("[WARNING] Avro: "+message) ; // or log warning <nl> + throw new AvroTypeException(message) ;     // throw exception <nl>,do not warn or validate default if validation be off contribute by michael d'angelo,0
60d9ef0ad24d91735210830b2481e884ec45c9e7,2015-04-17 20:47:13+00:00,"mmm Schema . java <nl> ppp Schema . java <nl> + public static Schema createRecord(String name, String doc, String namespace, <nl> + boolean isError, List<Field> fields) { <nl> + return new RecordSchema(new Name(name, namespace), doc, isError, fields) ; <nl> + } <nl> + public RecordSchema(Name name, String doc, boolean isError, <nl> + List<Field> fields) { <nl> + super(Type . RECORD, name, doc) ; <nl> + this . isError = isError ; <nl> + setFields(fields) ; <nl> + } <nl> - gen . writeFieldName(""fields"") ; <nl> - fieldsToJson(names, gen) ; <nl> + if (fields != null) { <nl> + gen <nl>",fix npe in recordschema # tostring contribute by lars francke,1
ce15e931ff0aa1969fa7c75d2ce184ca59458004,2014-06-10 22:41:12-07:00,mmm HiveRecordReader . java <nl> ppp HiveRecordReader . java <nl> + protected boolean empty ; <nl> + this . empty = (inputSplit == null && partition == null) ; <nl> - if (partition != null) { <nl> - List<FieldSchema> partitionKeys = table . getPartitionKeys() ; <nl> - for (FieldSchema field : partitionKeys) { <nl> - partitionNames . add(field . getName()) ; <nl> - } <nl> + List<FieldSchema> partitionKeys = table . getPartitionKeys() ; <nl> + for (FieldSchema field : partitionKeys) { <nl> + partitionNames . add(field . getName()) ; <nl> - if (partition != null && partitionNames . contains(columnName)) <nl>,fix error when query a hive table with no data,1
57a86d4a2c434d997e610016f2fa266108799c93,2014-06-16 08:04:44-07:00,"mmm HashAggTemplate . java <nl> ppp HashAggTemplate . java <nl> - private RecordBatch outgoing ; <nl> + private HashAggBatch outgoing ; <nl> - public void setup(HashAggregate hashAggrConfig, FragmentContext context, BufferAllocator allocator, RecordBatch incoming, RecordBatch outgoing, <nl> + public void setup(HashAggregate hashAggrConfig, FragmentContext context, BufferAllocator allocator, RecordBatch incoming, HashAggBatch outgoing, <nl> - IterOutcome out = incoming . next() ; <nl> + IterOutcome out = outgoing . next(0, incoming) ; <nl> mmm HashAggregator . java <nl> ppp HashAggregator . java <nl> - RecordBatch outgoing, LogicalExpression[] valueExprs,  <nl> + HashAggBatch outgoing, LogicalExpression[] valueExprs, <nl> mmm StreamingAggTemplate . java <nl> ppp StreamingAggTemplate <nl>","more stats fix : ensure we be call the stats enable next ( ) method in the template class for hashjoin , hashaggregate and streamingaggregate",1
2564afeb1fdc4792603f7ddc1a7b3b347d05b54e,2016-01-12 17:07:59+00:00,"mmm Main . java <nl> ppp Main . java <nl> + import java . io . BufferedReader ; <nl> + import java . io . InputStreamReader ; <nl> - printStream(Main . class . getClassLoader() . getResourceAsStream(""NOTICE . txt"")) ; <nl> + printHead(Main . class . getClassLoader() . getResourceAsStream(""META-INF/NOTICE""), 5) ; <nl> + private static void printHead(InputStream in, int lines) throws Exception { <nl> + BufferedReader r = new BufferedReader(new InputStreamReader(in)) ; <nl> + for (int i = 0 ; i < lines ; i++) { <nl> + String line = r . readLine() ; <nl> + if (line == <nl>",fix npe in tool contribute by tom white,1
58daaf08a2637e0976cc124571200ce198b3143d,2016-04-16 14:13:29-07:00,"mmm ReflectData . java <nl> ppp ReflectData . java <nl> + import com . google . common . cache . CacheBuilder ; <nl> + import com . google . common . collect . MapMaker ; <nl> + import org . apache . avro . util . WeakIdentityHashMap ; <nl> - private static class ClassAccessorData { <nl> + static class ClassAccessorData { <nl> - private final IdentityHashMap<Schema, FieldAccessor[]> bySchema = <nl> - new IdentityHashMap<Schema, FieldAccessor[]>() ; <nl> + final Map<Schema, FieldAccessor[]> bySchema = new MapMaker() . weakKeys() . makeMap() ; <nl> new file <nl> ppp TestReflectData . java <nl> + <nl>",fix possible memory leak of schema in reflectdata contribute by byran harclerode,1
f4f226378918cce8a722d9795f3df4a6c7219746,2016-04-16 14:28:51-07:00,"mmm DataFileStream . java <nl> ppp DataFileStream . java <nl> - throw new IOException(""Not a data file . "") ; <nl> + throw new IOException(""Not a data file . "", e) ; <nl>",do not swallow ioexception while read magic byte contribute by koji noguchi,1
a53a4fd10072471aa7c8170499a10792e61e0d95,2016-11-30 21:50:13+01:00,mmm TestSpecificBuilderTree . java <nl> ppp TestSpecificBuilderTree . java <nl> + import org . apache . avro . test . nullable . Nullable ; <nl> + import org . apache . avro . test . nullable . RecordWithNullables ; <nl> + import static org . apache . avro . test . nullable . Nullable . * ; <nl> + import static org . junit . Assert . assertFalse ; <nl> + @Test <nl> + public void copyBuilderWithNullables() { <nl> + RecordWithNullables . Builder builder = RecordWithNullables . newBuilder() ; <nl> + assertFalse(builder . hasNullableRecordBuilder()) ; <nl> + assertFalse(builder . <nl>,fix npe when copy builder with nullable record,1
152fa0954bb74e8e1e627751ccab55ada4f5b375,2016-12-17 11:57:56+01:00,mmm TestSpecificBuilderTree . java <nl> ppp TestSpecificBuilderTree . java <nl> + import static org . junit . Assert . assertTrue ; <nl> + @Test <nl> + public void copyBuilderWithNullablesAndSetToNull() { <nl> + RecordWithNullables . Builder builder = RecordWithNullables . newBuilder() ; <nl> + assertFalse(builder . hasNullableRecordBuilder()) ; <nl> + assertFalse(builder . hasNullableRecord()) ; <nl> + assertFalse(builder . hasNullableString()) ; <nl> + assertFalse(builder . hasNullableLong  ()) ; <nl> + assertFalse(builder . hasNullableInt   ()) ; <nl> + assertFalse(builder . hasNullableMap   ()) ; <nl> + assertFalse(builder . hasNullableArray ()) ; <nl> + builder . setNullableRecordBuilder(null) ; <nl> <nl>,fix npe when call getxyzbuilder on instance where the xyz be null,1
4f53fa933447865d7afb22c5d7d472d87fc2a4ae,2017-01-10 14:58:11+00:00,mmm JsonDecoder . java <nl> ppp JsonDecoder . java <nl> + reorderBuffers . clear() ; <nl> + currentReorderBuffer = null ; <nl> + reorderBuffers . clear() ; <nl> + currentReorderBuffer = null ; <nl>,avro memory leak when reuse jsondecoder instance contribute by nandor kollar,1
50eebb8a0b96565641bb56a0f11e326b3f5cc50b,2017-09-11 14:42:21+02:00,"mmm ResolvingGrammarGenerator . java <nl> ppp ResolvingGrammarGenerator . java <nl> - int j = bestBranch(reader, writer, seen) ; <nl> + int j = firstMatchingBranch(reader, writer, seen) ; <nl> - private int bestBranch(Schema r, Schema w, Map<LitS, Symbol> seen) throws IOException { <nl> + private int firstMatchingBranch(Schema r, Schema w, Map<LitS, Symbol> seen) throws IOException { <nl> - case LONG: case DOUBLE: <nl> - return j ; <nl> + case LONG: <nl> + case DOUBLE: <nl> + case FLOAT: <nl> + return j ; <nl> + switch (b . getType()) { <nl> + case DOUBLE: <nl> + case FLOAT: <nl> <nl>",resolvinggrammargenerator do not implement schema resolution correctly for union,1
a7a43da6de9bd44e57e057319127c64b2fca56a0,2018-01-02 10:57:06+01:00,mmm Schema . java <nl> ppp Schema . java <nl> + if (schema == null) { <nl> + throw new SchemaParseException("Cannot parse <null> schema") ; <nl> + } <nl> mmm TestSchema . java <nl> ppp TestSchema . java <nl> + @Test(expected = SchemaParseException . class) <nl> + public void testParseEmptySchema() { <nl> + Schema schema = new Schema . Parser() . parse("") ; <nl> + } <nl>,fix nullpointerexception throw by schema.parser # parse ( `` '',1
196777ccc2e698e9dba153d48a08ef4b68b144a1,2019-04-29 09:20:29+02:00,"mmm Schema . java <nl> ppp Schema . java <nl> - return fields . equals(((RecordSchema) o) . fields) ; <nl> + return Objects . equals(fields, that . fields) ; <nl> mmm TestSchema . java <nl> ppp TestSchema . java <nl> + @Test <nl> + public void testAliasesSelfReferential() { <nl> + String t1 = ""{\""type\"":\""record\"",\""name\"":\""a\"",\""fields\"":[{\""name\"":\""f\"",\""type\"":{\""type\"":\""record\"",\""name\"":\""C\"",\""fields\"":[{\""name\"":\""c\"",\""type\"":{\""type\"":\""array\"",\""items\"":[\""null\"",\""C\""]}}]}}]}"" ; <nl> + String t2 = ""{\""type\"":\""record\"",\""name\"":\""x\"",\""fields\"":[{\""name\"":\""f\"",\""type\"":{\""type\"":\""record\"",\""name\"":\""C\"",\""fields\"":[{\""name\"":\""d\"",\""type\"":{\""type\"":\""array\"",\""items\"":[\""null\"",\""C\""]},\""aliases\"":[\""c\""]}]}}],\""aliases\"":[\""a\""]}"" ; <nl> + Schema s1 = new Schema . Parser() . parse(t1) ; <nl> + Schema s2 = new Schema . Parser() . parse(t2) ; <nl> + assertEquals(s1 . getAliases(), Collections . emptySet()) ; <nl> + assertEquals(s2 . <nl>",npe during schema.applyaliases,1
6e099d48c33cac8365035e2fcccaa1ca56230765,2016-03-10 10:38:11-08:00,mmm DLibrary . java <nl> ppp DLibrary . java <nl> - import com . facebook . buck . model . BuildTarget ; <nl> - buildRuleResolver . requireRule( <nl> - BuildTarget . builder(getBuildTarget()) <nl> -  . addFlavors(DDescriptionUtils . SOURCE_LINK_TREE) <nl> -  . build()) ; <nl> + buildRuleResolver . requireRule(getBuildTarget() . withFlavors(DDescriptionUtils . SOURCE_LINK_TREE)) ; <nl> mmm DLibraryDescription . java <nl> ppp DLibraryDescription . java <nl> - import com . google . common . collect . ImmutableSet ; <nl> - BuildTarget baseTarget = <nl> - params . getBuildTarget() <nl> -  . withoutFlavors( <nl> - ImmutableSet . of( <nl> <nl>,fix miss source link tree rule error,1
2fba6f606b08140d0ef75b610c028f1b7872e06a,2020-01-13 11:44:41+01:00,mmm Resolver . java <nl> ppp Resolver . java <nl> - if (wType == Schema . Type . UNION) <nl> + if (wType == Schema . Type . UNION) { <nl> + } <nl> - if (w . getFullName() != null && !w . getFullName() . equals(r . getFullName())) <nl> + if (w . getFullName() != null && !w . getFullName() . equals(r . getFullName())) { <nl> - else if (w . getFixedSize() != r . getFixedSize()) <nl> + } else if (w . getFixedSize() != r . getFixedSize()) { <nl> - else <nl> + } else { <nl> <nl>,record inside of union be not resolve properly,0
a65dca9bc4981b7788b51d3297323136e4f664ae,2020-02-17 17:11:23+01:00,mmm RecordBuilderBase . java <nl> ppp RecordBuilderBase . java <nl> - private static final Field[] EMPTY_FIELDS = new Field[0] ; <nl> - fields = schema . getFields() . toArray(EMPTY_FIELDS) ; <nl> + fields = schema . getFields() . toArray(new Field[0]) ; <nl> - fields = schema . getFields() . toArray(EMPTY_FIELDS) ; <nl> + fields = schema . getFields() . toArray(new Field[0]) ; <nl>,do not cache empty array in recordbuilderbase,1
37be95b0bd64b9ecc118d0ff8b30e734f94e4d3c,2020-02-19 09:42:41+01:00,mmm LogicalTypes . java <nl> ppp LogicalTypes . java <nl> - if (typeFactory != null) { <nl> - logicalType = REGISTERED_TYPES . get(typeName) . fromSchema(schema) ; <nl> - } else { <nl> - logicalType = null ; <nl> - } <nl> + logicalType = (typeFactory == null) ? null : typeFactory . fromSchema(schema) ; <nl>,do not access map twice in logicaltypes,1
f301980140db3c8506baa43a40ded48a7c2e2c40,2020-05-21 10:39:29-04:00,"mmm SpecificCompiler . java <nl> ppp SpecificCompiler . java <nl> + @Deprecated <nl> mmm TestSpecificCompiler . java <nl> ppp TestSpecificCompiler . java <nl> - Assert . assertEquals(""Should use int for Type . INT"", ""int"", compiler . javaUnbox(intSchema)) ; <nl> - Assert . assertEquals(""Should use long for Type . LONG"", ""long"", compiler . javaUnbox(longSchema)) ; <nl> - Assert . assertEquals(""Should use float for Type . FLOAT"", ""float"", compiler . javaUnbox(floatSchema)) ; <nl> - Assert . assertEquals(""Should use double for Type . DOUBLE"", ""double"", compiler . javaUnbox(doubleSchema)) ; <nl> - Assert . assertEquals(""Should use boolean for Type . BOOLEAN"", ""boolean"", compiler <nl>",deprecate annotation usage do not conform to the java specification,1
3c8a4d4514e80788611710d92b2ac7880714507b,2020-05-21 12:00:12-04:00,"mmm UnresolvedUnionException . java <nl> ppp UnresolvedUnionException . java <nl> + public UnresolvedUnionException(Schema unionSchema, Schema . Field field, Object unresolvedDatum) { <nl> + super(""Not in union "" unionSchema "": "" unresolvedDatum "" (field="" field . name() "")"") ; <nl> + this . unionSchema = unionSchema ; <nl> + this . unresolvedDatum = unresolvedDatum ; <nl> + } <nl> mmm GenericDatumWriter . java <nl> ppp GenericDatumWriter . java <nl> + import org . apache . avro . UnresolvedUnionException ; <nl> + } catch (final UnresolvedUnionException uue) { // recreate it with the right field info <nl> + final UnresolvedUnionException unresolvedUnionException <nl>",ensure genericdatumwriter specifies which field trigger an unresolveunionexception,1
0394e1772e78d9b726bd015c9d02b146a1abaee0,2020-07-23 17:12:31+02:00,"mmm SpecificCompiler . java <nl> ppp SpecificCompiler . java <nl> + import org . apache . commons . lang3 . StringUtils ; <nl> - outputFile . path = makePath(mangledName, protocol . getNamespace()) ; <nl> + outputFile . path = makePath(mangledName, mangle(protocol . getNamespace())) ; <nl> - outputFile . path = makePath(name, schema . getNamespace()) ; <nl> + outputFile . path = makePath(name, mangle(schema . getNamespace())) ; <nl> + if (StringUtils . isBlank(word)) { <nl> + return word ; <nl> + } <nl> - int lastDot = word . lastIndexOf("" . "") ; <nl> - String packageName = word . <nl>",avro-maven-plugin not escape `` public '' keyword in namespace,1
72b3c51512752f471392e3e5eaa40f954a99b752,2021-06-30 17:45:05+02:00,mmm NettyTransceiver . java <nl> ppp NettyTransceiver . java <nl> - private final EventLoopGroup workerGroup = new NioEventLoopGroup(new NettyTransceiverThreadFactory("avro")) ; <nl> + private final EventLoopGroup workerGroup ; <nl> + workerGroup = null ; <nl> + workerGroup = new NioEventLoopGroup(new NettyTransceiverThreadFactory("avro")) ; <nl> - workerGroup . shutdownGracefully() ; <nl> + if (workerGroup != null) { <nl> + workerGroup . shutdownGracefully() ; <nl> + } <nl>,fix nettytransceiver workergroup leak,1
ba3ad6d7db72cb063c559babc1ef4ff8cb1c0c32,2021-08-06 15:43:19+02:00,"mmm DataFileWriter . java <nl> ppp DataFileWriter . java <nl> - this . vout = efactory . binaryEncoder(out, null) ; <nl> + this . vout = efactory . directBinaryEncoder(out, null) ; <nl> - this . bufOut = efactory . binaryEncoder(buffer, null) ; <nl> + this . bufOut = efactory . directBinaryEncoder(buffer, null) ; <nl>",do not double buffer data in datafilewriter,1
4a9f9876f4839c668ebc6b4ce158678215a6704a,2021-09-13 14:19:33-04:00,"mmm DataFileWriter . java <nl> ppp DataFileWriter . java <nl> - this . vout = efactory . binaryEncoder(out, null) ; <nl> + this . vout = efactory . directBinaryEncoder(out, null) ; <nl> - this . bufOut = efactory . binaryEncoder(buffer, null) ; <nl> + this . bufOut = efactory . directBinaryEncoder(buffer, null) ; <nl> mmm TestSchema . java <nl> ppp TestSchema . java <nl> + @Test <nl> mmm TestCustomConversion . java <nl> ppp TestCustomConversion . java <nl> + import org . apache . avro . codegentest . testdata . LogicalTypesWithCustomConversionIdl ; <nl> + @Test <nl> + public void testNullValuesIdl() <nl>",optimize memory allocation # 1302,1
1aa963c44d1b9da3dfcf74acb3eeed56439332a0,2021-12-22 08:58:43+01:00,mmm Schema . java <nl> ppp Schema . java <nl> + public boolean hasFields() { <nl> + throw new AvroRuntimeException("Not a record: " this) ; <nl> + } <nl> + @Override <nl> + public boolean hasFields() { <nl> + return fields != null ; <nl> + } <nl> new file <nl> ppp IsResolvedSchemaVisitor . java <nl> + package org . apache . avro . compiler . idl ; <nl> + import org . apache . avro . Schema ; <nl> + import org . apache . avro . compiler . schema . SchemaVisitor ; <nl> + import org . <nl>,fix nullpointerexception on record-valued default,1
fa0bb7098083aba41c9aa9d9cf6383eb3e2c2696,2023-02-18 16:41:56+01:00,mmm FieldAccess . java <nl> ppp FieldAccess . java <nl> + protected static final int INT_DEFAULT_VALUE = 0 ; <nl> + protected static final float FLOAT_DEFAULT_VALUE = 0 . 0f ; <nl> + protected static final short SHORT_DEFAULT_VALUE = (short) 0 ; <nl> + protected static final byte BYTE_DEFAULT_VALUE = (byte) 0 ; <nl> + protected static final boolean BOOLEAN_DEFAULT_VALUE = false ; <nl> + protected static final char CHAR_DEFAULT_VALUE = '\u0000' ; <nl> + protected static final long LONG_DEFAULT_VALUE = 0L ; <nl> + protected static final double DOUBLE_DEFAULT_VALUE = 0 . 0d ; <nl> mmm FieldAccessReflect . <nl>,fix npe when basic type with nullable annotation,1
5bd2bc7a492a611382cddc5db3b5bf0b1b7d2b83,2023-08-17 08:59:18+02:00,"mmm WeakIdentityHashMap . java <nl> ppp WeakIdentityHashMap . java <nl> - import java . util . HashMap ; <nl> + import java . util . concurrent . ConcurrentHashMap ; <nl> - private Map<IdentityWeakReference, V> backingStore = new HashMap<>() ; <nl> + private Map<IdentityWeakReference, V> backingStore = new ConcurrentHashMap<>() ; <nl> new file <nl> ppp WeakIdentityHashMapTest . java <nl> + package org . apache . avro . util ; <nl> + import org . junit . jupiter . api . Assertions ; <nl> + import org . junit . jupiter . api . Test ; <nl> + import java . <nl>",weak identity hash map thread safe,1
3c466ee0c7e5b019e50d4ba9af7bf98add7d5232,2023-12-21 11:06:08+01:00,"mmm SpecificData . java <nl> ppp SpecificData . java <nl> + public static final Set<String> ACCESSOR_MUTATOR_RESERVED_WORDS = new HashSet<>( <nl> + Arrays . asList(""class"", ""schema"", ""classSchema"")) ; <nl> + static { <nl> + ACCESSOR_MUTATOR_RESERVED_WORDS . addAll(RESERVED_WORDS) ; <nl> + } <nl> + public static final Set<String> TYPE_IDENTIFIER_RESERVED_WORDS = new HashSet<>( <nl> + Arrays . asList(""var"", ""yield"", ""record"")) ; <nl> + static { <nl> + TYPE_IDENTIFIER_RESERVED_WORDS . addAll(RESERVED_WORDS) ; <nl> + } <nl> + public static final Set<String> ERROR_RESERVED_WORDS = new HashSet<>(Arrays . asList(""message"", ""cause"")) ; <nl> + static { <nl> + ERROR_RESERVED_WORDS . addAll(ACCESSOR_MUTATOR_RESERVED_WORDS) ; <nl> + } <nl> <nl>",deserialization of record of mangle java class throw classcastexception,1
a5e30ae36e1b438782d77f10851ea9213e83cdac,2018-12-08 13:47:00+01:00,"mmm GrpcClient . java <nl> ppp GrpcClient . java <nl> - @Target({ElementType . FIELD}) <nl> + @Target({ElementType . FIELD, ElementType . METHOD}) <nl> mmm GrpcClientBeanPostProcessor . java <nl> ppp GrpcClientBeanPostProcessor . java <nl> + import java . lang . reflect . Member ; <nl> + import java . lang . reflect . Method ; <nl> - import org . springframework . aop . framework . Advised ; <nl> - import org . springframework . aop . support . AopUtils ; <nl> + import org . springframework . beans . factory . BeanDefinitionStoreException ; <nl> - import com . google <nl>",fix initialization order issue cause npes in ` @ postconstruct `,1
235f39426e60417b105cbaee430a337419430186,2019-05-18 23:10:33+02:00,"mmm GrpcMetadataEurekaConfiguration . java <nl> ppp GrpcMetadataEurekaConfiguration . java <nl> - this . instance . getMetadataMap() . put(""gRPC . port"", String . valueOf(this . grpcProperties . getPort())) ; <nl> + final int port = this . grpcProperties . getPort() ; <nl> + if (port != -1) { <nl> + this . instance . getMetadataMap() . put(""gRPC . port"", Integer . toString(port)) ; <nl> + } <nl> mmm ConsulGrpcRegistrationCustomizer . java <nl> ppp ConsulGrpcRegistrationCustomizer . java <nl> - tags . add(""gRPC . port="" + this . grpcServerProperties . getPort()) ; <nl> - registration . getService() . setTags(tags) ; <nl> + <nl>",do not publish the port if we do not bind one,0
ac7a2a7a52a6f4b997ba5a881643599b08b0bce6,2019-09-12 21:51:20+02:00,mmm GrpcClientAutoConfiguration . java <nl> ppp GrpcClientAutoConfiguration . java <nl> - import lombok . extern . slf4j . Slf4j ; <nl> + import net . devh . boot . grpc . client . nameresolver . NameResolverRegistration ; <nl> - @Slf4j <nl> + -    @Lazy // Not needed for InProcessChannelFactories <nl> + @Lazy <nl> - public NameResolverRegistry grpcNameResolverRegistry( <nl> + public NameResolverRegistration grpcNameResolverRegistration( <nl> + return new NameResolverRegistration(nameResolverProviders) ; <nl> + } <nl> + @ConditionalOnMissingBean <nl> + @Lazy // Not needed for InProcessChannelFactories <nl> + @Bean <nl> + public NameResolverRegistry grpcNameResolverRegistry(NameResolverRegistration registration) { <nl> - if (nameResolverProviders <nl>,do not forget to unregister the nameresolverprovider from the registry,1
fb272664a87880c4094e5d8733851ef6513828b4,2020-01-04 23:03:59+01:00,"mmm DiscoveryClientNameResolver . java <nl> ppp DiscoveryClientNameResolver . java <nl> + private final Runnable externalCleaner ; <nl> + private boolean usingExecutorResource ; <nl> + @GuardedBy(""this"") <nl> - final SharedResourceHolder . Resource<Executor> executorResource) { <nl> + final SharedResourceHolder . Resource<Executor> executorResource, final Runnable externalCleaner) { <nl> + this . executor = args . getOffloadExecutor() ; <nl> + this . externalCleaner = externalCleaner ; <nl> - this . executor = SharedResourceHolder . get(this . executorResource) ; <nl> + if (this . executor == null) { <nl> + this . executor = SharedResourceHolder . get(this . executorResource) ; <nl> + this . <nl>",fix discoveryclientresolverfactory memory leak issue & fix,1
9462659b6269d62f31f38f5e59e31157e458b113,2020-07-26 01:11:44+02:00,mmm GlobalClientInterceptorConfiguration . java <nl> ppp GlobalClientInterceptorConfiguration . java <nl> - import org . springframework . context . annotation . Bean ; <nl> + import net . devh . boot . grpc . client . interceptor . GrpcGlobalClientInterceptor ; <nl> - @Bean <nl> + @GrpcGlobalClientInterceptor <nl> mmm GlobalClientInterceptorConfiguration . java <nl> ppp GlobalClientInterceptorConfiguration . java <nl> - import org . springframework . context . annotation . Bean ; <nl> + import net . devh . boot . grpc . client . interceptor . GrpcGlobalClientInterceptor ; <nl> - @Bean <nl> + @GrpcGlobalClientInterceptor <nl>,fix miss @ grpcglobalclientinterceptor annotation in example,1
5354f9bb2b5f14f1d77478ee4b1e19fc4fc032b1,2017-11-08 18:49:09-08:00,mmm DefaultJavaLibraryRules . java <nl> ppp DefaultJavaLibraryRules . java <nl> - return getLibraryRule() ; <nl> + buildAllRules() ; <nl> + return (DefaultJavaLibrary) getBuildRuleResolver() . getRule(getLibraryTarget()) ; <nl> + buildAllRules() ; <nl> + return getBuildRuleResolver() . getRule(getInitialBuildTarget()) ; <nl> + } <nl> + private void buildAllRules() { <nl> - getLibraryRule() ; <nl> - BuildTarget requestedTarget = getInitialBuildTarget() ; <nl> - if (HasJavaAbi . isSourceAbiTarget(requestedTarget)) { <nl> - return getSourceAbiRule() ; <nl> - } else if (HasJavaAbi . isClassAbiTarget(requestedTarget)) { <nl> - return getClassAbiRule() ; <nl> - } else if (HasJavaAbi . isVerifiedSourceAbiTarget(requestedTarget)) { <nl> - return getCompareAbisRule() ; <nl> + <nl>,fix deadlock in action graph creation,1
18ea434db3b4fe3eea40fc4342bcde91b21e7979,2021-09-18 14:08:59+02:00,"mmm GrpcClient . java <nl> ppp GrpcClient . java <nl> + import org . springframework . context . ApplicationContext ; <nl> mmm GrpcClientBean . java <nl> ppp GrpcClientBean . java <nl> + import org . springframework . context . ApplicationContext ; <nl> + import org . springframework . context . annotation . Configuration ; <nl> mmm GrpcClientBeanPostProcessor . java <nl> ppp GrpcClientBeanPostProcessor . java <nl> - for (final Field field : clazz . getDeclaredFields()) { <nl> - final GrpcClient annotation = AnnotationUtils . findAnnotation(field, GrpcClient . class) ; <nl> - if (annotation != null) { <nl> - ReflectionUtils . <nl>",polish and npe fix,1
