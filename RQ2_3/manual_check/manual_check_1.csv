commitId,commitTime,diff,message,isImplicit
a1f5909ce126cebdab337cc89de6daf93b25bc24,2016-12-08 14:43:07+01:00,"mmm ReceiveKeyDialog . java <nl> ppp ReceiveKeyDialog . java <nl> -  . add(new SmsDecryptJob(context, messageRecord . getId(), true)) ; <nl> +  . add(new SmsDecryptJob(context, messageRecord . getId(), true, false)) ; <nl> mmm SmsDecryptJob . java <nl> ppp SmsDecryptJob . java <nl> + private final Boolean isReceivedWhenLocked ; <nl> - public SmsDecryptJob(Context context, long messageId, boolean manualOverride) { <nl> + public SmsDecryptJob(Context context, long messageId, boolean manualOverride, boolean isReceivedWhenLocked) { <nl> - this . messageId = messageId ; <nl> - this . manualOverride = manualOverride ; <nl> + this . messageId        <nl>",do not vibrate when message be decrypt and silence be lock,1
0e7b30624a68353eac61b4d9e9f9b33d771ee84d,2017-01-05 12:15:45+01:00,"mmm SmsDecryptJob . java <nl> ppp SmsDecryptJob . java <nl> - MessageNotifier . updateNotification(context, masterSecret, MessageNotifier . MNF_DEFAULTS, threadId, !isReceivedWhenLocked) ; <nl> + if (!isReceivedWhenLocked) { <nl> + MessageNotifier . updateNotification(context, masterSecret, MessageNotifier . MNF_LIGHTS_KEEP) ; <nl> + } else { <nl> + MessageNotifier . updateNotification(context, masterSecret) ; <nl> + } <nl> mmm SmsReceiveJob . java <nl> ppp SmsReceiveJob . java <nl> - MessageNotifier . updateNotification(context, masterSecret, messageAndThreadId . second, true) ; <nl> + MessageNotifier . updateNotification(context, masterSecret, messageAndThreadId . second) ; <nl> mmm MessageNotifier . java <nl> ppp MessageNotifier . java <nl> - public static void updateNotificationWithFlags(Context context, <nl>",do not rebuild notification when silence be unlock,1
52e2a502952164d2f166c926e61d2b710d90ad00,2017-02-15 22:12:53+01:00,"mmm DirectShareService . java <nl> ppp DirectShareService . java <nl> + import org . smssecure . smssecure . recipients . RecipientFactory ; <nl> + import org . smssecure . smssecure . recipients . Recipients ; <nl> - while ((record = reader . getNext()) != null) { <nl> - String   name     = record . getRecipients() . toShortString() ; <nl> - Drawable drawable = record . getRecipients() . getContactPhoto() <nl> -  . asDrawable(this, record . getRecipients() . getColor() <nl> -  . toConversationColor(this)) ; <nl> - Bitmap   avatar   = BitmapUtil <nl>","make sure recipient be fully resolve , limit size of result",1
2fff2271e0fe33bf5377a01cc5d1d7bf4d40b061,2017-02-15 22:33:41+01:00,"mmm CanonicalAddressDatabase . java <nl> ppp CanonicalAddressDatabase . java <nl> - import com . google . i18n . phonenumbers . NumberParseException ; <nl> - import com . google . i18n . phonenumbers . PhoneNumberUtil ; <nl> - import com . google . i18n . phonenumbers . Phonenumber ; <nl> - import com . google . i18n . phonenumbers . ShortNumberInfo ; <nl> - import org . whispersystems . libaxolotl . util . guava . Optional ; <nl> + import java . util . Collections ; <nl> - private final Map<String, Long>        addressCache <nl>",fix non-thread-safe operation on canonical id cache,1
05e9c5d15e57767b79584fa422e5156200c07511,2017-02-16 15:24:55+01:00,mmm Recipient . java <nl> ppp Recipient . java <nl> + private boolean resolving ; <nl> + this . resolving    = true ; <nl> + Recipient . this . resolving    = false ; <nl> + this . resolving    = false ; <nl> + synchronized boolean isResolving() { <nl> + return resolving ; <nl> + } <nl> mmm RecipientProvider . java <nl> ppp RecipientProvider . java <nl> - public class RecipientProvider { <nl> + class RecipientProvider { <nl> - if (cachedRecipient != null && !cachedRecipient . isStale()) return cachedRecipient ; <nl> <nl>,do not return unresolve asynchronous recipient for non-async caller,1
6439540f1d01624de50d7e89205a25f1b8c7f22d,2017-02-16 16:37:42+01:00,"mmm ConversationAdapter . java <nl> ppp ConversationAdapter . java <nl> - if (!isActiveCursor()) return -1 ; <nl> + if (!isActiveCursor())          return -1 ; <nl> + if (isHeaderPosition(position)) return -1 ; <nl> + if (isFooterPosition(position)) return -1 ; <nl> + if (position >= getItemCount()) return -1 ; <nl> mmm ConversationFragment . java <nl> ppp ConversationFragment . java <nl> - ((ConversationAdapter)list . getAdapter()) . onBindHeaderViewHolder(headerViewHolder, positionId) ; <nl> + if (((ConversationAdapter)list . getAdapter()) . getHeaderId(positionId) != -1) { <nl> + ((ConversationAdapter) list . getAdapter()) . onBindHeaderViewHolder(headerViewHolder, positionId) ; <nl> + } <nl> <nl>",do not calculate date header item for adapter header,1
94f3e37a23f125f50419b2be11e058005d5fc7e4,2017-02-16 16:38:01+01:00,mmm ConversationAdapter . java <nl> ppp ConversationAdapter . java <nl> + if (position < 0)               return -1 ; <nl>,fix illegalargumentexception on rotate,1
1a42776016ba88bd6f13c2e444a0c83b7ef92eb9,2017-02-16 16:41:50+01:00,"mmm MmsDatabase . java <nl> ppp MmsDatabase . java <nl> - addressDatabase . insertAddressesForId(messageId, MmsAddresses . forFrom(Util . toIsoString(notification . getFrom() . getTextString()))) ; <nl> + if (headers . getEncodedStringValue(PduHeaders . FROM) != null) { <nl> + addressDatabase . insertAddressesForId(messageId, MmsAddresses . forFrom(Util . toIsoString(notification . getFrom() . getTextString()))) ; <nl> + } <nl>",fix for npe when mm from be absent,1
060fa24d63f602e701862376b2dda696decabbf5,2017-02-26 12:33:14+01:00,"mmm MediaPreviewActivity . java <nl> ppp MediaPreviewActivity . java <nl> - relativeTimeSpan = null ; <nl> + relativeTimeSpan = getString(R . string . MediaPreviewActivity_draft) ; <nl> - date         = getIntent() . getLongExtra(DATE_EXTRA, System . currentTimeMillis()) ; <nl> + date         = getIntent() . getLongExtra(DATE_EXTRA, -1) ; <nl> - saveTask . execute(new Attachment(mediaUri, mediaType, date)) ; <nl> + long saveDate = (date > 0) ? date : System . currentTimeMillis() ; <nl> + saveTask . execute(new Attachment(mediaUri, mediaType, saveDate)) ; <nl>",do not display date for draft in medium preview,1
2d7b755553a1b9c0688afe60ad343ff194736f75,2017-02-26 12:33:14+01:00,"mmm ConversationFragment . java <nl> ppp ConversationFragment . java <nl> - int lastSeenPosition = getListAdapter() . findLastSeenPosition(lastSeen) ; <nl> + final int lastSeenPosition = getListAdapter() . findLastSeenPosition(lastSeen) ; <nl> - ((LinearLayoutManager)list . getLayoutManager()) . scrollToPositionWithOffset(lastSeenPosition, list . getHeight()) ; <nl> + list . post(new Runnable() { <nl> + @Override <nl> + public void run() { <nl> + ((LinearLayoutManager)list . getLayoutManager()) . scrollToPositionWithOffset(lastSeenPosition, list . getHeight()) ; <nl> + } <nl> + }) ; <nl>",do not scroll to last see until the recyclerview have be measure,1
b941e389ce22059957b26a7ce4d293c840a48a85,2017-02-26 12:33:14+01:00,mmm AbstractNotificationBuilder . java <nl> ppp AbstractNotificationBuilder . java <nl> - if      (ringtone != null)                        setSound(ringtone) ; <nl> - else if (!TextUtils . isEmpty(defaultRingtoneName)) setSound(Uri . parse(defaultRingtoneName)) ; <nl> + if      (ringtone == null && !TextUtils . isEmpty(defaultRingtoneName)) setSound(Uri . parse(defaultRingtoneName)) ; <nl> + else if (ringtone != null && !ringtone . toString() . isEmpty())          setSound(ringtone) ; <nl>,do not call notification.setsound with empty ringtone,1
8703bf7e791d9ac4bc4da726f311ab0a9f292eb5,2017-02-26 20:13:13+01:00,"mmm ConversationAdapter . java <nl> ppp ConversationAdapter . java <nl> - if (messageRecord . getDateReceived() <= lastSeen) { <nl> + if (messageRecord . isOutgoing() || messageRecord . getDateReceived() <= lastSeen) { <nl> - return messageRecord . getDateReceived() ; <nl> + if (messageRecord . isOutgoing()) return 0 ; <nl> + else                            return messageRecord . getDateReceived() ; <nl> mmm ConversationFragment . java <nl> ppp ConversationFragment . java <nl> + Log . w(TAG, ""onLoadFinished"") ; <nl>",do not let outgo message trigger last see divider,1
0350404a4857e87600db145b2e2a2f07f9912a2d,2017-03-16 19:00:24+01:00,"mmm MmsReceiveJob . java <nl> ppp MmsReceiveJob . java <nl> + import org . smssecure . smssecure . util . SilencePreferences ; <nl> - MessageNotifier . updateNotification(context, masterSecret, messageAndThreadId . second) ; <nl> + if (!SilencePreferences . isMediaDownloadAllowed(context)) <nl> + MessageNotifier . updateNotification(context, masterSecret, messageAndThreadId . second) ; <nl>",do not notify twice when auto-download be enable,1
8222791c063ae2918cb9a14a826ddb22057a54a7,2017-03-22 15:38:07+01:00,mmm ConversationItem . java <nl> ppp ConversationItem . java <nl> - messageRecord . isKeyExchange()) ; <nl> + (messageRecord . isKeyExchange() && !messageRecord . isLegacyMessage())) ; <nl> - !messageRecord . isStaleKeyExchange()) <nl> + !messageRecord . isStaleKeyExchange()     && <nl> + !messageRecord . isLegacyMessage()) <nl>,do not intercept click for legacy message,1
f265f25b3793c17bcc7fe13c8279683883db1507,2017-03-29 19:21:10+02:00,mmm DatabaseFactory . java <nl> ppp DatabaseFactory . java <nl> + private static final int INTRODUCED_NOTIFIED                             = 30 ; <nl> - private static final int INTRODUCED_XMPP_TRANSPORT                       = 30 ; <nl> - private static final int DATABASE_VERSION              <nl>,do not redisplay notification after they have be dismiss,1
769d8fb048dc5bf4ef39f809d94e071e759b1e0d,2019-08-07 21:52:59+02:00,"mmm WelcomeActivity . java <nl> ppp WelcomeActivity . java <nl> -  . request(Manifest . permission . WRITE_CONTACTS, Manifest . permission . READ_CONTACTS, <nl> - Manifest . permission . WRITE_EXTERNAL_STORAGE, Manifest . permission . READ_EXTERNAL_STORAGE, <nl> - Manifest . permission . READ_PHONE_STATE) <nl> +  . request(Manifest . permission . WRITE_CONTACTS, <nl> + Manifest . permission . READ_CONTACTS, <nl> + Manifest . permission . READ_PHONE_STATE) <nl> -  . withRationaleDialog(getString(R . string . WelcomeActivity_silence_needs_access_to_your_contacts_media_and_phone), <nl> - R . drawable . ic_contacts_white_36dp, R . drawable . ic_folder_white_36dp, R . drawable . ic_phone_white_36dp) <nl> +  . withRationaleDialog(getString(R . string . <nl>",do not ask for storage permission on first start,1
f9798733be6d32a3dd68bbb875c71745e7ac213b,2020-04-14 13:13:29+02:00,mmm ConversationActivity . java <nl> ppp ConversationActivity . java <nl> - if (Build . VERSION . SDK_INT < 22 || activeSubscriptions . size() < 2) { <nl> - int subscriptionId = Build . VERSION . SDK_INT < 22 ? -1 : activeSubscriptions . get(0) . getSubscriptionId() ; <nl> + if (activeSubscriptions . size() < 2) { <nl> + int subscriptionId = activeSubscriptions . get(0) . getSubscriptionId() ; <nl> - if (Build . VERSION . SDK_INT < 22 || activeSubscriptions . size() < 2) { <nl> - int subscriptionId = Build . VERSION . SDK_INT < 22 ? -1 : <nl>,fix key management if app subscription id be not equal to device 's one,1
1c6bcfee4c935bf791bca3e3a6f7030639fbdb0c,2014-06-12 17:38:28-04:00,mmm FhirResourceDao . java <nl> ppp FhirResourceDao . java <nl> + import org . apache . commons . lang3 . StringUtils ; <nl> - if (system != null) { <nl> + if (StringUtils . isNotBlank(system)) { <nl> + } else { <nl> + singleCodePredicates . add(builder . isNull(from . get("mySystem"))) ; <nl> - if (code != null) { <nl> + if (StringUtils . isNotBlank(code)) { <nl> + }else { <nl> + singleCodePredicates . add(builder . isNull(from . get("myValue"))) ; <nl> mmm ResourceIndexedSearchParamToken . java <nl> ppp ResourceIndexedSearchParamToken . java <nl> + import org . apache . commons . lang3 <nl>,fix problem with non-code have token search params,0
80c13494a864ad2466a8adb199c2aada203de7db,2014-07-03 18:35:23-04:00,mmm StringDt . java <nl> ppp StringDt . java <nl> - return super . isEmpty() && StringUtils . isBlank(getValue()) ; <nl> + return super . isBaseEmpty() && StringUtils . isBlank(getValue()) ; <nl> mmm JsonParser . java <nl> ppp JsonParser . java <nl> - if (value == null && ext . getAllUndeclaredExtensions() . isEmpty()) { <nl> + boolean noValue = value == null || value . isEmpty() ; <nl> + if (noValue && ext . getAllUndeclaredExtensions() . isEmpty()) { <nl> - } else if (value == null) { <nl> + } else if (noValue) { <nl> mmm RestfulServer . java <nl>,fix json parser npe,1
a13c78d6cc0ec5027b57d132ed907d9ea66a5555,2017-07-21 07:39:11-04:00,mmm FhirSystemDaoDstu3 . java <nl> ppp FhirSystemDaoDstu3 . java <nl> - import static org . apache . commons . lang3 . StringUtils . defaultString ; <nl> - import static org . apache . commons . lang3 . StringUtils . isBlank ; <nl> - import static org . apache . commons . lang3 . StringUtils . isNotBlank ; <nl> - import java . util . ArrayList ; <nl> - import java . util . Collection ; <nl> - import java . util . Collections ; <nl> - import java . util . Comparator ; <nl> - import java . util <nl>,"fix deadlock in transaction processing , and put transaction outcome",1
78b7188fbc4ed909bf9d0bfe81bc64840a484829,2017-10-11 10:20:12-04:00,"mmm StaleSearchDeletingSvcImpl . java <nl> ppp StaleSearchDeletingSvcImpl . java <nl> - ourLog . info(""Deleting search {}/{} Created[{}] -Last returned[{}]"", searchToDelete . getId(), searchToDelete . getUuid(), searchToDelete . getCreated(), searchToDelete . getSearchLastReturned()) ; <nl> - mySearchIncludeDao . deleteForSearch(searchToDelete . getId()) ; <nl> - mySearchResultDao . deleteForSearch(searchToDelete . getId()) ; <nl> - mySearchDao . delete(searchToDelete) ; <nl> + if (searchToDelete != null) { <nl> + ourLog . info(""Deleting search {}/{} - Created[{}] -- Last returned[{}]"", searchToDelete . getId(), searchToDelete . getUuid(), searchToDelete . getCreated(), searchToDelete . getSearchLastReturned()) ; <nl> + mySearchIncludeDao . deleteForSearch(searchToDelete . getId()) ; <nl> + mySearchResultDao . deleteForSearch(searchToDelete <nl>",fix validation error when bundle have no type,1
a782bd7630ec8aad0a67f1f91a936b1a7611540b,2017-10-16 10:00:27-04:00,mmm IgPackUploader . java <nl> ppp IgPackUploader . java <nl> + break ; <nl> mmm VersionConvertor_10_40 . java <nl> ppp VersionConvertor_10_40 . java <nl>  <nl> mmm ConnectionWrapper . java <nl> ppp ConnectionWrapper . java <nl> - return getClientInfo(theName) ; <nl> + return myWrap . getClientInfo(theName) ; <nl> mmm BaseJpaTest . java <nl> ppp BaseJpaTest . java <nl> - int size = theFound . size() ; <nl> + Integer size = theFound . size() ; <nl> + if (size == null) { <nl> + size = 99999 ; <nl> + } <nl> mmm FhirResourceDaoDstu2ValidateTest . java <nl> ppp FhirResourceDaoDstu2ValidateTest <nl>,fix a number of problem report by errorprone,0
b2776931066d0d286d0ff5acc6dbab9101531ef5,2017-11-14 19:00:28-06:00,"mmm ReferenceParam . java <nl> ppp ReferenceParam . java <nl> + boolean skipSetValue = false ; <nl> + myId . setParts(null, resourceType, theValue, null) ; <nl> + skipSetValue = true ; <nl> - setValue(theValue) ; <nl> + if (!skipSetValue) { <nl> + setValue(theValue) ; <nl> - if (isNotBlank(resourceType) && isBlank(getResourceType())) { <nl> - setValue(resourceType + '/' + theValue) ; <nl> + if (isNotBlank(resourceType) && isBlank(getResourceType())) { <nl> + setValue(resourceType '/' theValue) ; <nl> + } <nl> mmm ReferenceParamTest . java <nl> ppp ReferenceParamTest . java <nl> + assertEquals(""Location/123"", rp . getValue()) ; <nl> + assertEquals(""Location/123"", rp . getValue()) ; <nl>",ensure to use resourcetype properly when it be explicitly provide in a,1
a8e5413d1f6907e2949bf370954204ace0e9a880,2017-12-22 13:47:40-05:00,mmm ProfileUtilities . java <nl> ppp ProfileUtilities . java <nl> + default: return "?" ; <nl> - return "?" ; <nl> - } else if (fallback != null && fallback != null && fallback . hasShort()) { <nl> + } else if (fallback != null && fallback . hasShort()) { <nl>,fix two issue find by errorprone,0
9a4933f536b05f9c86a71e37331a14d8dac0c89a,2018-01-24 14:59:03+01:00,mmm ResourceReferenceInfo . java <nl> ppp ResourceReferenceInfo . java <nl> - if (searchParamDef . getPathsSplit() . contains(myOwningResource + " . " + myName)) { <nl> - return true ; <nl> + final String myCompleteName = myOwningResource " . " myName ; <nl> + boolean matched = false ; <nl> + for (String s : searchParamDef . getPathsSplit()) { <nl> + if (s . equals(myCompleteName) || <nl> + s . startsWith(myCompleteName " . ")) { <nl> + matched = true ; break ; <nl> + } <nl> + return matched ; <nl>,fix problem with _include=medicationrequest : medication,1
3cbf669007fe902e5ffee75fe1e9e2f23ecea171,2018-02-03 15:47:48-05:00,new file <nl> ppp SubscriptionUtil . java <nl> + package ca . uhn . fhir . util ; <nl> + import ca . uhn . fhir . context . BaseRuntimeChildDefinition ; <nl> + import ca . uhn . fhir . context . BaseRuntimeElementDefinition ; <nl> + import ca . uhn . fhir . context . FhirContext ; <nl> + import ca . uhn . fhir . context . RuntimeResourceDefinition ; <nl> + import org . hl7 . fhir . instance . model . api . IBase ; <nl> + import org . hl7 . fhir . instance . model <nl>,do not crash on startup if an invalid subscription be in the database,1
a395e48cd471c72a02b2bb0192471b3bca95c006,2018-02-04 18:44:37-05:00,mmm BaseResourceReturningMethodBinding . java <nl> ppp BaseResourceReturningMethodBinding . java <nl> - b . append(theRequest . getRequestPath()) ; <nl> + if (isNotBlank(theRequest . getTenantId()) && theRequest . getRequestPath() . startsWith(theRequest . getTenantId() "/")) { <nl> + b . append(theRequest . getRequestPath() . substring(theRequest . getTenantId() . length() 1)) ; <nl> + } else { <nl> + b . append(theRequest . getRequestPath()) ; <nl> + } <nl> mmm UrlBaseTenantIdentificationStrategy . java <nl> ppp UrlBaseTenantIdentificationStrategy . java <nl> + import ca . uhn . fhir . i18n . HapiLocalizer ; <nl> + import ca . uhn . fhir . rest . server <nl>,do not crash when a multitenant server have a request for /,1
81305fb17f56c1fb3d67422547bbe16d2e4df591,2018-02-19 20:58:55-05:00,"mmm BaseSubscriptionDeliverySubscriber . java <nl> ppp BaseSubscriptionDeliverySubscriber . java <nl> + import ca . uhn . fhir . rest . server . exceptions . ResourceNotFoundException ; <nl> - IBaseResource loadedPayload = dao . read(payloadId) ; <nl> + IBaseResource loadedPayload ; <nl> + try { <nl> + loadedPayload = dao . read(payloadId) ; <nl> + } catch (ResourceNotFoundException e) { <nl> + ourLog . warn(""Unable to find resource {} - Aborting delivery"", payloadId . getValue()) ; <nl> + return ; <nl> + } <nl>",do not deliver subscription result for deleted resource,1
f026f8a1aca27b4ecc7e482b86e74f3e560ce333,2018-02-24 12:05:05-05:00,"mmm XmlParser . java <nl> ppp XmlParser . java <nl> - getErrorHandler() . missingRequiredElement(new ParseLocation(""extension""), ""url"") ; <nl> + getErrorHandler() . missingRequiredElement(new ParseLocation() . setParentElementName(""extension""), ""url"") ; <nl> - getErrorHandler() . missingRequiredElement(new ParseLocation(""modifierExtension""), ""url"") ; <nl> + getErrorHandler() . missingRequiredElement(new ParseLocation() . setParentElementName(""modifierExtension""), ""url"") ; <nl>",fix compile error,1
b2107baae4d33c3d0f91f7fa051e8edb398e084f,2018-04-03 23:11:53+02:00,"mmm InstanceValidator . java <nl> ppp InstanceValidator . java <nl> - if (fetcher == null) <nl> - throw new FHIRException(""Resource resolution services not provided"") ; <nl> - we = fetcher . fetch(hostContext . appContext, ref) ; <nl> + if (fetcher == null) { <nl> + if (!refType . equals(""contained"")) <nl> + throw new FHIRException(""Resource resolution services not provided"") ; <nl> + } else { <nl> + we = fetcher . fetch(hostContext . appContext, ref) ; <nl> + } <nl>",fix the server exception when validate an invalid local reference,1
baf53efd325df51521bd053f32bf2dfa920a56e1,2018-04-03 23:35:00+02:00,"mmm InstanceValidator . java <nl> ppp InstanceValidator . java <nl> - if (itemType . equals(""Coding"")) validateAnswerCode(errors, answer, ns, qsrc, qItem, false) ; <nl> - else if (itemType . equals(""date"")) checkOption(errors, answer, ns, qsrc, qItem, ""date"") ; <nl> - else if (itemType . equals(""time"")) checkOption(errors, answer, ns, qsrc, qItem, ""time"") ; <nl> - else if (itemType . equals(""integer"")) checkOption(errors, answer, ns, qsrc, qItem, ""integer"") ; <nl> - else if (itemType . equals(""string"")) checkOption(errors, answer, ns, qsrc, qItem, ""string"") ; <nl> + if (itemType != null) { <nl> + if (itemType . equals(""Coding"")) validateAnswerCode(errors, answer, ns, qsrc, qItem, false) ; <nl> <nl>",fix the npe in the instancevalidator,1
a46b4a4637bd6abe609c936393e56a23368295fe,2018-06-13 22:03:15+08:00,"mmm BaseHapiFhirResourceDao . java <nl> ppp BaseHapiFhirResourceDao . java <nl> - ourLog . info(""Starting resource DAO for type: {}"", getResourceName()) ; <nl> + ourLog . debug(""Starting resource DAO for type: {}"", getResourceName()) ; <nl> mmm BaseHapiFhirSystemDao . java <nl> ppp BaseHapiFhirSystemDao . java <nl> - return null ; <nl> + return -1 ; <nl>",reindexing should not stop unexpectedly,1
3b794a4f395da797300eed114da08af4c67311dd,2018-07-02 09:17:48-04:00,"mmm BaseHapiFhirDao . java <nl> ppp BaseHapiFhirDao . java <nl> + Validate . notNull(theEntity) ; <nl> + Validate . isTrue(theDeletedTimestampOrNull != null || theResource != null, ""Must have either a resource[{}] or a deleted timestamp[{}] for resource PID[{}]"", theDeletedTimestampOrNull != null, theResource != null, theEntity . getId()) ; <nl> + theEntity . setIndexStatus(INDEX_STATUS_INDEXED) ; <nl> mmm BaseHapiFhirResourceDao . java <nl> ppp BaseHapiFhirResourceDao . java <nl> - ourLog . debug(""Indexing resource {} PID {}"", theResource . getIdElement() . getValue(), theEntity . getId()) ; <nl> - CURRENTLY_REINDEXING . put(theResource, Boolean . TRUE) ; <nl> - updateEntity(null, theResource, theEntity, null, true, false, <nl>",fix a crash when reindexing delete resource,1
d07fd76d605a4e6ce5f0f92c93e8a60c43043c8f,2018-08-03 10:44:15-04:00,"mmm BaseSubscriptionDeliverySubscriber . java <nl> ppp BaseSubscriptionDeliverySubscriber . java <nl> + import org . springframework . lang . NonNullApi ; <nl> - private boolean myReloadResourceBeforeDelivery = true ; <nl> - if (myReloadResourceBeforeDelivery) { <nl> - IIdType payloadId = msg . getPayloadId(getContext()) ; <nl> - Class type = getContext() . getResourceDefinition(payloadId . getResourceType()) . getImplementingClass() ; <nl> - IFhirResourceDao dao = getSubscriptionInterceptor() . getDao(type) ; <nl> - IBaseResource loadedPayload ; <nl> - try { <nl> - loadedPayload = dao . read(payloadId) ; <nl> - } catch (ResourceNotFoundException e) { <nl> - ourLog . warn(""Unable to find resource {} Aborting delivery"", <nl>",dont keep resource body in the queue for jpa subscription delivery,1
ea1f17762e913c64eecf035f3267e10310c1d00e,2018-08-11 12:20:07-04:00,"mmm DateRangeParam . java <nl> ppp DateRangeParam . java <nl> + @SuppressWarnings(""UnusedReturnValue"") <nl> + public DateRangeParam setLowerBound(String theLowerBound) { <nl> + setLowerBound(new DateParam(GREATERTHAN_OR_EQUALS, theLowerBound)) ; <nl> + return this ; <nl> + } <nl> + public DateRangeParam setLowerBoundInclusive(Date theLowerBound) { <nl> + validateAndSet(new DateParam(ParamPrefixEnum . GREATERTHAN_OR_EQUALS, theLowerBound), myUpperBound) ; <nl> + return this ; <nl> + } <nl> + public DateRangeParam setUpperBoundInclusive(Date theUpperBound) { <nl> + validateAndSet(myLowerBound, new DateParam(ParamPrefixEnum . LESSTHAN_OR_EQUALS, theUpperBound)) ; <nl> + return this ; <nl> + } <nl> + public DateRangeParam setLowerBoundExclusive(Date theLowerBound) { <nl> + validateAndSet(new DateParam(ParamPrefixEnum . GREATERTHAN, theLowerBound), myUpperBound) ; <nl> + <nl>",do not apply last updated to include,1
6511545d254009699dbca5463eacc7b93cbf3c2a,2018-08-17 11:56:33-04:00,mmm IFhirResourceDaoComposition . java <nl> ppp IFhirResourceDaoComposition . java <nl>  <nl> mmm FhirResourceDaoCompositionDstu3 . java <nl> ppp FhirResourceDaoCompositionDstu3 . java <nl>  <nl> mmm BaseJpaResourceProviderCompositionDstu2 . java <nl> ppp BaseJpaResourceProviderCompositionDstu2 . java <nl>  <nl> mmm BaseJpaResourceProviderCompositionDstu3 . java <nl> ppp BaseJpaResourceProviderCompositionDstu3 . java <nl>  <nl> mmm BaseJpaResourceProviderCompositionR4 . java <nl> ppp BaseJpaResourceProviderCompositionR4 . java <nl>  <nl> mmm BaseSubscriptionInterceptor . java <nl> ppp BaseSubscriptionInterceptor . java <nl> - public boolean hasSubscription(IIdType theId) { <nl> + public CanonicalSubscription hasSubscription(IIdType theId) { <nl> - return myIdToSubscription . containsKey(theId . getIdPart()) ; <nl> + return myIdToSubscription . get(theId . <nl>,do not re-activate already active identical subscription,1
a26779de81d39fda67b2d44d04690f8ea1f19023,2018-09-11 08:42:46-04:00,"mmm BaseJpaTest . java <nl> ppp BaseJpaTest . java <nl> - public static void purgeDatabase(DaoConfig theDaoConfig, IFhirSystemDao<?, ?> theSystemDao, ISearchParamPresenceSvc theSearchParamPresenceSvc, ISearchCoordinatorSvc theSearchCoordinatorSvc, ISearchParamRegistry theSearchParamRegistry) { <nl> + public static void purgeDatabase(DaoConfig theDaoConfig, IFhirSystemDao<?, ?> theSystemDao, ISearchParamPresenceSvc theSearchParamPresenceSvc, ISearchCoordinatorSvc theSearchCoordinatorSvc, ISearchParamRegistry theSearchParamRegistry) throws InterruptedException { <nl> mmm BaseJpaDstu2Test . java <nl> ppp BaseJpaDstu2Test . java <nl> + @Override <nl> mmm BaseJpaDstu3Test . java <nl> ppp BaseJpaDstu3Test . java <nl> + @Override <nl>",fix compile error,1
ea5cf9f9564cad1bf2a58d2efe49af802bf67a59,2018-09-27 11:25:56+02:00,mmm DateRangeParam . java <nl> ppp DateRangeParam . java <nl> - if (myLowerBound == null) { <nl> + if (myLowerBound == null || myLowerBound . getValue() == null) { <nl> - if (myUpperBound == null) { <nl> + if (myUpperBound == null || myUpperBound . getValue() == null) { <nl>,fix the null pointer problem in the datarangeparam class,1
2e030eebaa86a44f1f893ed06bbad9170d0b2430,2018-11-21 12:06:10-05:00,"mmm SearchParamExtractorService . java <nl> ppp SearchParamExtractorService . java <nl> - List<JpaRuntimeSearchParam> uniqueSearchParams = mySearchParamRegistry . getActiveUniqueSearchParams(theEntity . getResourceType()) ; <nl> + String resourceType = theEntity . getResourceType() ; <nl> + List<JpaRuntimeSearchParam> uniqueSearchParams = mySearchParamRegistry . getActiveUniqueSearchParams(resourceType) ; <nl> - Set<String> queryStringsToPopulate = theParams . extractCompositeStringUniquesValueChains(theEntity . getResourceType(), partsChoices) ; <nl> + Set<String> queryStringsToPopulate = theParams . extractCompositeStringUniquesValueChains(resourceType, partsChoices) ; <nl> mmm ResourceReindexJobEntity . java <nl> ppp ResourceReindexJobEntity . java <nl> + import org . apache . commons . lang3 . builder . ToStringBuilder ; <nl> + import org . apache . commons . lang3 . builder . ToStringStyle <nl>",make sure that reindexing happens correctly,1
c85f4b83624834339fcc1c4b5aa33ac73a309369,2018-12-13 12:12:56+02:00,"mmm DefaultEnableWhenEvaluator . java <nl> ppp DefaultEnableWhenEvaluator . java <nl> + public Type convertToType(Element element)  { <nl> + Type b = new Factory() . create(element . fhirType()) ; <nl> + if (b instanceof PrimitiveType) { <nl> + ((PrimitiveType<?>) b) . setValueAsString(element . primitiveValue()) ; <nl> + } else { <nl> + for (Element child : element . getChildren()) { <nl> + if (!isExtension(child)) { <nl> + b . setProperty(child . getName(), convertToType(child)) ; <nl> + } <nl> + } <nl> + } <nl> + return b ; <nl> + } <nl> + private boolean isExtension(Element element) { <nl> <nl>",do not evaluate extension when determine type of answer,1
b262985e217176dd02de3ff478cfa9a5f991f50e,2018-12-13 13:29:17+02:00,mmm DefaultEnableWhenEvaluator . java <nl> ppp DefaultEnableWhenEvaluator . java <nl> - if (expectedCoding . hasSystem() != value . hasSystem()) { <nl> + if (expectedCoding . hasSystem() && !value . hasSystem()) { <nl> mmm QuestionnaireResponseValidatorDstu3Test . java <nl> ppp QuestionnaireResponseValidatorDstu3Test . java <nl> + @Test <nl> + public void testChoiceItemsEnableWhenHasNoSystemYetAnswerHasSystem() throws Exception { <nl> + Questionnaire q = new Questionnaire() ; <nl> + Coding qcoding = new Coding() ; <nl> + qcoding . setCode("male") ; <nl> + qcoding . setSystem("http://hl7 . org/fhir/administrative-gender") ; <nl> + q . addItem() . setLinkId("1B") . setRequired(true) . setType(CHOICE) . addOption() . setValue(qcoding) ; <nl> <nl>,do not force enablewhen to have system,0
4f16fea580e871033d1b912834b1f7c730a0b66c,2018-12-28 12:11:19-05:00,mmm XmlValidator . java <nl> ppp XmlValidator . java <nl> - package org . hl7 . fhir . r4 . validation ;,fix compile error,1
39f20628029aafc58214e0f487ba0b0f9e759b84,2019-01-05 13:43:55-05:00,mmm AbstractJaxRsPageProvider . java <nl> ppp AbstractJaxRsPageProvider . java <nl> + @Override <nl> + public PreferReturnEnum getDefaultPreferReturn() { <nl> + return PreferReturnEnum . REPRESENTATION ; <nl> + } <nl> mmm AbstractJaxRsResourceProvider . java <nl> ppp AbstractJaxRsResourceProvider . java <nl> + @Override <nl> + public PreferReturnEnum getDefaultPreferReturn() { <nl> + return PreferReturnEnum . REPRESENTATION ; <nl> + } <nl> mmm IRestfulServer . java <nl> ppp IRestfulServer . java <nl> - void setDefaultPreferReturn(PreferReturnEnum theDefaultPreferReturn) ; <nl> mmm RestfulServer . java <nl> ppp RestfulServer . java <nl> - @Override <nl> mmm BaseWorkerContext . java <nl> ppp BaseWorkerContext . java <nl> - package <nl>,fix errorprone detect issue,1
432ad8e5bcc90bf6bbc0835b0f526270e9b62c24,2019-01-18 05:41:47-05:00,new file <nl> ppp NotificationServlet . java <nl> + package ca . uhn . fhir . jpa . subscription ; <nl> + import javax . servlet . http . HttpServlet ; <nl> + import javax . servlet . http . HttpServletRequest ; <nl> + import javax . servlet . http . HttpServletResponse ; <nl> + import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> + import java . util . List ; <nl> + import java . util . concurrent . atomic . AtomicLong ; <nl> + public class NotificationServlet extends <nl>,subscription without payload do not contain header,1
503d1d8affdf268ceea6b675cd269b1a0d9784bc,2019-01-26 18:42:01-05:00,mmm Pointcut . java <nl> ppp Pointcut . java <nl>  <nl> mmm InterceptorService . java <nl> ppp InterceptorService . java <nl>  <nl> mmm ResourceLinkExtractor . java <nl> ppp ResourceLinkExtractor . java <nl>  <nl> mmm ResourceModifiedMessage . java <nl> ppp ResourceModifiedMessage . java <nl> - ref = next . getResourceReference() . getResource() . getIdElement() . getValue() ; <nl> + IBaseResource resource = next . getResourceReference() . getResource() ; <nl> + if (resource != null) { <nl> + ref = resource . getIdElement() . getValue() ; <nl> + } <nl> mmm SubscriptionMatchResult . java <nl> ppp SubscriptionMatchResult . <nl>,subscription npe fix,1
4a49a9362e94d754b119d6ecbee26d979323a6f0,2019-02-02 19:26:20-05:00,mmm ActiveSubscriptionCache . java <nl> ppp ActiveSubscriptionCache . java <nl> - import com . google . common . annotations . VisibleForTesting ; <nl> - @VisibleForTesting <nl> - void clearForUnitTests() { <nl> - myCache . clear() ; <nl> - } <nl> mmm SubscriptionRegistry . java <nl> ppp SubscriptionRegistry . java <nl> - import com . google . common . annotations . VisibleForTesting ; <nl> - public void preDestroy() { <nl> + public void unregisterAllSubscriptions() { <nl> - @VisibleForTesting <nl> - public void clearForUnitTests() { <nl> - myActiveSubscriptionCache . clearForUnitTests() ; <nl> - } <nl> mmm BaseBlockingQueueSubscribableChannelDstu3Test . java <nl> ppp <nl>,just clear the cache do not shut down the channel consumer switch to unregisterall,1
444730373bbf5d6e87bf1debead5a6337ff0e62c,2019-05-10 12:49:34-04:00,mmm ResourceProviderDstu3CodeSystemTest . java <nl> ppp ResourceProviderDstu3CodeSystemTest . java <nl> + import ca . uhn . fhir . context . FhirContext ; <nl> + import com . google . common . base . Charsets ; <nl> + import org . apache . commons . io . IOUtils ; <nl> + import org . hl7 . fhir . instance . model . api . IBaseOperationOutcome ; <nl> + import org . hl7 . fhir . instance . model . api . IBaseResource ; <nl> + import java . io . InputStream ; <nl> - import static org . junit . <nl>,fix an npe in validation,1
f278fcf17508b741792588b7b2bab7b3a2964f66,2019-06-03 17:37:02-04:00,mmm ActiveSubscription . java <nl> ppp ActiveSubscription . java <nl> - public void removeChannel() { <nl> - if (mySubscribableChannel instanceof IRemovableChannel) { <nl> - ((IRemovableChannel)mySubscribableChannel) . removeChannel() ; <nl> - } <nl> - } <nl> mmm ActiveSubscriptionCache . java <nl> ppp ActiveSubscriptionCache . java <nl> - activeSubscription . removeChannel() ; <nl> deleted file <nl> mmm IRemovableChannel . java <nl> - package ca . uhn . fhir . jpa . subscription . module . cache ; <nl> - public interface IRemovableChannel { <nl> - void removeChannel() ; <nl> - } <nl>,no longer remove channel when their subscription be unregistered,1
491776a7b829cbd30f5ac7b2cd4edff735210342,2019-07-02 05:41:38-04:00,"mmm CascadingDeleteInterceptor . java <nl> ppp CascadingDeleteInterceptor . java <nl> - IFhirResourceDao dao = myDaoRegistry . getResourceDao(nextSource . getResourceType()) ; <nl> - IBaseResource resource = dao . read(nextSource) ; <nl> - HookParams params = new HookParams() <nl> -  . add(RequestDetails . class, theRequest) <nl> -  . addIfMatchesType(ServletRequestDetails . class, theRequest) <nl> -  . add(DeleteConflictList . class, theConflictList) <nl> -  . add(IBaseResource . class, resource) ; <nl> - JpaInterceptorBroadcaster . doCallHooks(myInterceptorBroadcaster, theRequest, Pointcut . STORAGE_CASCADE_DELETE, params) ; <nl> - ourLog . info(""Have delete conflict {} Cascading delete"", next) ; <nl> - dao . delete(nextSource, theRequest) ; <nl>",fix to cascade delete,0
f05d212a406e7ba311ce2e55ad69ce783f6bdd3a,2019-08-01 17:22:18-04:00,"mmm HapiFhirJpaMigrationTasks . java <nl> ppp HapiFhirJpaMigrationTasks . java <nl> - version . onTable(""TRM_VALUESET"") <nl> -  . renameColumn(""NAME"", ""VSNAME"", true, true) ; <nl> - termValueSetTable . addColumn(""EXPANSION_STATUS"") . nonNullable() . type(BaseTableColumnTypeTask . ColumnTypeEnum . STRING, TermValueSet . MAX_EXPANSION_STATUS_LENGTH) ; <nl> - termValueSetTable <nl> + version . onTable(""TRM_VALUESET"") <nl> +  . renameColumn(""NAME"", ""VSNAME"", true, true) ; <nl> + Builder . BuilderWithTableName termValueSetTableChange = version . onTable(""TRM_VALUESET"") ; <nl> + termValueSetTableChange . addColumn(""EXPANSION_STATUS"") . nonNullable() . type(BaseTableColumnTypeTask . ColumnTypeEnum . STRING, TermValueSet . MAX_EXPANSION_STATUS_LENGTH) ; <nl> + termValueSetTableChange <nl>",fix a data migration error khs & dm,1
7d62064dc0552ced32743dbe146df8720acee4ce,2019-08-11 08:25:41-04:00,mmm SubscriptionLoader . java <nl> ppp SubscriptionLoader . java <nl> - @Autowired <nl> + @Autowired(required = false) <nl> - if (!myDaoRegistry . isResourceTypeSupported("Subscription")) { <nl> + if (myDaoRegistry != null && !myDaoRegistry . isResourceTypeSupported("Subscription")) { <nl>,do not require a daoregistry,0
4afa55ea260e136a83ea40568d7757619fdb68c0,2019-08-22 08:49:34-04:00,mmm BaseConfig . java <nl> ppp BaseConfig . java <nl> + import ca . uhn . fhir . jpa . search . cache . DatabaseSearchResultCacheSvcImpl ; <nl> + import ca . uhn . fhir . jpa . search . cache . ISearchResultCacheSvc ; <nl> + @Bean <nl> + public ISearchResultCacheSvc searchResultCacheSvc() { <nl> + return new DatabaseSearchResultCacheSvcImpl() ; <nl> + } <nl> mmm BaseHapiFhirDao . java <nl> ppp BaseHapiFhirDao . java <nl> + import ca . uhn . fhir . jpa . search . cache . ISearchResultCacheSvc ; <nl> - private ISearchDao mySearchDao ; <nl> + private ISearchResultCacheSvc mySearchResultCacheSvc <nl>,initial commit not yet compile,1
073d2a45a4b40223aeae3177eb7807dc299f226d,2019-08-26 14:26:38-04:00,"mmm LoincHierarchyHandler . java <nl> ppp LoincHierarchyHandler . java <nl> + import ca . uhn . fhir . jpa . term . IHapiTerminologyLoaderSvc ; <nl> + parent . addPropertyCoding( <nl> + ""child"", <nl> + IHapiTerminologyLoaderSvc . LOINC_URI, <nl> + child . getCode(), <nl> + child . getDisplay()) ; <nl> + child . addPropertyCoding( <nl> + ""parent"", <nl> + IHapiTerminologyLoaderSvc . LOINC_URI, <nl> + parent . getCode(), <nl> + parent . getDisplay()) ; <nl> mmm TerminologyLoaderSvcLoincTest . java <nl> ppp TerminologyLoaderSvcLoincTest . java <nl> + import ca . uhn . fhir . jpa . entity . TermConceptProperty ; <nl> + <nl>",multiaxial hierarchy support be implement ; we not populate parent and child property,0
02a896f31e385825a584f8293a8523cb96220339,2019-09-02 21:28:51-04:00,"mmm HapiTerminologySvcDstu3 . java <nl> ppp HapiTerminologySvcDstu3 . java <nl> + import ca . uhn . fhir . util . ValidateUtil ; <nl> + ValidateUtil . isNotNullOrThrowUnprocessableEntity(theValueSet, ""ValueSet must not be null"") ; <nl> - org . hl7 . fhir . r4 . model . Coding codingR4 = new org . hl7 . fhir . r4 . model . Coding(coding . getSystem(), coding . getCode(), coding . getDisplay()) ; <nl> + org . hl7 . fhir . r4 . model . Coding codingR4 = null ; <nl> + if (coding != null) { <nl> + codingR4 = new org <nl>",fix npe for valueset operation validate-code when coding and/or codeableconcept be null for dstu3/r5,1
7d162c50db7c493589b7436f959b2fcb1e3aba67,2019-09-05 14:47:04-04:00,"mmm ResourceParameter . java <nl> ppp ResourceParameter . java <nl> - encoding = EncodingEnum . detectEncodingNoDefault(body) ; <nl> - if (encoding == null) { <nl> - String msg = ctx . getLocalizer() . getMessage(ResourceParameter . class, ""noContentTypeInRequest"", restOperationType) ; <nl> - throw new InvalidRequestException(msg) ; <nl> - } <nl> - requestReader = new InputStreamReader(new ByteArrayInputStream(theRequest . loadRequestContents()), charset) ; <nl> + String msg = ctx . getLocalizer() . getMessage(ResourceParameter . class, ""noContentTypeInRequest"", restOperationType) ; <nl> + throw new InvalidRequestException(msg) ; <nl> mmm CreateR4Test . java <nl> ppp CreateR4Test . java <nl> + @Test <nl> + public void testCreateFailsIfNoContentTypeProvided() throws <nl>",do not guess content type for create/put,0
718b2c793dbf770c9272b7f3af61979156d0aaff,2019-10-01 11:22:09-04:00,"mmm SubscriptionChannelRegistry . java <nl> ppp SubscriptionChannelRegistry . java <nl> + if (!myModelConfig . isSubscriptionMatchingEnabled()) { <nl> + return ; <nl> + } <nl> + ourLog . info(""Removing subscription {} from channel {}"", theActiveSubscription . getId() ,channelName) ; <nl> - ourLog . info(""Channels: {}"", size()) ; <nl> + ourLog . info(""{} Channels: {}"", this, size()) ; <nl>",fix asymmetry between add and remove,1
1b5528a9982a21812c3d7a4aae4b36f6c453b203,2019-10-03 15:06:14-04:00,"mmm BaseHapiFhirDao . java <nl> ppp BaseHapiFhirDao . java <nl> - protected TagList getTags(RequestDetails theRequest, Class<? extends IBaseResource> theResourceType, IIdType theResourceId) { <nl> - String resourceName = null ; <nl> - if (theResourceType != null) { <nl> - resourceName = toResourceName(theResourceType) ; <nl> - if (theResourceId != null && theResourceId . hasVersionIdPart()) { <nl> - IFhirResourceDao<? extends IBaseResource> dao = getDao(theResourceType) ; <nl> - BaseHasResource entity = dao . readEntity(theResourceId, theRequest) ; <nl> - TagList retVal = new TagList() ; <nl> - for (BaseTag next : entity . getTags()) { <nl> - retVal . add(next . getTag() . toTag()) <nl>",fix compile error,1
836fac9a302594b0c032bb2c6c040921c2856ea4,2019-10-03 15:49:03-04:00,"mmm PersistedJpaBundleProvider . java <nl> ppp PersistedJpaBundleProvider . java <nl> + import ca . uhn . fhir . jpa . util . InterceptorUtil ; <nl> - import java . util . stream . Collectors ; <nl> - if (resources . size() > 0) { <nl> - SimplePreResourceShowDetails accessDetails = new SimplePreResourceShowDetails(resources) ; <nl> - HookParams params = new HookParams() <nl> -  . add(IPreResourceShowDetails . class, accessDetails) <nl> -  . add(RequestDetails . class, myRequest) <nl> -  . addIfMatchesType(ServletRequestDetails . class, myRequest) ; <nl> - JpaInterceptorBroadcaster . doCallHooks(myInterceptorBroadcaster, myRequest, Pointcut . STORAGE_PRESHOW_RESOURCES, params) ; <nl> - resources = <nl>",ensure that jpa preshow interceptor broadcast do not include expunged,1
3dfb6959c14c7c2dddf16a0b4bdcb565870916ed,2019-10-29 11:35:26-04:00,"mmm FhirResourceDaoCodeSystemDstu3 . java <nl> ppp FhirResourceDaoCodeSystemDstu3 . java <nl> + if (!retVal . isUnchangedInCurrentOperation()) { <nl> - CodeSystem csDstu3 = (CodeSystem) theResource ; <nl> + CodeSystem csDstu3 = (CodeSystem) theResource ; <nl> - org . hl7 . fhir . r4 . model . CodeSystem cs = VersionConvertor_30_40 . convertCodeSystem(csDstu3) ; <nl> - addPidToResource(theEntity, cs) ; <nl> + org . hl7 . fhir . r4 . model . CodeSystem cs = VersionConvertor_30_40 . convertCodeSystem(csDstu3) ; <nl> + addPidToResource(theEntity, cs) ; <nl> - myTerminologyCodeSystemStorageSvc . storeNewCodeSystemVersionIfNeeded(cs, theEntity) ; <nl> + myTerminologyCodeSystemStorageSvc . storeNewCodeSystemVersionIfNeeded(cs, theEntity) ; <nl> + } <nl> mmm <nl>",do not reload terminology resource when nothing have change,1
007cfaf00ef3f63dbf67e8f1494eb449053e6d37,2019-10-30 08:38:39-04:00,"mmm BaseTermReadSvcImpl . java <nl> ppp BaseTermReadSvcImpl . java <nl> - throw new InvalidRequestException(""Unknown code system: "" + system) ; <nl> + String msg = myContext . getLocalizer() . getMessage(BaseTermReadSvcImpl . class, ""expansionRefersToUnknownCs"", system) ; <nl> + ourLog . warn(msg) ; <nl> + theValueSetCodeAccumulator . addMessage(msg) ; <nl> + return false ; <nl> mmm IValueSetConceptAccumulator . java <nl> ppp IValueSetConceptAccumulator . java <nl> + void addMessage(String theMessage) ; <nl> mmm ValueSetConceptAccumulator . java <nl> ppp ValueSetConceptAccumulator . java <nl> + @Override <nl> + public void addMessage(String theMessage) { <nl> + } <nl> - ourLog . info(""Excluding [{}|{}] from ValueSet[{}]"", <nl>",do not error out on miss c,0
33a3ea8fcaae48c3d33fbd877957ff6839ab33ac,2019-10-30 16:23:24-04:00,"mmm BaseR5Config . java <nl> ppp BaseR5Config . java <nl> - import ca . uhn . fhir . jpa . term . * ; <nl> + import ca . uhn . fhir . jpa . term . TermLoaderSvcImpl ; <nl> + import ca . uhn . fhir . jpa . term . TermReadSvcR5 ; <nl> + import ca . uhn . fhir . jpa . term . TermVersionAdapterSvcR5 ; <nl> - return new SearchParamExtractorR5(ctx, new DefaultProfileValidationSupport(), searchParamRegistry) ; <nl> + return new SearchParamExtractorR5() ; <nl>",fix compile error,1
619a21032b572010d7b06a7809c26ff6a39d2a42,2019-11-05 17:46:33-05:00,"mmm SearchBuilder . java <nl> ppp SearchBuilder . java <nl> + List<Predicate> codePredicates = new ArrayList<>() ; <nl> - nextPredicate = theRoot . get(""myId"") . as(Long . class) . in(allOrPids) ; <nl> + codePredicates . add(theRoot . get(""myId"") . as(Long . class) . in(allOrPids)) ; <nl> + codePredicates . add(myBuilder . equal(myResourceTableRoot . get(""myResourceType""), theResourceName)) ; <nl> + nextPredicate = myBuilder . and(toArray(codePredicates)) ; <nl> - nextPredicate = theRoot . get(""myId"") . as(Long . class) . in(allOrPids) . not() ; <nl> + codePredicates . add(theRoot . get(""myId"") . as(Long . class) . in(allOrPids) . not()) ; <nl> + codePredicates <nl>",fix to address _filter-based _id retrieval not be restrict to the specify resource type,1
aa0301084bae8d1640e84e9b4b471f03163c2cf5,2019-11-12 14:35:49-05:00,"mmm IContextValidationSupport . java <nl> ppp IContextValidationSupport . java <nl> - CodeValidationResult<CDCT, IST> validateCode(FhirContext theContext, String theCodeSystem, String theCode, String theDisplay, String theValueSetUrl) ; <nl> + CodeValidationResult validateCode(FhirContext theContext, String theCodeSystem, String theCode, String theDisplay, String theValueSetUrl) ; <nl> + default CodeValidationResult validateCodeInValueSet(FhirContext theContext, String theCodeSystem, String theCode, String theDisplay, @Nonnull IBaseResource theValueSet) { return null ; } <nl> - abstract class CodeValidationResult<CDCT, IST> { <nl> - private CDCT myDefinition ; <nl> + class CodeValidationResult { <nl> + private IBase myDefinition ; <nl> - private IST mySeverity ; <nl> + private Enum mySeverity ; <nl> + private String myDisplay <nl>",do not succeed validation on unknown codesystem,1
2054b409ff73867dbaffb2a0c86ee24a39473de7,2019-12-10 16:47:50-05:00,"mmm GenericClient . java <nl> ppp GenericClient . java <nl> - Z resp = invokexClient(myContext, theHandler, theInvocation, myParamEncoding, myPrettyPrint, myQueryLogRequestAndResponse || myLogRequestAndResponse, mySummaryMode, mySubsetElements, myCacheControlDirective, myCustomAcceptHeaderValue, myCustomHeaderValues) ; <nl> + Z resp = invokeClient(myContext, theHandler, theInvocation, myParamEncoding, myPrettyPrint, myQueryLogRequestAndResponse || myLogRequestAndResponse, mySummaryMode, mySubsetElements, myCacheControlDirective, myCustomAcceptHeaderValue, myCustomHeaderValues) ; <nl> mmm SecurityInterceptors . java <nl> ppp SecurityInterceptors . java <nl> + import ca . uhn . fhir . interceptor . api . Hook ; <nl> + import ca . uhn . fhir . interceptor . api . Interceptor ; <nl> + import ca . uhn . fhir . interceptor . api <nl>",fix compile error,1
2ca015b25678225c62e1445b7b3d5eba1616746a,2019-12-11 08:45:25-05:00,mmm GenericClientDstu2Test . java <nl> ppp GenericClientDstu2Test . java <nl> - public void registerInterceptor(IClientInterceptor theInterceptor) { <nl> + public void registerInterceptor(Object theInterceptor) { <nl> - public void unregisterInterceptor(IClientInterceptor theInterceptor) { <nl> + public void unregisterInterceptor(Object theInterceptor) { <nl>,fix compile error,1
0dde239696d5c46ea774103c896940cd72f8361c,2019-12-13 15:12:59-05:00,"mmm JdbcUtils . java <nl> ppp JdbcUtils . java <nl> - public boolean equals(BaseTableColumnTypeTask . ColumnTypeEnum theColumnType, Long theColumnLength) { <nl> - return myColumnTypeEnum == theColumnType && (myLength == null || myLength . equals(theColumnLength)) ; <nl> + public boolean equals(BaseTableColumnTypeTask . ColumnTypeEnum theTaskColumnType, Long theTaskColumnLength) { <nl> + ourLog . debug(""Comparing existing {} {} to new {} {}"", myColumnTypeEnum, myLength, theTaskColumnType, theTaskColumnLength) ; <nl> + return myColumnTypeEnum == theTaskColumnType && (theTaskColumnLength == null || theTaskColumnLength . equals(myLength)) ; <nl> + ourLog . debug(""Unable to find column {} in table {} . "", theColumnName, theTableName) ; <nl> mmm ModifyColumnTask . <nl>",migration task do not compare length if no length be specify in the task,1
f9b8567a3a4e97abd1e48975a5f678740253a0f9,2019-12-17 19:28:07-05:00,"mmm SchedulerServiceImplTest . java <nl> ppp SchedulerServiceImplTest . java <nl> - await() . until(() -> (CountingJob . ourCount, greaterThan(3)) ; <nl> + await() . until(() -> CountingJob . ourCount, greaterThan(3)) ; <nl> - await() . until(() -> (CountingJob . ourCount, greaterThanOrEqualTo(1)) ; <nl> + await() . until(() -> CountingJob . ourCount, greaterThanOrEqualTo(1)) ; <nl>",fix compile error,1
ba0048aade3f30aa4dc9983a854820b12f4b5770,2020-01-25 17:48:26-05:00,mmm TermConcept . java <nl> ppp TermConcept . java <nl> - private Collection<TermConceptParentChildLink> myParents ; <nl> + private List<TermConceptParentChildLink> myParents ; <nl> - public Collection<TermConceptParentChildLink> getParents() { <nl> + public List<TermConceptParentChildLink> getParents() { <nl> mmm TermCodeSystemStorageSvcImpl . java <nl> ppp TermCodeSystemStorageSvcImpl . java <nl> - import ca . uhn . fhir . jpa . model . cross . ResourcePersistentId ; <nl> - import ca . uhn . fhir . jpa . dao . data . * ; <nl> + import ca . uhn . fhir . jpa . dao . data . IResourceTableDao ; <nl> + import ca . <nl>,resolve memory leak,1
5f30bdb27b42c93f0d048d62a765ce012fef6b96,2020-02-04 17:00:56-05:00,"mmm FlywayMigrator . java <nl> ppp FlywayMigrator . java <nl> + import ca . uhn . fhir . jpa . migrate . taskdef . InitializeSchemaTask ; <nl> - theTasks . forEach(this::addTask) ; <nl> + if (""true"" . equals(System . getProperty(""unit_test_mode""))) { <nl> + theTasks . stream() . filter(task -> task instanceof InitializeSchemaTask) . forEach(this::addTask) ; <nl> + } else { <nl> + theTasks . forEach(this::addTask) ; <nl> + } <nl> mmm BaseTask . java <nl> ppp BaseTask . java <nl> - logInfo(ourLog, ""SQL \""{}\"" returned {}"", theSql, changesCount) ; <nl> + if (!""true"" . equals(System . getProperty(""unit_test_mode""))) { <nl> <nl>",not sure this be go to work yet,0
a05c4ce9ebd86828cbd4c4eafe78da8272d777c0,2020-02-19 17:46:54-05:00,"mmm TermCodeSystemStorageSvcImpl . java <nl> ppp TermCodeSystemStorageSvcImpl . java <nl> - Set<TermConcept> parentConcepts = new HashSet<>() ; <nl> - if (!theParentCodes . isEmpty()) { <nl> - parentDescription = ""["" + String . join("", "", theParentCodes) + ""]"" ; <nl> - for (String nextParentCode : theParentCodes) { <nl> - Optional<TermConcept> nextParentOpt = myConceptDao . findByCodeSystemAndCode(theCsv, nextParentCode) ; <nl> - if (nextParentOpt . isPresent() == false) { <nl> - throw new InvalidRequestException(""Unable to add code \"""" + nextCodeToAdd + ""\"" to unknown parent: "" + nextParentCode) ; <nl> - } <nl> - parentConcepts . add(nextParentOpt . get()) ; <nl> - } <nl>",do not thrash delta link,0
a39ac886af361c1573ea8dffbcee4337784fd160,2020-03-13 18:43:43-07:00,"mmm IdHelperService . java <nl> ppp IdHelperService . java <nl> - @Nonnull <nl> - public ResourcePersistentId translateForcedIdToPid(IIdType theId, RequestDetails theRequestDetails) { <nl> - return translateForcedIdToPid(theId . getResourceType(), theId . getIdPart(), theRequestDetails) ; <nl> - } <nl> -  . filter(t -> isValidPid(t)) <nl> -  . map(t -> t . getIdPartAsLong()) <nl> -  . map(t -> new ResourcePersistentId(t)) <nl> -  . forEach(t -> retVal . add(t)) ; <nl> +  . filter(IdHelperService::isValidPid) <nl> +  . map(IIdType::getIdPartAsLong) <nl> +  . map(ResourcePersistentId::new) <nl> +  . forEach(retVal::add) ; <nl>",fix error while resolve rebase,1
3225075f9eaddecac344a64727fee1094c242640,2020-04-21 15:28:28-04:00,mmm JpaStorageServices . java <nl> ppp JpaStorageServices . java <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + import java . util . Map ; <nl> + import java . util . Set ; <nl> + import java . util . TreeSet ; <nl> + import java . util . stream . Collectors ; <nl> + import static ca . uhn . fhir . rest . api . Constants . PARAM_FILTER ; <nl> + private static final Logger ourLog = LoggerFactory . getLogger(JpaStorageServices . class) ; <nl> + <nl>,fix graphql error,1
99b9ec0b1cb89c7eb819b9331a9e17d7b3cac03c,2020-04-22 09:57:52-04:00,mmm JpaStorageServicesTest . java <nl> ppp JpaStorageServicesTest . java <nl> + import ca . uhn . fhir . jpa . api . config . DaoConfig ; <nl> - import ca . uhn . fhir . jpa . dao . DaoConfig ; <nl>,fix compilation error,1
31f86953df0d40f936ed98178e3050f85bf0ec80,2020-05-01 13:57:44-04:00,mmm JaxRsMethodBindings . java <nl> ppp JaxRsMethodBindings . java <nl> + import java . util . List ; <nl> - LinkedHashSet<Method> declaredMethodsForCurrentProvider = ReflectionUtil . getDeclaredMethods(theProviderClass) ; <nl> + List<Method> declaredMethodsForCurrentProvider = ReflectionUtil . getDeclaredMethods(theProviderClass) ; <nl>,fix compile error,1
79a064dfd91dd1cc96cc019f1872c9876c440593,2020-05-15 05:36:12-04:00,mmm SearchBuilder . java <nl> ppp SearchBuilder . java <nl> - import ca . uhn . fhir . jpa . dao . predicate . QueryRoot ; <nl> + import ca . uhn . fhir . jpa . dao . predicate . querystack . QueryStack ; <nl> - import ca . uhn . fhir . rest . api . server . storage . ResourcePersistentId ; <nl> + import ca . uhn . fhir . rest . api . server . storage . ResourcePersistentId ; <nl> - import javax . persistence . criteria . JoinType ; <nl> + import java . <nl>,optimize chain sql path,1
5cc77b78d48797949357138b5814153538dfaffd,2020-05-26 18:09:54-04:00,mmm BaseHapiFhirResourceDaoObservation . java <nl> ppp BaseHapiFhirResourceDaoObservation . java <nl> + import ca . uhn . fhir . interceptor . model . RequestPartitionId ; <nl> + import ca . uhn . fhir . jpa . partition . IRequestPartitionHelperSvc ; <nl> + import ca . uhn . fhir . model . api . IQueryParameterType ; <nl> + import ca . uhn . fhir . rest . api . server . storage . ResourcePersistentId ; <nl> + import ca . uhn . fhir . rest . param . ReferenceParam ; <nl> + import org . springframework . beans . factory . <nl>,fix problem with result of chunked query be incorrectly sort,1
558f419955e4cc0322669113a830d7692fe4a9c1,2020-06-05 12:21:09-04:00,"mmm EmpiLink . java <nl> ppp EmpiLink . java <nl> - import org . hibernate . annotations . OptimisticLock ; <nl> + public boolean isPossibleDuplicate() { <nl> + return myMatchResult == EmpiMatchResultEnum . POSSIBLE_DUPLICATE ; <nl> + } <nl> mmm EmpiLinkSvcImpl . java <nl> ppp EmpiLinkSvcImpl . java <nl> - public void updateLink(IAnyResource thePerson, IAnyResource theResource, EmpiMatchResultEnum theMatchResult, EmpiLinkSourceEnum theLinkSource, EmpiTransactionContext theEmpiTransactionContext) { <nl> - IIdType resourceId = theResource . getIdElement() . toUnqualifiedVersionless() ; <nl> - validateRequestIsLegal(thePerson, theResource, theMatchResult, theLinkSource) ; <nl> + public void updateLink(IAnyResource thePerson, IAnyResource theTarget, EmpiMatchResultEnum theMatchResult, EmpiLinkSourceEnum theLinkSource, EmpiTransactionContext theEmpiTransactionContext) { <nl> + IIdType <nl>",empi 54 not duplicate,0
6259eada3c92d0975fb60449b47e4b63dfead021,2020-07-03 13:18:48-07:00,"mmm IResourceExpungeService . java <nl> ppp IResourceExpungeService . java <nl> - void expungeCurrentVersionOfResources(RequestDetails theRequestDetails, List<Long> thePartition, AtomicInteger theRemainingCount) ; <nl> + void expungeCurrentVersionOfResources(RequestDetails theRequestDetails, List<Long> theResourceIds, AtomicInteger theRemainingCount) ; <nl> - void expungeHistoricalVersionsOfIds(RequestDetails theRequestDetails, List<Long> thePartition, AtomicInteger theRemainingCount) ; <nl> + void expungeHistoricalVersionsOfIds(RequestDetails theRequestDetails, List<Long> theResourceIds, AtomicInteger theRemainingCount) ; <nl>",fix parameter name these be not partition,1
31e9f140ad68cd3f5334f532c768dafb46c991b3,2020-07-16 09:48:58-07:00,mmm EmpiBatchSvcImpl . java <nl> ppp EmpiBatchSvcImpl . java <nl> - import ca . uhn . fhir . context . FhirContext ; <nl> - import ca . uhn . fhir . jpa . entity . EmpiTargetType ; <nl> - import ca . uhn . fhir . jpa . subscription . channel . api . ChannelProducerSettings ; <nl> - import ca . uhn . fhir . jpa . subscription . channel . api . IChannelFactory ; <nl> - import ca . uhn . fhir . jpa . subscription . channel . subscription . IChannelNamer ; <nl> - import ca . <nl>,fix operation name remove unnecessary bean,1
606b642b1eb1ad7d58a9c571507843fc72bf9895,2020-07-27 17:29:27-07:00,"mmm EmpiLinkDaoSvc . java <nl> ppp EmpiLinkDaoSvc . java <nl> - List<Long> collect = theLinks . stream() . map(EmpiLink::getPersonPid) . collect(Collectors . toList()) ; <nl> + List<Long> collect = theLinks . stream() . map(EmpiLink::getPersonPid) . distinct() . collect(Collectors . toList()) ; <nl> mmm EmpiResetSvcImpl . java <nl> ppp EmpiResetSvcImpl . java <nl> - import ca . uhn . fhir . jpa . dao . data . IResourceTableDao ; <nl> - import java . util . stream . Collectors ; <nl> - @Autowired <nl> - private IResourceTableDao myResourceTable ; <nl> - myResourceExpungeService . expungeCurrentVersionOfResources(null, longs, new AtomicInteger(longs . size())) ; <nl>",turn out expunge atomic integer do not do what i expect for historical,0
5d9d4070fb122f23d43366788ebaa36beabe5ba4,2020-08-05 09:14:40-04:00,"mmm FhirTerser . java <nl> ppp FhirTerser . java <nl> - ((IPrimitiveType<?>) theTarget) . setValueAsString(((IPrimitiveType<?>) theSource) . getValueAsString()) ; <nl> + String valueAsString = ((IPrimitiveType<?>) theSource) . getValueAsString() ; <nl> + if (isNotBlank(valueAsString)) { <nl> + ((IPrimitiveType<?>) theTarget) . setValueAsString(valueAsString) ; <nl> + } <nl> + if (theSource instanceof IBaseHasExtensions && theTarget instanceof IBaseHasExtensions) { <nl> + List<? extends IBaseExtension<?, ?>> extensions = ((IBaseHasExtensions) theSource) . getExtension() ; <nl> + for (IBaseExtension<?, ?> nextSource : extensions) { <nl> + IBaseExtension<?, ?> nextTarget = ((IBaseHasExtensions) theTarget) . addExtension() ; <nl> + cloneInto(nextSource, nextTarget, theIgnoreMissingFields) ; <nl> + } <nl> + <nl>",fix an issue with binary storage not update correctly if a retry,1
1c55d87b103778321766562bd43f44c64a1ad5e1,2020-08-30 17:11:48-04:00,"mmm ITermCodeSystemVersionDao . java <nl> ppp ITermCodeSystemVersionDao . java <nl> - List<TermCodeSystemVersion> findByCodeSystemResourcePid(@Param(""resource_id"") Long theCodeSystemResourcePid) ; <nl> + TermCodeSystemVersion findByCodeSystemResourcePid(@Param(""resource_id"") Long theCodeSystemResourcePid) ; <nl> mmm TermCodeSystemStorageSvcImpl . java <nl> ppp TermCodeSystemStorageSvcImpl . java <nl> - msg = myContext . getLocalizer() . getMessage(BaseTermReadSvcImpl . class, ""cannotCreateDuplicateCodeSystemUrl"", theSystemUri, <nl> - codeSystemVersionEntity . getResource() . getIdDt() . toUnqualifiedVersionless() . getValue()) ; <nl> + msg = myContext . getLocalizer() . getMessage(BaseTermReadSvcImpl . class, ""cannotCreateDuplicateCodeSystemUrl"", theSystemUri, codeSystemVersionEntity . getResource() . getIdDt() . toUnqualifiedVersionless() . getValue()) ; <nl> - msg = myContext . getLocalizer() . getMessage(BaseTermReadSvcImpl . class, ""cannotCreateDuplicateCodeSystemUrlAndVersion"", theSystemUri, <nl> - theSystemVersionId, codeSystemVersionEntity . <nl>",problem find in loinc loader,0
d8542899e533e9ffe3acbd48a678b0fd8a24d125,2020-09-01 09:54:50-04:00,mmm DaoSearchParamProvider . java <nl> ppp DaoSearchParamProvider . java <nl> - return theSearchParamRegistry . doRefresh(theRefreshInterval) ; <nl> + int retVal = 0 ; <nl> + if (myDaoRegistry . getResourceDao("SearchParameter") != null) { <nl> + retVal = theSearchParamRegistry . doRefresh(theRefreshInterval) ; <nl> + } <nl> + return retVal ; <nl>,do not lazy load daos,1
5e17625a1bd8cc3032abefdc41cd36aa10ab25fb,2020-09-07 18:09:01-04:00,mmm FhirResourceDaoConceptMapR4 . java <nl> ppp FhirResourceDaoConceptMapR4 . java <nl> + import org . hl7 . fhir . convertors . VersionConvertor_40_50 ; <nl> + import org . hl7 . fhir . r4 . model . Enumerations . ConceptMapEquivalence ; <nl> - translationMatch . setEquivalence(new CodeType(element . getConceptMapGroupElementTargets() . get(0) . getEquivalence() . toCode())) ; <nl> + ConceptMapEquivalence eq = element . getConceptMapGroupElementTargets() . get(0) . getEquivalence() ; <nl> + if (eq != null) { <nl> + translationMatch . setEquivalence(new CodeType(eq . toCode())) ; <nl> + } <nl> mmm FhirResourceDaoConceptMapR5 . java <nl> ppp FhirResourceDaoConceptMapR5 . java <nl> + import <nl>,fix nullpointerexception for reverse translate operation,1
4a9b853beb2558664d4e363807ff01c1c43cc49b,2020-11-10 18:00:01-05:00,"mmm EmpiLinkDaoSvc . java <nl> ppp EmpiLinkDaoSvc . java <nl> - import ca . uhn . fhir . jpa . model . entity . ResourceTable ; <nl> - import org . hl7 . fhir . instance . model . api . IAnyResource ; <nl> mmm EmpiProviderUpdateLinkR4Test . java <nl> ppp EmpiProviderUpdateLinkR4Test . java <nl> - Person person = myEmpiProviderR4 . updateLink(myVersionlessPersonId, myPatientId, NO_MATCH_RESULT, myRequestDetails) ; <nl> + Person person = (Person)myEmpiProviderR4 . updateLink(myVersionlessPersonId, myPatientId, NO_MATCH_RESULT, myRequestDetails) ; <nl>",fix compilation error,1
511696bd84876dba6a9143aa0b78cc2919b9a84a,2020-11-16 19:11:19-05:00,mmm EmpiRuleValidator . java <nl> ppp EmpiRuleValidator . java <nl> + if (theEmpiRulesJson . getMdmTypes() == null) { <nl> + throw new ConfigurationException("mdmTypes must be set to a list of resource types . ") ; <nl> + } <nl> mmm EmpiRuleValidatorTest . java <nl> ppp EmpiRuleValidatorTest . java <nl> + import ca . uhn . fhir . context . RuntimeSearchParam ; <nl> + import org . junit . jupiter . api . BeforeEach ; <nl> + import static org . mockito . Mockito . mock ; <nl> + import static org . mockito . Mockito . when ; <nl> <nl>,fix validator error message,1
f228b4a167c4f0765adc909318cb4a704f1292c8,2020-12-18 10:57:31-05:00,mmm RuntimeChildUndeclaredExtensionDefinition . java <nl> ppp RuntimeChildUndeclaredExtensionDefinition . java <nl> - if (!isSpecialization) { <nl> - if (!next . isStandardType()) { <nl> + if (!next . isStandardType()) { <nl> + continue ; <nl> + } <nl> + String qualifiedName = next . getImplementingClass() . getName() ; <nl> + if (!qualifiedName . startsWith("ca . uhn . fhir . model")) { <nl> + if (!qualifiedName . startsWith("org . hl7 . fhir")) { <nl> + } <nl> - String qualifiedName = next . getImplementingClass() . getName() ; <nl> - if (!qualifiedName . startsWith("ca . uhn . fhir . model")) { <nl> - <nl>,fix an error parse extension with a value type of uuid,1
197283824976e02f4aca214a97ffa1586e06b96e,2021-01-18 14:03:50-05:00,"mmm HapiFlywayMigrateDatabaseCommandTest . java <nl> ppp HapiFlywayMigrateDatabaseCommandTest . java <nl> + import java . util . Set ; <nl> + assertTrue(JdbcUtils . getTableNames(connectionProperties) . contains(""HFJ_SEARCH_PARM"")) ; <nl> + Set<String> indexNames =  JdbcUtils . getIndexNames(connectionProperties, ""HFJ_SEARCH_PARM"") ; <nl> + assertTrue(indexNames . contains(""IDX_SEARCHPARM_RESTYPE_SPNAME"")) ; <nl> + Set<String> foreignKeys =  JdbcUtils . getForeignKeys(connectionProperties, ""HFJ_SEARCH_PARM"", ""HFJ_RES_PARAM_PRESENT"") ; <nl> + assertTrue(foreignKeys . contains(""FK_RESPARMPRES_SPID"")) ; <nl> + indexNames = JdbcUtils . getIndexNames(connectionProperties, ""HFJ_FORCED_ID"") ; <nl> + assertTrue(indexNames . contains(""IDX_FORCEDID_TYPE_FORCEDID"")) ; <nl> + Set<String> columnNames = JdbcUtils . getColumnNames(connectionProperties, ""HFJ_RES_PARAM_PRESENT"") ; <nl> + assertTrue(columnNames . contains(""SP_ID"")) ; <nl> + Set<String> seqNames = JdbcUtils . <nl>",ensure that table index be not delete during db migration dry-run,1
078a94f1a6a1eab8e5c6fc5a9304b8590a80e983,2021-01-21 08:47:44-05:00,mmm FilesystemBinaryStorageSvcImpl . java <nl> ppp FilesystemBinaryStorageSvcImpl . java <nl> - import org . jetbrains . annotations . Nullable ; <nl> + import javax . annotation . Nullable ; <nl> mmm BaseHapiFhirResourceDao . java <nl> ppp BaseHapiFhirResourceDao . java <nl> - import org . jetbrains . annotations . NotNull ; <nl> - import org . jetbrains . annotations . Nullable ; <nl> - @NotNull <nl> + @Nonnull <nl> mmm FulltextSearchSvcImpl . java <nl> ppp FulltextSearchSvcImpl . java <nl> - import ca . uhn . fhir . interceptor . model . RequestPartitionId ; <nl> - import ca . uhn . <nl>,fix nonnull annotation,1
0e314a93826b5f1c905f755fd01b2117dcd19687,2021-02-22 15:09:59-05:00,mmm SearchParamRegistryImpl . java <nl> ppp SearchParamRegistryImpl . java <nl> + import ca . uhn . fhir . rest . server . exceptions . ResourceNotFoundException ; <nl> + import java . util . ArrayList ; <nl> - import java . util . stream . Collectors ; <nl> - private static long REFRESH_INTERVAL = DateUtils . MILLIS_PER_HOUR ; <nl> + private static final long REFRESH_INTERVAL = DateUtils . MILLIS_PER_HOUR ; <nl> - private volatile JpaSearchParamCache myJpaSearchParamCache = new JpaSearchParamCache() ; <nl> + private final JpaSearchParamCache myJpaSearchParamCache = new JpaSearchParamCache() ; <nl> - List<IBaseResource> searchParams = theResourceIds . stream() . map(id <nl>,fix searchparam not find failure at startup,1
01b1210b8a1b67809ae50699f53937ba2e79cf5d,2021-03-11 15:38:45-05:00,"mmm AddressValidatingInterceptor . java <nl> ppp AddressValidatingInterceptor . java <nl> + ourLog . debug(""Validated address {}"", validationResult) ; <nl> + ourLog . warn(""Unable to validate address"", ex) ; <nl> mmm AddressValidationResult . java <nl> ppp AddressValidationResult . java <nl> + @Override <nl> + public String toString() { <nl> + return <nl> + ""  isValid="" myIsValid + <nl> + "", validatedAddressString='"" myValidatedAddressString '\'' + <nl> + "", validationResults="" myValidationResults '\'' + <nl> + "", rawResponse='"" myRawResponse '\'' + <nl> + "", myValidatedAddress='"" myValidatedAddress '\'' ; <nl> + } <nl> mmm LoquateAddressValidator . java <nl> ppp LoquateAddressValidator . java <nl> <nl>",fix npes on validation,1
d1c2d839d187b0820e3c38658a2fef889a908dd3,2021-03-22 10:29:03-04:00,"mmm CascadingDeleteInterceptor . java <nl> ppp CascadingDeleteInterceptor . java <nl> - IBaseResource resource = dao . read(nextSource) ; <nl> + IBaseResource resource = dao . read(nextSource, theRequest) ; <nl> mmm CascadingDeleteInterceptorTest . java <nl> ppp CascadingDeleteInterceptorTest . java <nl> + import ca . uhn . fhir . jpa . api . dao . IFhirResourceDao ; <nl> + import ca . uhn . fhir . rest . api . server . RequestDetails ; <nl> + import org . hl7 . fhir . instance . model . api . IBaseResource ; <nl> + import org . mockito . ArgumentCaptor ; <nl> <nl>",fix nullpointerexception when perform cascade delete,1
a2ab3f55733b6e9d6a78276bd3883c4a66af9fb0,2021-03-23 19:49:06-04:00,mmm BaseMethodBinding . java <nl> ppp BaseMethodBinding . java <nl> + import ca . uhn . fhir . parser . DataFormatException ; <nl> + if (e . getTargetException() instanceof DataFormatException) { <nl> + throw (DataFormatException)e . getTargetException() ; <nl> + } <nl>,rethrow dataformatexception in case of targetinvocationexception,1
f61d52d199639bf1b7a91b9ef071317015bf8d9f,2021-04-13 09:26:05-04:00,"mmm Pointcut . java <nl> ppp Pointcut . java <nl> - ""ca . uhn . fhir . rest . api . server . storage . TransactionDetails"" <nl> + ""ca . uhn . fhir . rest . api . server . storage . TransactionDetails"", <nl> + Boolean . class . getName() <nl> - ""ca . uhn . fhir . rest . api . server . storage . TransactionDetails"" <nl> + ""ca . uhn . fhir . rest . api . server . storage . TransactionDetails"", <nl> + Boolean . class . getName() <nl> - ""ca . uhn . fhir . <nl>","should have realize that transactiondetails be an object reference , so we can not change it effectively",1
871914bd3b2a67b8c71891c2cc0f0107eb447589,2021-05-03 08:02:20-04:00,"mmm UploadTerminologyCommandTest . java <nl> ppp UploadTerminologyCommandTest . java <nl> - assertEquals(1, listOfDescriptors . size()) ; <nl> + assertEquals(2, listOfDescriptors . size()) ; <nl> mmm TerminologyUploaderProvider . java <nl> ppp TerminologyUploaderProvider . java <nl> + import ca . uhn . fhir . jpa . term . custom . PropertyHandler ; <nl> + Map<String, List<CodeSystem . ConceptPropertyComponent>> codeToProperties = new LinkedHashMap<>() ; <nl> - convertCodeSystemCodesToCsv(nextCodeSystem . getConcept(), codes, null, codeToParentCodes) ; <nl> + convertCodeSystemCodesToCsv(nextCodeSystem . getConcept(), codes, codeToProperties, null, codeToParentCodes) ; <nl> + if (codeToProperties . size() > 0) { <nl> + StringBuilder b = new StringBuilder() ; <nl> + <nl>",concept property be not be save while use the operation apply-codesystem-delta-add,1
fcc662da79270891d5c5ed10dba88f920fe71e53,2021-05-04 16:18:34-04:00,"mmm ResourceVersionSvcDaoImpl . java <nl> ppp ResourceVersionSvcDaoImpl . java <nl> + import ca . uhn . fhir . jpa . partition . SystemRequestDetails ; <nl> - List<Long> matchingIds = dao . searchForIds(theSearchParamMap, null) . stream() <nl> + List<Long> matchingIds = dao . searchForIds(theSearchParamMap, new SystemRequestDetails()) . stream() <nl> mmm IRequestPartitionHelperSvc . java <nl> ppp IRequestPartitionHelperSvc . java <nl> - RequestPartitionId determineReadPartitionForRequest(@Nullable RequestDetails theRequest, String theResourceType) ; <nl> + RequestPartitionId determineReadPartitionForRequest(RequestDetails theRequest, String theResourceType) ; <nl> - RequestPartitionId determineCreatePartitionForRequest(@Nullable RequestDetails theRequest, @Nonnull IBaseResource theResource, @Nonnull String theResourceType) ; <nl> + RequestPartitionId determineCreatePartitionForRequest(RequestDetails theRequest, @Nonnull IBaseResource theResource, @Nonnull String theResourceType) ; <nl>",fix not send request detail,1
a4856bba1799e0bce496b5f0cf6aa9c32b1706ee,2021-05-05 21:50:51-04:00,"mmm BaseJpaResourceProviderCompositionDstu3 . java <nl> ppp BaseJpaResourceProviderCompositionDstu3 . java <nl> - List<IBaseResource> resourceList = bundleProvider . getResources(0, bundleProvider . size()) ; <nl> + List<IBaseResource> resourceList = bundleProvider . getAllResources() ; <nl> mmm BaseJpaResourceProviderCompositionR4 . java <nl> ppp BaseJpaResourceProviderCompositionR4 . java <nl> - List<IBaseResource> resourceList = bundleProvider . getResources(0, bundleProvider . size()) ; <nl> + List<IBaseResource> resourceList = bundleProvider . getAllResources() ; <nl> mmm BaseJpaResourceProviderCompositionR5 . java <nl> ppp BaseJpaResourceProviderCompositionR5 . java <nl> - IBundleProvider bundleProvider = ((IFhirResourceDaoComposition<Composition>) getDao()) . getDocumentForComposition(theServletRequest, theId, theCount, theOffset,theLastUpdated, theSortSpec, theRequestDetails) ; <nl> - List<IBaseResource> resourceList = bundleProvider . getResources(0, bundleProvider . size()) ; <nl> <nl>","fix ibundleprovider.getresources ( from , to ) throw a npe",1
40ecafcd313563c68a504d36c46bff8944d236c8,2021-05-16 21:51:23-04:00,"mmm UrlUtil . java <nl> ppp UrlUtil . java <nl> + import org . apache . commons . text . StringSubstitutor ; <nl> - matchUrl = matchUrl . replace(""|"", ""%7C"") ; <nl> - matchUrl = matchUrl . replace(""=>="", ""=%3E%3D"") ; <nl> - matchUrl = matchUrl . replace(""=<="", ""=%3C%3D"") ; <nl> - matchUrl = matchUrl . replace(""=>"", ""=%3E"") ; <nl> - matchUrl = matchUrl . replace(""=<"", ""=%3C"") ; <nl> + final String[] searchList = new String[]{ <nl> + ""+"", <nl> + ""|"", <nl> + ""=>="", <nl> + ""=<="", <nl> + ""=>"", <nl> + ""=<"" <nl> + } ; <nl> + <nl>",do not unescape plus in match url,1
9d039e095b6718a53b9194152647fe530e51ae7f,2021-05-18 11:12:59-04:00,mmm DeleteExpungeService . java <nl> ppp DeleteExpungeService . java <nl> - String targetResourceId = myIdHelper . resourceIdFromPidOrThrowException(firstConflict . getSourceResourcePid()) . toVersionless() . getValue() ; <nl> + String targetResourceId = myIdHelper . resourceIdFromPidOrThrowException(firstConflict . getTargetResourcePid()) . toVersionless() . getValue() ; <nl>,fix copy paste error shame,1
0b05c730fb55a51ac97a7f59de66f9ad314ba131,2021-06-19 00:00:16-04:00,mmm RestHookActivatesPreExistingSubscriptionsR4Test . java <nl> ppp RestHookActivatesPreExistingSubscriptionsR4Test . java <nl> + import ca . uhn . fhir . jpa . subscription . submit . interceptor . SubscriptionMatcherInterceptor ; <nl> + import ca . uhn . fhir . test . utilities . JettyUtil ; <nl> - import org . hl7 . fhir . r4 . model . * ; <nl> - import org . junit . jupiter . api . * ; import static org . hamcrest . MatcherAssert . assertThat ; <nl> + import org . hl7 . fhir . r4 . model . CodeableConcept ; <nl> + import <nl>,do not create a channel if subscription be disable,1
d78fef67329bebdae8f81fecc1cbbc53630243ef,2021-07-22 08:34:28-04:00,mmm IdHelperService . java <nl> ppp IdHelperService . java <nl> + import com . google . common . annotations . VisibleForTesting ; <nl> - private RequestPartitionId replaceDefault(RequestPartitionId theRequestPartitionId) { <nl> + RequestPartitionId replaceDefault(RequestPartitionId theRequestPartitionId) { <nl> - if (theRequestPartitionId . hasDefaultPartitionId()) { <nl> + if (!theRequestPartitionId . isAllPartitions() && theRequestPartitionId . hasDefaultPartitionId()) { <nl> + @VisibleForTesting <nl> + void setPartitionSettingsForUnitTest(PartitionSettings thePartitionSettings) { <nl> + myPartitionSettings = thePartitionSettings ; <nl> + } <nl> new file <nl> ppp IdHelperServiceTest . java <nl> + package ca . uhn . fhir . jpa . dao . index ; <nl> + import ca . <nl>,fix npe in idhelperservice,1
d85a4e5ec24a27646b86487414e20ea4d36641f4,2021-08-04 16:08:38-04:00,"mmm SearchBuilder . java <nl> ppp SearchBuilder . java <nl> - nextParamName = UrlUtil . escapeUrlParam(nextParamName) ; <nl> + if (nextValues . isEmpty()) { <nl> + ourLog . error(""query parameter {} is unexpectedly empty .  Encountered while considering {} index for {}"", nextParamName, comboParam . getName(), theRequest . getCompleteUrl()) ; <nl> + sb = null ; <nl> + break ; <nl> + } <nl> - nextOrValue = UrlUtil . escapeUrlParam(nextOrValue) ; <nl> + nextParamName = UrlUtil . escapeUrlParam(nextParamName) ; <nl> + nextOrValue = UrlUtil . escapeUrlParam(nextOrValue) ; <nl>",hack to fix a weird ioob error we can not reproduce,1
4920f0a15d907052d804b3e4154f23e4560da9c6,2021-08-13 11:01:50-04:00,mmm LoincLinguisticVariantHandler . java <nl> ppp LoincLinguisticVariantHandler . java <nl> - StringBuilder formalName = new StringBuilder() ; <nl> - formalName . append(trimToEmpty(theRecord . get("COMPONENT") + ":")) ; <nl> - formalName . append(trimToEmpty(theRecord . get("PROPERTY") + ":")) ; <nl> - formalName . append(trimToEmpty(theRecord . get("TIME_ASPCT") + ":")) ; <nl> - formalName . append(trimToEmpty(theRecord . get("SYSTEM") + ":")) ; <nl> - formalName . append(trimToEmpty(theRecord . get("SCALE_TYP") + ":")) ; <nl> - formalName . append(trimToEmpty(theRecord . get("METHOD_TYP"))) ; <nl> + StringBuilder fullySpecifiedName = new StringBuilder() ; <nl> + fullySpecifiedName . append(trimToEmpty(theRecord . get("COMPONENT") ":")) ; <nl> + fullySpecifiedName . append(trimToEmpty(theRecord . get("PROPERTY") <nl>,do not create designation of all component be empty,1
9bdef1a9fad8b372448ad5500c9258abee4c8322,2021-08-28 13:24:09-04:00,"mmm QueryStack . java <nl> ppp QueryStack . java <nl> - List<IQueryParameterType> tokens = new ArrayList<>() ; <nl> + List<IQueryParameterType> tokens = new ArrayList<>() ;  <nl> + boolean paramInverted = false ; <nl> + TokenParamModifier modifier = null ; <nl> + }  <nl> + modifier = id . getModifier() ; <nl> + if (modifier != null && modifier == TokenParamModifier . NOT) { <nl> + IQueryParameterType notToken = new TokenParam(((TokenParam) nextOr) . getSystem(), ((TokenParam) nextOr) . getValue()) ;						 <nl> + tokens . add(notToken) ; <nl> + paramInverted = true ; <nl> + } else { <nl> + <nl>",fix search of : not modifier,1
b81a61e465a0e4a730f951753246fc9110979a11,2021-09-02 21:52:37-04:00,"mmm QueryStack . java <nl> ppp QueryStack . java <nl> - predicate = new InCondition(join . getResourceIdColumn(), subSelect) . setNegate(true) ; <nl> + if (theSourceJoinColumn == null) { <nl> + predicate = new InCondition(join . getResourceIdColumn(), subSelect) . setNegate(true) ; <nl> + } else { <nl> + predicate = new InCondition(theSourceJoinColumn, subSelect) . setNegate(true) ; <nl> + } <nl> mmm ResourceLinkPredicateBuilder . java <nl> ppp ResourceLinkPredicateBuilder . java <nl> + import ca . uhn . fhir . rest . param . TokenParamModifier ; <nl> + boolean paramInverted = false ; <nl> + if (!paramInverted) { <nl> + if (((TokenParam) <nl>",fix : not modifier issue for the resource,1
cdb7ffb0d3b46731155599dadcbd71abb5d884e3,2021-09-04 01:44:07+02:00,"mmm PidToIBaseResourceProcessor . java <nl> ppp PidToIBaseResourceProcessor . java <nl> - ourLog . trace(""Loaded resources: {}"", outgoing . stream() . map(t->t . getIdElement() . getValue()) . collect(Collectors . joining("", ""))) ; <nl> + ourLog . trace(""Loaded resources: {}"", outgoing . stream() . filter(t -> t != null) . map(t -> t . getIdElement() . getValue()) . collect(Collectors . joining("", ""))) ; <nl>",fix npe in pidtoibaseresourceprocessor,1
2163e6e54870fbbbfcc01d67c6720e542d65e1b6,2021-09-10 12:36:11-07:00,"mmm IdHelperService . java <nl> ppp IdHelperService . java <nl> + import ca . uhn . fhir . rest . server . exceptions . InvalidRequestException ; <nl> - theIds . forEach(id -> Validate . isTrue(id . hasIdPart())) ; <nl> + try { <nl> + theIds . forEach(id -> Validate . isTrue(id . hasIdPart())) ; <nl> + } catch (IllegalArgumentException e) { <nl> + ourLog . error(""Illegal Argument during database access"", e) ; <nl> + throw new InvalidRequestException(""Parameter value missing in request"", e) ; <nl> + } <nl> mmm SearchCoordinatorSvcImpl . java <nl> ppp SearchCoordinatorSvcImpl . java <nl> - } <nl>",fix error that previous fix cause,0
49debec36a18b281e69016ef01d74a2debdbb465,2021-09-14 10:48:56-04:00,"mmm BaseTransactionProcessor . java <nl> ppp BaseTransactionProcessor . java <nl> + import org . apache . commons . lang3 . StringUtils ; <nl> - conditionalUrlToIdMap . put(matchUrl, outcome . getId()) ; <nl> - res . setId(outcome . getId()) ; <nl> + setConditionalUrlToBeValidatedLater(conditionalUrlToIdMap, matchUrl, outcome . getId()) ; <nl> + res . setId(outcome . getId()) ; <nl> - conditionalUrlToIdMap . put(matchUrl, deleteOutcome . getId()) ; <nl> + setConditionalUrlToBeValidatedLater(conditionalUrlToIdMap, matchUrl, deleteOutcome . getId()) ; <nl> - conditionalUrlToIdMap . put(matchUrl, outcome . getId()) ; <nl> + setConditionalUrlToBeValidatedLater(conditionalUrlToIdMap, matchUrl, outcome . getId()) ; <nl> - conditionalUrlToIdMap . put(matchUrl, outcome . getId()) ; <nl> <nl>",fix problem with null conditionals,1
d372371f364bd2be97da0b5222526aef2f85fb68,2021-09-20 08:51:51-04:00,"mmm BaseHapiFhirResourceDao . java <nl> ppp BaseHapiFhirResourceDao . java <nl> - import ca . uhn . fhir . jpa . search . DatabaseBackedPagingProvider ; <nl> - private HapiTransactionService myTransactionService ; <nl> + protected HapiTransactionService myTransactionService ; <nl> - private DaoMethodOutcome doCreateForPost(T theResource, String theIfNoneExist, boolean thePerformIndexing, TransactionDetails theTransactionDetails, RequestDetails theRequestDetails) { <nl> + protected DaoMethodOutcome doCreateForPost(T theResource, String theIfNoneExist, boolean thePerformIndexing, TransactionDetails theTransactionDetails, RequestDetails theRequestDetails) { <nl> mmm JpaPersistedResourceValidationSupport . java <nl> ppp JpaPersistedResourceValidationSupport . java <nl> - return currentCSOpt . orElseThrow(() -> new ResourceNotFoundException( <nl> - ""Couldn't find current version CodeSystem for url: "" + theSystem)) ; <nl> <nl>",make sure a loinc codesystem always have a forcedid,1
bc2cd7cafc69b1cbe71d37a2316bf00eaf7a0909,2021-10-06 14:44:39+00:00,mmm BaseStorageDao . java <nl> ppp BaseStorageDao . java <nl> - Set<IPrimitiveType<String>> visited = new HashSet<>() ; <nl> - if (!visited . contains(canonical) && canonical . getValue() . startsWith(baseUrl)) { <nl> + if (canonical . getValue() . startsWith(baseUrl)) { <nl> - visited . add(canonical) ; <nl>,premature optimization be the root of all evil,0
5f672bc9e87ad0ae9b77f496fe07d60a3ad06b25,2021-10-28 07:55:46-04:00,mmm MdmMessageHandler . java <nl> ppp MdmMessageHandler . java <nl> - String resourceType = theMsg . getId(myFhirContext) . getResourceType() ; <nl> + String resourceType = theMsg . getPayloadId(myFhirContext) . getResourceType() ; <nl> mmm DaoSubscriptionMatcher . java <nl> ppp DaoSubscriptionMatcher . java <nl> - IIdType id = theMsg . getId(myCtx) ; <nl> - String resourceType = id . getResourceType() ; <nl> - String resourceId = id . getIdPart() ; <nl> + IIdType id = theMsg . getPayloadId(myCtx) ; <nl> - criteria += "&_id=" + resourceType + "/" + resourceId ; <nl> + criteria += "&_id=" id . toUnqualifiedVersionless() . getValue() <nl>,deprecate redundant baseresourcemodifiedmessage myid,1
568d39d13a91e1245205d13d80f4c84e2473ea71,2021-12-29 21:23:44+00:00,"mmm FhirValidator . java <nl> ppp FhirValidator . java <nl> + import org . apache . commons . lang3 . StringUtils ; <nl> + import static org . apache . commons . lang3 . StringUtils . isBlank ; <nl> - List<SingleValidationMessage> validationMessages = new ArrayList<>() ; <nl> + List<SingleValidationMessage> validationMessages = buildValidationMessages(validationTasks) ; <nl> + return new ValidationResult(myContext, validationMessages) ; <nl> + } <nl> + static List<SingleValidationMessage> buildValidationMessages(List<ConcurrentValidationTask> validationTasks) { <nl> + List<SingleValidationMessage> retval = new ArrayList<>() ; <nl> - String currentPath = message . getLocationString() . substring(message . getLocationString() . indexOf(' . ')) ; <nl> + String currentPath <nl>",fix an error with concurrent validation,1
3062430bc57baebb91c8fd6cb1ac28be8a00c678,2022-01-18 14:56:10-05:00,"mmm SubscriptionDeliveringRestHookSubscriber . java <nl> ppp SubscriptionDeliveringRestHookSubscriber . java <nl> + import static ca . uhn . fhir . jpa . subscription . util . SubscriptionUtil . createRequestDetailForPartitionedRequest ; <nl> - IBundleProvider searchResults = dao . search(payloadSearchMap) ; <nl> + IBundleProvider searchResults = dao . search(payloadSearchMap, createRequestDetailForPartitionedRequest(theSubscription)) ; <nl> - return dao . read(payloadId . toVersionless(),  systemRequestDetails, theDeletedOK) ; <nl> + return dao . read(payloadId . toVersionless(), systemRequestDetails, theDeletedOK) ; <nl> mmm DaoSubscriptionMatcher . java <nl> ppp DaoSubscriptionMatcher . java <nl> - import ca . uhn . fhir . jpa . model . entity . PartitionablePartitionId ; <nl> <nl>",rest hook subscription with payload search criterion be not get trigger,1
62966de58b3d084f210cc4c8ddee6ae910b14016,2022-01-21 14:29:24-05:00,"mmm RestfulClientFactory . java <nl> ppp RestfulClientFactory . java <nl> + import javax . annotation . concurrent . GuardedBy ; <nl> - case NEVER: <nl> - break ; <nl> - case ONCE: <nl> - if (!myValidatedServerBaseUrls . contains(serverBase)) { <nl> - validateServerBase(serverBase, theHttpClient, theClient) ; <nl> - } <nl> - break ; <nl> + case NEVER: <nl> + break ; <nl> + case ONCE: <nl> + if (myValidatedServerBaseUrls . contains(serverBase)) { <nl> + break ; <nl> + } <nl> + synchronized (myValidatedServerBaseUrls) { <nl> + if (!myValidatedServerBaseUrls . contains(serverBase)) { <nl> + myValidatedServerBaseUrls . add(serverBase) ; <nl> + validateServerBase(serverBase, <nl>",issue 3299 conformance validation be happen once per client endpoint thread instead a just once per client endpoint,1
a11d72ba51c563cc61dcc9f7b581778d538c7f53,2022-01-24 11:53:21-05:00,mmm SearchCoordinatorSvcImpl . java <nl> ppp SearchCoordinatorSvcImpl . java <nl> + bundleProvider . setPreferredPageSize(theParams . getCount()) ; <nl> mmm DaoRegistryGraphQLStorageServicesTest . java <nl> ppp DaoRegistryGraphQLStorageServicesTest . java <nl> + import ca . uhn . fhir . context . FhirContext ; <nl> + import ca . uhn . fhir . rest . server . RestfulServer ; <nl> - import ca . uhn . fhir . rest . server . exceptions . UnprocessableEntityException ; <nl> + import java . util . HashMap ; <nl> + import java . util . Map ; <nl> + import static ca . uhn . fhir <nl>,graph ql search can not be execute when number of match result exceeds default page size,1
3531d9b4fc2bbb765a5ec6b5f2231a8ac7763ff7,2022-02-09 20:27:40-05:00,mmm ExtendedLuceneSearchBuilder . java <nl> ppp ExtendedLuceneSearchBuilder . java <nl> -  . anyMatch(this::isParamSupported) ; <nl> +  . anyMatch(this::isParamTypeSupported) ; <nl> - private boolean isParamSupported(IQueryParameterType param) { <nl> + private boolean isParamTypeSupported(IQueryParameterType param) { <nl> mmm FhirResourceDaoR4SearchWithElasticSearchIT . java <nl> ppp FhirResourceDaoR4SearchWithElasticSearchIT . java <nl> + import ca . uhn . fhir . jpa . model . entity . ModelConfig ; <nl> + import org . junit . jupiter . api . Nested ; <nl> - private boolean myContainsSettings ; <nl> - myDaoConfig . setAdvancedLuceneIndexing(true) ; <nl> - public void enableContains() { <nl> - myContainsSettings = myDaoConfig . <nl>,fix exception when contain index meet hibernate search,1
7841e578ab27ecffc5a0063b63ed8b6460395d2a,2022-02-10 14:14:41-05:00,mmm TokenAutocompleteAggregation . java <nl> ppp TokenAutocompleteAggregation . java <nl> - import java . util . Optional ; <nl> mmm TokenAutocompleteHit . java <nl> ppp TokenAutocompleteHit . java <nl> - import ca . uhn . fhir . context . FhirContext ; <nl> - import ca . uhn . fhir . rest . param . TokenParam ; <nl> - import ca . uhn . fhir . util . TerserUtil ; <nl> - import org . hl7 . fhir . instance . model . api . IBaseCoding ; <nl> mmm TokenAutocompleteSearch . java <nl> ppp TokenAutocompleteSearch . java <nl> - import <nl>,nullpointerexception rest hook subscription be not be trigger when cross partition be,1
dbc9427a05a3fed25ebd98a20aceb8eeb7635de7,2022-02-24 21:32:11+00:00,"mmm Msg . java <nl> ppp Msg . java <nl>  <nl> mmm ITermConceptDao . java <nl> ppp ITermConceptDao . java <nl> - import java . util . Collection ; <nl> + @Query(""FROM TermConcept WHERE myCodeSystem = :code_system AND myCode in (:codeList)"") <nl> + List<TermConcept> findByCodeSystemAndCodeList(@Param(""code_system"") TermCodeSystemVersion theCodeSystem, @Param(""codeList"") List<String> theCodeList) ; <nl> mmm TermConcept . java <nl> ppp TermConcept . java <nl> - import ca . uhn . fhir . i18n . Msg ; <nl> + import ca . uhn . fhir . i18n . Msg ; <nl> + import org . hibernate . search . engine . <nl>",issue 3391 2588 expand valueset regex include not work,0
c9b87d7c67220f24fddcd27fc407e8a826088ab9,2022-02-24 17:11:14-05:00,"mmm ConsentInterceptor . java <nl> ppp ConsentInterceptor . java <nl> + import ca . uhn . fhir . i18n . Msg ; <nl> + import ca . uhn . fhir . rest . server . exceptions . InvalidRequestException ; <nl> + import java . util . Arrays ; <nl> + validateParameter(theRequestDetails . getParameters()) ; <nl> + private void validateParameter(Map<String, String[]> theParameterMap) { <nl> + if (theParameterMap != null) { <nl> + if (theParameterMap . containsKey(""_total"") && Arrays . stream(theParameterMap . get(""_total"")) . anyMatch(""accurate""::equals)) { <nl> + throw new InvalidRequestException(Msg . code(2037) ""_total=accurate is not permitted on this server"") ; <nl>","get resource , response do not contain total if consent service enable",1
26784ba7c8928a35df0e4e34d6d9e0631a7d45a7,2022-03-31 18:47:15+00:00,mmm InMemoryTerminologyServerValidationSupport . java <nl> ppp InMemoryTerminologyServerValidationSupport . java <nl> - import ca . uhn . fhir . i18n . Msg ; <nl> + import ca . uhn . fhir . i18n . Msg ; <nl> + import static org . apache . commons . lang3 . StringUtils . contains ; <nl> + import static org . apache . commons . lang3 . StringUtils . substringAfter ; <nl> + import static org . apache . commons . lang3 . StringUtils . substringBefore ; <nl> + private static final String OUR_PIPE_CHARACTER = "|" ; <nl> - int versionIndex = theWantSystemUrlAndVersion <nl>,fix valueset expansion not support canonical url,1
c3f34099fbc248d34dc5265e2726114535d3b07c,2022-06-26 14:10:42-04:00,"mmm JobDefinitionRegistry . java <nl> ppp JobDefinitionRegistry . java <nl> + public <PT extends IModelJson> boolean addJobDefinitionIfNotRegistered(@Nonnull JobDefinition<PT> theDefinition) { <nl> + Optional<JobDefinition<?>> orig = getJobDefinition(theDefinition . getJobDefinitionId(), theDefinition . getJobDefinitionVersion()) ; <nl> + if (orig . isPresent()) { <nl> + return false ; <nl> + } <nl> + addJobDefinition(theDefinition) ; <nl> + return true ; <nl> + } <nl> mmm MdmBatch2Config . java <nl> ppp MdmBatch2Config . java <nl> - myJobDefinitionRegistry . addJobDefinition(jobDefinition) ; <nl> + myJobDefinitionRegistry . addJobDefinitionIfNotRegistered(jobDefinition) ; <nl>",only register mdm clear job definition if it be not register yet,0
002a7dc670b38c09300e3f3d6e7040747820efee,2022-09-07 15:52:38-04:00,mmm BaseTermReadSvcImpl . java <nl> ppp BaseTermReadSvcImpl . java <nl> + import org . hibernate . search . engine . search . query . SearchScroll ; <nl> + import org . hibernate . search . engine . search . query . SearchScrollResult ; <nl> - import java . util . concurrent . atomic . AtomicInteger ; <nl> - import java . util . function . Supplier ; <nl> - for (int i = 0 ;  ; i++) { <nl> - int queryIndex = i ; <nl> - Boolean shouldContinue = executeInNewTransactionIfNeeded(() -> { <nl> - boolean add = <nl>,issue 3419 elastic search exception while pre expand valueset with more than 10 000 concept,1
6c0c730ebcf857667a9e810804b50a68c9628468,2022-09-12 10:48:56+00:00,mmm ForceOffsetSearchModeInterceptor . java <nl> ppp ForceOffsetSearchModeInterceptor . java <nl> - private Integer myDefaultCount = 100 ; <nl> + public static final int DEFAULT_DEFAULT_COUNT = 100 ; <nl> + private Integer myDefaultCount = DEFAULT_DEFAULT_COUNT ; <nl> + if (theMap . isLoadSynchronous()) { <nl> + return ; <nl> + } <nl> mmm ForceOffsetSearchModeInterceptorTest . java <nl> ppp ForceOffsetSearchModeInterceptorTest . java <nl> + import ca . uhn . fhir . jpa . searchparam . SearchParameterMap ; <nl> + import ca . uhn . fhir . rest . api . server . IBundleProvider ; <nl> - ourRestServer . registerInterceptor(mySvc) ; <nl> + <nl>,forcedoffsetsearchmodeinterceptor should not modify the search when it be already manually mark a synchronous,1
e4a2285f30c05bd2f89a7dbf740517bc5706f6bc,2022-09-28 15:16:15+00:00,mmm BulkDataExportTest . java <nl> ppp BulkDataExportTest . java <nl> + import org . apache . commons . io . LineIterator ; <nl> + import org . hl7 . fhir . instance . model . api . IBaseResource ; <nl> + import org . hl7 . fhir . instance . model . api . IIdType ; <nl> + import java . io . IOException ; <nl> + import java . io . StringReader ; <nl> + import java . util . Set ; <nl> + import static org . apache . commons . lang3 . StringUtils . isNotBlank ; <nl>,make sure to not mix resource type in bulk export,1
fb3512df1eff3c73e2db90e25afcbc4240beadc1,2022-10-25 14:01:24-04:00,"mmm BaseHapiFhirResourceDao . java <nl> ppp BaseHapiFhirResourceDao . java <nl> + -	@Override <nl> - @Transactional <nl> - public String getCurrentVersionId(IIdType theReferenceElement) { <nl> - return Long . toString(readEntity(theReferenceElement . toVersionless(), null) . getVersion()) ; <nl> - } <nl> mmm IFhirResourceDao . java <nl> ppp IFhirResourceDao . java <nl> + import ca . uhn . fhir . rest . server . exceptions . ResourceGoneException ; <nl> + -	 * therefore can not fire any interceptors .  Use only for internal system calls <nl>",deprecate dao method that do not take a requestdetails parameter,1
62c630c546e985db73e37fc6dc75ba7a7a8182f9,2022-11-21 10:08:10-05:00,"mmm FhirSystemDaoR4Test . java <nl> ppp FhirSystemDaoR4Test . java <nl> + @Test <nl> + public void testTransactionCreateMatchUrlWithTwoMatch2() { <nl> + String methodName = ""testTransactionCreateMatchUrlWithTwoMatch"" ; <nl> + Patient p = new Patient() ; <nl> + p . addIdentifier() . setSystem(""urn:system"") . setValue(methodName) ; <nl> + IIdType id = myPatientDao . create(p, mySrd) . getId() ; <nl> + ourLog . info(""Created patient, got it: {}"", id) ; <nl> + p = new Patient() ; <nl> + p . addIdentifier() . setSystem(""urn:system"") . setValue(methodName) ; <nl> + id = myPatientDao . create(p, mySrd) . getId() ; <nl> + ourLog . info(""Created <nl>",bundle not throw an error when multiple match be find,1
028c3ed5c1f3a9dfc794e273cc152351d8295dbf,2022-11-22 12:48:06-05:00,mmm ResourceExpungeService . java <nl> ppp ResourceExpungeService . java <nl> + if(isEmptyQuery(theRemainingCount)){ <nl> + return Collections . EMPTY_LIST ; <nl> + } <nl> + if(isEmptyQuery(theRemainingCount)){ <nl> + return Collections . EMPTY_LIST ; <nl> + } <nl> - if (theRemainingCount . get() <= 0) { <nl> + if (expungeLimitReached(theRemainingCount)) { <nl> - if (theRemainingCount . get() <= 0) { <nl> + if (expungeLimitReached(theRemainingCount)) { <nl> - if (theRemainingCount . get() <= 0) { <nl> + if (expungeLimitReached(theRemainingCount)) { <nl> - ResourceTable resource = myResourceTableDao . findById(myResourceId) . orElseThrow(IllegalArgumentException::new) ; <nl> + Pageable page ; <nl> + synchronized (theRemainingCount){ <nl> + <nl>,fix expunge delete resource race condition,1
daaa92fdbc2b2f0c87a7f764566bbf434f7c4943,2022-12-11 18:19:54-05:00,"mmm DateRangeParam . java <nl> ppp DateRangeParam . java <nl> + case STARTS_AFTER: <nl> + case ENDS_BEFORE: <nl> mmm ResourceProviderSearchModifierR4Test . java <nl> ppp ResourceProviderSearchModifierR4Test . java <nl> + import java . util . Date ; <nl> + @Test <nl> + public void test_eb_and_sa_modifiers() throws Exception { <nl> + List<IIdType> obsList = createObs(10, false, ""2023-02-01"") ; <nl> + String uri = myServerBase ""/Observation?date=eb2023-02-02"" ; <nl> + List<String> ids = searchAndReturnUnqualifiedVersionlessIdValues(uri) ; <nl> + assertEquals(10, ids . size()) ; <nl> + uri = myServerBase ""/Observation?date=sa2023-01-31"" ; <nl> + ids = searchAndReturnUnqualifiedVersionlessIdValues(uri) ; <nl> + assertEquals(10, ids . size()) ; <nl> <nl>",ap sa and eb prefix be not handle correctly,1
360f32f3e44e0e937fd70b51fae217294ae3c18e,2022-12-14 12:40:53-05:00,"mmm TestUtil . java <nl> ppp TestUtil . java <nl> - ""FK_TRM_VALUESET_CONCEPT_PID"" <nl> + ""FK_TRM_VALUESET_CONCEPT_PID"", <nl> + ""FK_SEARCHINC_SEARCH"" <nl> mmm SearchInclude . java <nl> ppp SearchInclude . java <nl> - @Index(name = ""IDX_HFJ_SEARCH_INCLUDE_SRCHPID"", columnList = ""SEARCH_PID"") <nl> + @Index(name = ""FK_SEARCHINC_SEARCH"", columnList = ""SEARCH_PID"") <nl> mmm HapiFhirJpaMigrationTasks . java <nl> ppp HapiFhirJpaMigrationTasks . java <nl> -  . addIndex(""20221207 . 1"", ""IDX_HFJ_SEARCH_INCLUDE_SRCHPID"") <nl> +  . addIndex(""20221207 . 1"", ""FK_SEARCHINC_SEARCH"") <nl> -  . withColumns(""SEARCH_PID"") ; <nl> +  . withColumns(""SEARCH_PID"") <nl> +  . onlyAppliesToPlatforms(NON_AUTOMATIC_FK_INDEX_PLATFORMS) ; <nl>",fix index migration error,1
29ebb950e81e5ee1b3f2f63e8387f7ec46ffeded,2022-12-14 18:43:11-05:00,"mmm SearchParameterUtil . java <nl> ppp SearchParameterUtil . java <nl> + public static Set<String> getPatientSearchParamsForResourceType(FhirContext theFhirContext, String theResourceType) { <nl> + RuntimeResourceDefinition runtimeResourceDefinition = theFhirContext . getResourceDefinition(theResourceType) ; <nl> + List<RuntimeSearchParam> searchParams = new ArrayList<>(runtimeResourceDefinition . getSearchParamsForCompartmentName(""Patient"")) ; <nl> + RuntimeSearchParam myPatientSearchParam = runtimeResourceDefinition . getSearchParam(""patient"") ; <nl> + if (myPatientSearchParam != null) { <nl> + searchParams . add(myPatientSearchParam) ; <nl> + } <nl> + RuntimeSearchParam mySubjectSearchParam = runtimeResourceDefinition . getSearchParam(""subject"") ; <nl> + if (mySubjectSearchParam != null) { <nl> + searchParams . add(mySubjectSearchParam) ; <nl> + } <nl> + if (searchParams == null || searchParams . size() == <nl>",bulk export questionnaireresponses should get pick when author be not empty,1
6bd7f7a0e1150af3bc8ccc21e4ec823a6153afc7,2023-01-04 19:34:16+00:00,"mmm PackageInstallerSvcImpl . java <nl> ppp PackageInstallerSvcImpl . java <nl> - private void assertFhirVersionsAreCompatible(String fhirVersion, String currentFhirVersion) <nl> + protected void assertFhirVersionsAreCompatible(String fhirVersion, String currentFhirVersion) <nl> + if (!compatible && fhirVersion . startsWith(""R4"") && currentFhirVersion . startsWith(""R4"")) { <nl> + compatible = true ; <nl> + } <nl> new file <nl> ppp PackageInstallerSvcImplTest . java <nl> + package ca . uhn . fhir . jpa . packages ; <nl> + import org . elasticsearch . common . inject . Inject ; <nl> + import org . junit . jupiter . api . Test ; <nl> + public class PackageInstallerSvcImplTest <nl>",packageinstallersvcimpl say r4 be not compatible with r4b,0
a9ecc18986cb5a1c66a6271daaffd197dc5eff53,2023-01-13 08:59:44-05:00,"mmm BulkDataExportProviderTest . java <nl> ppp BulkDataExportProviderTest . java <nl> + @Test <nl> + public void testOperationExportPollStatus_POST_NonExistingId_NotFound() throws IOException { <nl> + String jobId = ""NonExisting-JobId"" ; <nl> + Parameters input = new Parameters() ; <nl> + input . addParameter(JpaConstants . PARAM_EXPORT_OUTPUT_FORMAT, new StringType(ca . uhn . fhir . rest . api . Constants . CT_FHIR_NDJSON)) ; <nl> + input . addParameter(JpaConstants . PARAM_EXPORT_POLL_STATUS_JOB_ID, new StringType(jobId)) ; <nl> + HttpPost post = new HttpPost(""http://localhost:"" myPort ""/"" JpaConstants . OPERATION_EXPORT_POLL_STATUS) ; <nl> + post . addHeader(Constants . HEADER_PREFER, Constants . HEADER_PREFER_RESPOND_ASYNC) ; <nl> + post . setEntity(new ResourceEntity(myCtx, input)) ; <nl>",fix export-poll-status null point exception issue,1
8c287f02693c24d512e21713f02ffc0f1f6eb62b,2023-01-26 14:55:19+00:00,mmm FhirTerser . java <nl> ppp FhirTerser . java <nl> - String elementName = nextChild . getChildNameByDatatype(nextValue . getClass()) ; <nl> + Class<? extends IBase> valueType = nextValue . getClass() ; <nl> + String elementName = nextChild . getChildNameByDatatype(valueType) ; <nl> - BaseRuntimeElementDefinition<?> element = myContext . getElementDefinition(nextValue . getClass()) ; <nl> + BaseRuntimeElementDefinition<?> element = myContext . getElementDefinition(valueType) ; <nl> - if (instanceConstructorArg != null) { <nl> + if (element == null && BaseContainedDt . class . isAssignableFrom(valueType)) { <nl> + BaseContainedDt containedTarget = (BaseContainedDt) ReflectionUtil . newInstance(valueType) ; <nl> + BaseContainedDt containedSource = (BaseContainedDt) nextValue ; <nl> <nl>,terser cloneinto do not work for contained resource,0
1c0addafebbfb0a7ea1cb792f1d6ef741fd8a8a0,2023-04-20 18:43:37+00:00,mmm SearchParamWithInlineReferencesExtractor . java <nl> ppp SearchParamWithInlineReferencesExtractor . java <nl> - import ca . uhn . fhir . jpa . api . config . JpaStorageSettings ; <nl> - import ca . uhn . fhir . rest . api . server . storage . IResourcePersistentId ; <nl> - import ca . uhn . fhir . rest . api . server . storage . NotFoundPid ; <nl> - import ca . uhn . fhir . rest . server . exceptions . PreconditionFailedException ; <nl> - import ca . uhn . fhir . rest . server . util . ResourceSearchParams ; <nl> <nl>,transaction bundle multi-threading issue,1
b7bc6305002a6040ea4ba6fbe2f520cd2ebc791d,2023-04-24 14:38:40-04:00,"mmm MdmLinkUpdaterSvcImpl . java <nl> ppp MdmLinkUpdaterSvcImpl . java <nl> - myMdmMatchLinkSvc . updateMdmLinksForMdmSource(theSourceResource, theMdmContext) ; <nl> + if (myMdmLinkDaoSvc . getMdmLinksBySourcePidAndMatchResult(sourceResourceId, MdmMatchResultEnum . MATCH) . isEmpty()) { <nl> + myMdmMatchLinkSvc . updateMdmLinksForMdmSource(theSourceResource, theMdmContext) ; <nl> + } <nl> mmm MdmLinkUpdaterSvcImplIT . java <nl> ppp MdmLinkUpdaterSvcImplIT . java <nl> - import ca . uhn . fhir . rest . api . server . SystemRequestDetails ; <nl> + import ca . uhn . fhir . rest . api . server . SystemRequestDetails ; <nl> + @Test <nl> + void testUpdateLinkToNoMatchWhenAnotherLinkToDifferentGoldenExistsShouldNotFail() throws Exception { <nl> + Patient patientA = createPatientFromJsonInputFile(Patient_A_JSON_PATH) ; <nl>",one source record should create no match link with no error when two golden record be possible match,1
457b39bac1ca581ebbe1e2f7529ea5b5bec391ad,2023-04-27 21:35:27-06:00,"mmm BaseHapiFhirResourceDao . java <nl> ppp BaseHapiFhirResourceDao . java <nl> + @Override <nl> + public <P extends IResourcePersistentId> void expunge(Collection<P> theResourceIds, RequestDetails theRequest) { <nl> + ExpungeOptions options = new ExpungeOptions() ; <nl> + options . setExpungeDeletedResources(true) ; <nl> + for (P pid : theResourceIds) { <nl> + if (pid instanceof JpaPid) { <nl> + ResourceTable entity = myEntityManager . find(ResourceTable . class, pid . getId()) ; <nl> + forceExpungeInExistingTransaction(entity . getIdDt() . toVersionless(), options, theRequest) ; <nl> + } else { <nl> + ourLog . warn(""Unable to process expunge on resource {}"", pid) ; <nl> + return ; <nl>",fix mdm clear do not expunge golden record resource,0
31ae8d8f27f78d3b1e4ec74b88a156b54a4f8214,2023-05-30 14:02:14-04:00,"mmm PackageInstallerSvcImpl . java <nl> ppp PackageInstallerSvcImpl . java <nl> - return myPackageCacheManager . uninstallPackage(theInstallationSpec . getName(), theInstallationSpec . getVersion()) ; <nl> + PackageDeleteOutcomeJson outcome = myPackageCacheManager . uninstallPackage(theInstallationSpec . getName(), theInstallationSpec . getVersion()) ; <nl> + validationSupport . invalidateCaches() ; <nl> + return outcome ; <nl> + validationSupport . invalidateCaches() ; <nl> mmm PackageInstallerSvcImplTest . java <nl> ppp PackageInstallerSvcImplTest . java <nl> + import ca . uhn . fhir . context . support . IValidationSupport ; <nl> + @Mock <nl> + private IValidationSupport myIValidationSupport ; <nl> mmm NpmR4Test . java <nl> ppp NpmR4Test . java <nl> + import <nl>",validation do not consider loaded ig immediately,1
fddea8db92b12f76a98c9c9ac167076e59dc6560,2023-06-08 12:38:24-04:00,"mmm BaseHapiFhirResourceDao . java <nl> ppp BaseHapiFhirResourceDao . java <nl> + if (!theResource . getIdElement() . hasIdPart() && getStorageSettings() . getResourceServerIdStrategy() == JpaStorageSettings . IdStrategyEnum . UUID) { <nl> + theResource . setId(UUID . randomUUID() . toString()) ; <nl> + theResource . setUserData(JpaConstants . RESOURCE_ID_SERVER_ASSIGNED, Boolean . TRUE) ; <nl> + } <nl> mmm FhirResourceDaoDstu2UpdateTest . java <nl> ppp FhirResourceDaoDstu2UpdateTest . java <nl> + import ca . uhn . fhir . jpa . api . config . JpaStorageSettings ; <nl> + import org . junit . jupiter . api . AfterEach ; <nl> + import java . util . <nl>",resolve 4952 put request for resource that do not exist get create in sequential format rather than abide by the resourceserveridstrategy,1
f68f3fbb0f7b0ab3b6bc229d288b90903bc1fbf2,2023-07-21 17:08:58+00:00,mmm JpaResourceExpungeService . java <nl> ppp JpaResourceExpungeService . java <nl> + import ca . uhn . fhir . i18n . Msg ; <nl> + import ca . uhn . fhir . rest . server . exceptions . PreconditionFailedException ; <nl> + import org . springframework . dao . DataIntegrityViolationException ; <nl> - if (resource . isHasTags()) { <nl> - myResourceTagDao . deleteByResourceId(resource . getId()) ; <nl> - } <nl> + try { <nl> + if (resource . isHasTags()) { <nl> + myResourceTagDao . deleteByResourceId(resource . getId()) ; <nl> + } <nl> - if (resource . getForcedId() != null) { <nl>,resolve 5112 unable to expunge delete codesystem until several minute later,1
b9155721a75d27ae88e084999ed9c810eb5342fc,2023-08-20 00:37:16+00:00,"mmm ResourceIdListStep . java <nl> ppp ResourceIdListStep . java <nl> - } <nl> + } else { <nl> + ourLog . debug(""Found {} IDs from {} to {}"", nextChunk . size(), start, nextChunk . getLastDate()) ; <nl> - ourLog . debug(""Found {} IDs from {} to {}"", nextChunk . size(), start, nextChunk . getLastDate()) ; <nl> + final Set<TypedPidJson> idBuffer = nextChunk . getTypedResourcePids() . stream() <nl> +  . map(TypedPidJson::new) <nl> +  . collect(Collectors . toCollection(LinkedHashSet::new)) ; <nl> - final Set<TypedPidJson> idBuffer = nextChunk . getTypedResourcePids() . stream() <nl> -  . map(TypedPidJson::new) <nl> -  . <nl>",fix batch2 npe when no result return,1
d563b97ad8d4671e516bbd5ca75121674802352c,2023-09-06 11:43:14-04:00,"mmm GoldenResourceSearchSvcImpl . java <nl> ppp GoldenResourceSearchSvcImpl . java <nl> - import ca . uhn . fhir . rest . param . TokenParam ; <nl> + import ca . uhn . fhir . rest . param . TokenOrListParam ; <nl> - searchParamMap . add( <nl> - ""_tag"", new TokenParam(MdmConstants . SYSTEM_GOLDEN_RECORD_STATUS, MdmConstants . CODE_GOLDEN_RECORD)) ; <nl> + TokenOrListParam goldenRecordStatusToken = new TokenOrListParam() <nl> +  . add(MdmConstants . SYSTEM_GOLDEN_RECORD_STATUS, MdmConstants . CODE_GOLDEN_RECORD_REDIRECTED) <nl> +  . add(MdmConstants . SYSTEM_GOLDEN_RECORD_STATUS, MdmConstants . CODE_GOLDEN_RECORD) ; <nl> + searchParamMap . add(Constants . PARAM_TAG, goldenRecordStatusToken) ; <nl> mmm MdmProviderClearLinkR4Test . java <nl> ppp <nl>",mdm clear do not expunge redirect golden resource,0
57f6a705a5ebeeea7316e63f1cfb91b5d0ce70cf,2023-09-07 22:51:12+00:00,"mmm MdmEidUpdateService . java <nl> ppp MdmEidUpdateService . java <nl> - import ca . uhn . fhir . i18n . Msg ; <nl> - import ca . uhn . fhir . rest . server . exceptions . InternalErrorException ; <nl> + IAnyResource theOldGoldenResource = updateContext . getExistingGoldenResource() ; <nl> + } else if (theOldGoldenResource == null) { <nl> + myMdmSurvivorshipService . applySurvivorshipRulesToGoldenResource( <nl> + theTargetResource, updateContext . getMatchedGoldenResource(), theMdmTransactionContext) ; <nl> + myMdmResourceDaoSvc . upsertGoldenResource( <nl> + updateContext . getMatchedGoldenResource(), theMdmTransactionContext . getResourceType()) ; <nl> + myMdmLinkSvc . updateLink( <nl> + updateContext . getMatchedGoldenResource(), <nl> + theTargetResource, <nl> + <nl>",fix npe in mdm post-mdm-clear on update operation,1
fe8c6c066e3b264bd7cf99c26662b218235581b8,2023-09-12 10:39:53-07:00,"mmm SearchBuilder . java <nl> ppp SearchBuilder . java <nl> + import static ca . uhn . fhir . jpa . model . util . JpaConstants . UNDESIRED_RESOURCE_LINKAGES_FOR_EVERYTHING_ON_PATIENT_INSTANCE ; <nl> - sqlBuilder . append("" AND r . mySourceResourceType != 'Provenance'"") ; <nl> + sqlBuilder . append(UNDESIRED_RESOURCE_LINKAGES_FOR_EVERYTHING_ON_PATIENT_INSTANCE . stream() <nl> +  . collect(Collectors . joining(""', '"", "" AND r . mySourceResourceType NOT IN ('"", ""')""))) ; <nl> mmm JpaConstants . java <nl> ppp JpaConstants . java <nl> + import java . util . Set ; <nl> + public static final Set<String> UNDESIRED_RESOURCE_LINKAGES_FOR_EVERYTHING_ON_PATIENT_INSTANCE = <nl> + Set . of(""Provenance"", ""List"", <nl>",searchbuilder should not allow everything operation to follow link to group or list resource,1
de341a5bb71e1c1b118ec1af2a78386705512052,2023-09-14 12:42:24+00:00,"mmm BaseHapiFhirDao . java <nl> ppp BaseHapiFhirDao . java <nl> - final ResourceHistoryTable historyEntry = theEntity . toHistory(versionedTags) ; <nl> + ResourceHistoryTable historyEntry = null ; <nl> + long resourceVersion = theEntity . getVersion() ; <nl> + boolean reusingHistoryEntity = false ; <nl> + if (!myStorageSettings . isResourceDbHistoryEnabled() && resourceVersion > 1L) { <nl> + historyEntry = myResourceHistoryTableDao . findForIdAndVersionAndFetchProvenance( <nl> + theEntity . getResourceId(), resourceVersion - 1) ; <nl> + if (historyEntry != null) { <nl> + reusingHistoryEntity = true ; <nl> + theEntity . populateHistoryEntityVersionAndDates(historyEntry) ; <nl> + if (versionedTags && theEntity . isHasTags()) { <nl> + <nl>",do not preserve history mode,1
8b7c9f1453e5965152e4b4475a6b91e75f328c8e,2023-09-14 11:54:55-04:00,mmm QueryStack . java <nl> ppp QueryStack . java <nl> -  . filter(t -> t . startsWith(theResourceType)) <nl> +  . filter(t -> (t . startsWith(theResourceType) || t . startsWith("(" theResourceType))) <nl> mmm ResourceProviderR4SearchContainedTest . java <nl> ppp ResourceProviderR4SearchContainedTest . java <nl> + import org . hl7 . fhir . r4 . model . Coding ; <nl> + import org . hl7 . fhir . r4 . model . Composition ; <nl> + import org . hl7 . fhir . r4 . model . DateTimeType ; <nl> + import org . hl7 . fhir . r4 . model <nl>,search for medicationrequests with medication contain do not return correct result,1
6ee6031a5f65b9c2022ded7a64d5d4661cccf405,2023-09-26 13:56:13-04:00,mmm Constants . java <nl> ppp Constants . java <nl> + public static final String BULK_DATA_ACCESS_IG_URL = <nl> + "http://hl7 . org/fhir/uv/bulkdata/CapabilityStatement/bulk-data" ; <nl> mmm JpaConstants . java <nl> ppp JpaConstants . java <nl> - public static final String OPERATION_EXPORT = "$export" ; <nl> - public static final String OPERATION_EXPORT_POLL_STATUS = "$export-poll-status" ; <nl> mmm BulkDataExportProviderTest . java <nl> ppp BulkDataExportProviderTest . java <nl> + import ca . uhn . fhir . rest . server . provider . ProviderConstants ; <nl> - HttpPost post = new HttpPost(myBaseUriForExport + "/" + JpaConstants . OPERATION_EXPORT) ; <nl> + HttpPost post = <nl>,capabilitystatement doe not declare conformance to ig when a bulk data export provider be register,1
4e9bd153cf1ab11192bd3af4db17eea3de55c7a1,2023-10-02 11:32:58-04:00,"mmm JpaBulkExportProcessor . java <nl> ppp JpaBulkExportProcessor . java <nl> + import ca . uhn . fhir . rest . server . util . ISearchParamRegistry ; <nl> + @Autowired <nl> + private ISearchParamRegistry mySearchParamRegistry ; <nl> - Set<JpaPid> expandedMemberResourceIds = expandAllPatientPidsFromGroup(theParams) ; <nl> - assert !expandedMemberResourceIds . isEmpty() ; <nl> - Logs . getBatchTroubleshootingLog() <nl> -  . debug(""{} has been expanded to members:[{}]"", theParams . getGroupId(), expandedMemberResourceIds) ; <nl> - QueryChunker<JpaPid> queryChunker = new QueryChunker<>() ; <nl> - queryChunker . chunk(expandedMemberResourceIds, QUERY_CHUNK_SIZE, (idChunk) -> { <nl> - try { <nl> - queryResourceTypeWithReferencesToPatients(pids, idChunk, theParams, theDef) ; <nl> - <nl>",bulk export error when patient compartment searchparameter of the resource be not present,1
d187399ce53e8f761c230f9f64ed6429ba7bd755,2023-12-14 17:24:04-05:00,"mmm HfqlExecutor . java <nl> ppp HfqlExecutor . java <nl> + import ca . uhn . fhir . rest . param . ParamPrefixEnum ; <nl> + -		ResourceSearchParams activeSearchParams = <nl> - mySearchParamRegistry . getActiveSearchParams(theStatement . getFromResourceName()) ; <nl> + String fromResourceName = theStatement . getFromResourceName() ; <nl> + ResourceSearchParams activeSearchParams = mySearchParamRegistry . getActiveSearchParams(fromResourceName) ; <nl> + String left = null ; <nl> + List<String> rightValues = null ; <nl> + String comparator ; <nl> - if (""id"" . equals(nextWhereClause . getLeft())) { <nl> + left = nextWhereClause . getLeft() ; <nl> + comparator = """" ; <nl> + <nl>",lastupdated search do not work with hfql,0
7863f03c686766e5fcf9cc592612de1799ce7df7,2023-12-15 08:07:26-05:00,mmm HapiFhirCockroachDialect . java <nl> ppp HapiFhirCockroachDialect . java <nl>  <nl> mmm HapiFhirDerbyDialect . java <nl> ppp HapiFhirDerbyDialect . java <nl>  <nl> mmm HapiFhirH2Dialect . java <nl> ppp HapiFhirH2Dialect . java <nl> - import ca . uhn . fhir . jpa . model . entity . ResourceTable ; <nl> mmm HapiFhirMariaDBDialect . java <nl> ppp HapiFhirMariaDBDialect . java <nl>  <nl> mmm HapiFhirMySQLDialect . java <nl> ppp HapiFhirMySQLDialect . java <nl>  <nl> mmm HapiFhirOracleDialect . java <nl> ppp HapiFhirOracleDialect . java <nl>  <nl> mmm HapiFhirPostgres94Dialect . java <nl> ppp HapiFhirPostgres94Dialect . java <nl>  <nl> <nl>,fix postgres / remove use of lob content column,1
6e1a56d520e6c820fcc75a6d61169e78fe8eef13,2024-01-19 15:05:32-05:00,"mmm BulkDataExportProviderTest . java <nl> ppp BulkDataExportProviderTest . java <nl> + import ca . uhn . fhir . util . SearchParameterUtil ; <nl> + import org . junit . jupiter . params . provider . ValueSource ; <nl> + import java . util . Arrays ; <nl> + import java . util . HashSet ; <nl> + import static org . hamcrest . Matchers . arrayContainingInAnyOrder ; <nl> - @Test <nl> - public void testInitiateBulkExportOnPatient_noTypeParam_addsTypeBeforeBulkExport() throws IOException { <nl> + @ParameterizedTest <nl> + @ValueSource(strings = {""/Patient/"" ProviderConstants . OPERATION_EXPORT, ""/Patient/p1/"" ProviderConstants . OPERATION_EXPORT}) <nl> + public void testInitiateBulkExportOnPatient_noTypeParam_addsTypeBeforeBulkExport(String mode) <nl>",resolve 5602 bulk export would fail if type parameter be not provide,1
8c46dd2f3212fa331528fc92019d4f22abe2ffc1,2002-04-01 22:57:41+00:00,"mmm TestRunner . java <nl> ppp TestRunner . java <nl> - Panel numbersPanel= new Panel(new FlowLayout()) ; <nl> - numbersPanel . add(new Label(""Runs:"")) ;			numbersPanel . add(fNumberOfRuns) ; <nl> - numbersPanel . add(new Label(""   Errors:"")) ;		numbersPanel . add(fNumberOfErrors) ; <nl> - numbersPanel . add(new Label(""   Failures:"")) ;	numbersPanel . add(fNumberOfFailures) ; <nl> + Panel numbersPanel= createCounterPanel() ; <nl> - addGrid(panel, numbersPanel,	 0, 4, 2, GridBagConstraints . NONE, 			0 . 0, GridBagConstraints . CENTER) ; <nl> + addGrid(panel, numbersPanel,	 0, 4, 2, GridBagConstraints . NONE, 			0 . 0, GridBagConstraints . WEST) ; <nl> + protected Panel createCounterPanel() throws <nl>",fix a layout problem in the counter panel change the layout to a gridbaglayout,1
15a124877d38d668808ae250821aa3d4327f7758,2002-06-24 19:36:26+00:00,"mmm Assert . java <nl> ppp Assert . java <nl> - throw new ComparisonFailure(message, expected == null ? ""null"" : expected . toString(), actual == null ? ""null"" : actual . toString()) ; <nl> + throw new ComparisonFailure(message, expected . toString(), actual . toString()) ; <nl>",the problem be well solve by only use comparisonfailure,1
ffd5f087e9b0ffaf146c91323adcf0ffdf469b0f,2004-09-10 18:27:23+00:00,mmm TestCase . java <nl> ppp TestCase . java <nl> + Throwable running= null ; <nl> + } catch (Throwable e) { <nl> + running= e ; <nl> - tearDown() ; <nl> + try { <nl> + tearDown() ; <nl> + } catch (Exception e) { <nl> + throw (running != null) ? running : e ; <nl> + } <nl> mmm TestCaseTest . java <nl> ppp TestCaseTest . java <nl> + public void testErrorTearingDownDoesntMaskErrorRunning() { <nl> + final Exception running= new Exception() ; <nl> + TestCase t= new TestCase() { <nl> + protected void runTest() throws Throwable { <nl>,make sure an exception thrown during teardown ( ) do not mask an,1
3214326e44841a7bdd9139c343f4f0834d4b3c70,2004-10-11 19:22:08+00:00,mmm TestCase . java <nl> ppp TestCase . java <nl> - Throwable running= null ; <nl> + Throwable exception= null ; <nl> - } catch (Throwable e) { <nl> - running= e ; <nl> + } catch (Throwable running) { <nl> + exception= running ; <nl> - } catch (Exception e) { <nl> - throw (running != null) ? running : e ; <nl> + } catch (Throwable tearingDown) { <nl> + if (exception == null) exception= tearingDown ; <nl> + if (exception != null) throw exception ; <nl> - assertNotNull(fName) ; <nl> + assertNotNull(fName) ; // Some VMs <nl>,my previous fix do not work correctly,0
ee76b28e432a94c33160b3edc7cb60b6394ac0cc,2006-06-01 22:27:29+00:00,"mmm Assert . java <nl> ppp Assert . java <nl> + import org . junit . internal . ArrayComparisonFailure ; <nl> - assertEquals(header + ""arrays first differed at element "" + i + "" ;"", expected, actual) ; <nl> + try { <nl> + assertEquals(message, expected, actual) ; <nl> + } catch (ArrayComparisonFailure e) { <nl> + e . addDimension(i) ; <nl> + throw e ; <nl> + } <nl> - assertEquals(header + ""arrays first differed at element ["" + i + ""] ;"", o1, o2) ; <nl> + try { <nl> + assertEquals(o1, o2) ; <nl> + } <nl>",fix multi-dimensional array comparison error message kb & ms,1
2d1e224c4e596521345d0af05b8f0997c18ecd50,2006-06-24 02:52:11+00:00,"mmm Assert . java <nl> ppp Assert . java <nl> - throw new AssertionError(message) ; <nl> + throw new AssertionError(message == null ? """" : message) ; <nl> mmm AssertionTest . java <nl> ppp AssertionTest . java <nl> + } <nl> + @Test public void multiDimensionalArraysAreNotEqualNoMessage() { <nl> + try { <nl> + assertEquals(new Object[][]{{true, true}, {false, false}}, new Object[][]{{true, true}, {true, false}}) ; <nl> + fail() ; <nl> + } catch (AssertionError exception) { <nl> + assertEquals(""arrays first differed at element [1][0] ; expected:<false> but was:<true>"", exception . getMessage()) ; <nl> + } <nl> + @Test public void <nl>",fix problem with null message to fail (,1
b0c0b79ae5e0dcfc1670cf950d31a14f1c9c630c,2006-07-21 03:15:34+00:00,"mmm Assert . java <nl> ppp Assert . java <nl> - if (expected instanceof String && actual instanceof String) <nl> - throw new ComparisonFailure(message, (String)expected, (String)actual) ; <nl> + if (expected instanceof String && actual instanceof String) { <nl> + String cleanMessage= message == null ? """" : message ; <nl> + throw new ComparisonFailure(cleanMessage, (String)expected, (String)actual) ; <nl> + } <nl> - if (message != null) <nl> + if (message != null && ! message . equals("""")) <nl> mmm JUnitCore . java <nl> ppp JUnitCore . java <nl> + import org . junit . runner . notification . <nl>","fix problem with assertequals ( null , string , string ) and return code when class be n't find",1
81ef67251efba98fd6bb1065e9ab97c102dbcc24,2007-12-07 16:32:57+00:00,mmm Theories . java <nl> ppp Theories . java <nl> - import org . junit . Assert ; <nl> + import org . junit . Assume ; <nl> + import org . junit . internal . runners . InitializationError ; <nl> - import org . junit . internal . runners . model . InitializationError ; <nl> - Assert <nl> + Assume <nl>,"no match parameter be now an assumption failure , not an assertion failure",1
5ca9ec43b61e5353296c69a307cd7b71e630b2e0,2007-12-07 18:28:27+00:00,"mmm Theories . java <nl> ppp Theories . java <nl> - nullsOk(), freshInstance) ; <nl> + nullsOk()) ; <nl> mmm Assignments . java <nl> ppp Assignments . java <nl> - public Object[] getMethodArguments(boolean nullsOk, Object target) <nl> + public Object[] getMethodArguments(boolean nullsOk) <nl>",do not need to pass instance in to calculate value,1
752727de89a6bab731f49597c7ec3858ebb3e0a3,2008-01-25 13:51:07+00:00,mmm RunAfters . java <nl> ppp RunAfters . java <nl> + import java . util . ArrayList ; <nl> + private final List<Throwable> fErrors = new ArrayList<Throwable>() ; <nl> - MultipleFailureException errors= new MultipleFailureException() ; <nl> + fErrors . clear() ; <nl> - errors . add(e) ; <nl> + fErrors . add(e) ; <nl> - errors . add(e) ; <nl> + fErrors . add(e) ; <nl> - errors . assertEmpty() ; <nl> + if (fErrors . isEmpty()) <nl> + return ; <nl> + if (fErrors . size() == 1) <nl> + throw fErrors . get(0) ; <nl> + throw <nl>,exception be expensive to create if we do not plan to throw them stack trace be always fill in,1
37a611801fbea6ecc9b6356d9616e761c8b59b91,2008-03-20 22:53:19+00:00,"mmm Version . java <nl> ppp Version . java <nl> - return ""4 . 5-SNAPSHOT-20080125-0912"" ; <nl> + return ""4 . 5-SNAPSHOT-20080319-0812"" ; <nl> mmm PotentialAssignment . java <nl> ppp PotentialAssignment . java <nl> - public static PotentialAssignment forValue(final Object value) { <nl> + public static PotentialAssignment forValue(final String name, final Object value) { <nl> + @Override <nl> + public String getDescription() <nl> + throws CouldNotGenerateValueException { <nl> + return name ; <nl> + } <nl> + public abstract String getDescription() throws CouldNotGenerateValueException ; <nl> mmm Theories . java <nl> ppp Theories . java <nl> -  . getAllArguments(nullsOk())) <nl>","theory failure show name of source , not value",1
8c61443793e4c2e90a4056ee528c3880febb53d2,2008-06-26 15:20:39+00:00,mmm ClassRoadie . java <nl> ppp ClassRoadie . java <nl> - package org . junit . internal . deprecated ; <nl> + package org . junit . internal . runners ; <nl> - import org . junit . internal . runners . BlockJUnit4ClassRunner ; <nl> - import org . junit . internal . runners . JUnit4ClassRunner ; <nl> mmm FailedBefore . java <nl> ppp FailedBefore . java <nl> - package org . junit . internal . deprecated ; <nl> + package org . junit . internal . runners ; <nl> - import org . junit . internal . runners <nl>,move deprecate class back where they use to be,1
e07e59eb9d24f6e4fa85dd99f311c1feca6ea983,2008-07-30 02:56:52+00:00,"mmm ErrorReportingRunner . java <nl> ppp ErrorReportingRunner . java <nl> + import org . junit . runner . Runner ; <nl> - public class ErrorReportingRunner extends ParentRunner<Throwable> { <nl> - private final Throwable fCause ; <nl> + public class ErrorReportingRunner extends Runner { <nl> + private final List<Throwable> fCauses ; <nl> - public ErrorReportingRunner(Class<?> type, Throwable cause) { <nl> - super(type, false) ; <nl> - fCause= cause ; <nl> - } <nl> + private final Class<?> fTestClass ; <nl> - @Override <nl> - protected Description describeChild(Throwable child) { <nl> - return Description . createTestDescription(getTestClass() . getJavaClass(), ""initializationError"") ; <nl> <nl>","errorreportingrunner be not a parentrunner this mean that all parentrunners validate , for sure , during construction",1
b0b34427e9e644868f2b63d40d0556c35e818a63,2008-07-30 20:39:27+00:00,mmm BlockJUnit4ClassRunner . java <nl> ppp BlockJUnit4ClassRunner . java <nl> - if (constructors . length != 1) { <nl> + if (constructors . length != 1 ||  <nl> + constructors[0] . getParameterTypes() . length > 0) { <nl> mmm TestMethodTest . java <nl> ppp TestMethodTest . java <nl> + public static class ConstructorParameter { <nl> + public ConstructorParameter(Object something) { <nl> + } <nl> + @Test public void a() { <nl> + } <nl> + } <nl> + @Test(expected=InitializationError . class) public void constructorParameter() throws InitializationError { <nl> + new BlockJUnit4ClassRunner(ConstructorParameter . class) ; <nl> + } <nl>,make sure constructor have no args,1
3dd6b9fca5ccbd02a4d1cb5c5b3c921e369662a0,2008-08-01 15:28:05+00:00,mmm ErrorReportingRunner . java <nl> ppp ErrorReportingRunner . java <nl> + if (cause instanceof org . junit . internal . runners . InitializationError) <nl> + return ((org . junit . internal . runners . InitializationError) cause) <nl> +  . getCauses() ; <nl> mmm BadlyFormedClassesTest . java <nl> ppp BadlyFormedClassesTest . java <nl> + import org . junit . Before ; <nl> + import org . junit . internal . runners . JUnit4ClassRunner ; <nl> + import org . junit . runner . RunWith ; <nl> - public class BadlyFormedClassesTest  { <nl> + public class BadlyFormedClassesTest { <nl> <nl>,validation error in junit4classrunner be again report,0
fab8f0da7e35f0436b80bf5cfe799882b2cb4db5,2008-10-28 20:03:43+00:00,mmm JUnitCore . java <nl> ppp JUnitCore . java <nl> - private RunNotifier fNotifier ; <nl> + RunNotifier fNotifier ; <nl> mmm Request . java <nl> ppp Request . java <nl> + import org . junit . runner . notification . RunNotifier ; <nl> + import org . junit . tests . experimental . max . CouldNotReadCoreException ; <nl> + import org . junit . tests . experimental . max . MaxCore ; <nl> + private static boolean firstTime= true ; <nl> - return new ClassRequest(clazz) ; <nl> + if (firstTime) { <nl> + firstTime= false ; <nl> + <nl>,eclipse be n't quite call max just yet keep sin until it do,1
b3ee106f9f95e1f4093adb505e13a163df77f341,2009-05-13 11:23:02-04:00,mmm ParallelComputer . java <nl> ppp ParallelComputer . java <nl> - import org . junit . runners . BlockJUnit4ClassRunner ; <nl> - import org . junit . runners . Suite ; <nl> - private static <T> Runner parallelize(ParentRunner<T> runner) { <nl> - runner . setRunnerInterceptor(new RunnerInterceptor() { <nl> - private final List<Future<Object>> fResults= new ArrayList<Future<Object>>() ; <nl> + private static <T> Runner parallelize(Runner runner) { <nl> + if (runner instanceof ParentRunner<?>) { <nl> + ((ParentRunner<?>) runner) . setRunnerInterceptor(new RunnerInterceptor() { <nl> + private final List<Future<Object>> fResults= new ArrayList<Future<Object>>() ; <nl> - private final ExecutorService fService= Executors <nl> -  <nl>,parallelcomputer do not have to assume blockjunit4runner anymore,1
26fa0a4207e21f058d220c84f8195ee25943400c,2009-05-27 00:19:49-04:00,"new file <nl> ppp ExpectedException . java <nl> + package org . junit . experimental . interceptor ; <nl> + import org . junit . runners . model . FrameworkMethod ; <nl> + import org . junit . runners . model . Statement ; <nl> + public class ExpectedException implements StatementInterceptor { <nl> + private Class<? extends Throwable> fType ; <nl> + private String fMessage ; <nl> + public Statement intercept(Statement base, FrameworkMethod method) { <nl> + return new ExpectedExceptionStatement(base) ; <nl> + } <nl> + public void expect(Class<? extends Throwable> type) { <nl> + fType= type ; <nl> <nl>",expectedexception interceptor add,1
8dd7600e8634709c2e673e825e3f8cea58ff3c65,2010-02-01 14:09:52-05:00,mmm Theories . java <nl> ppp Theories . java <nl>  <nl> mmm ExternalResource . java <nl> ppp ExternalResource . java <nl>  <nl> new file <nl> ppp ParameterTokenSuite . java <nl> + import org . junit . experimental . categories . Categories ; <nl> + import org . junit . experimental . categories . Categories . IncludeCategory ; <nl> + import org . junit . runner . RunWith ; <nl> + import org . junit . runners . Suite . SuiteClasses ; <nl> + @RunWith(Categories . class) <nl> + @IncludeCategory(String . class) <nl> + @SuiteClasses( { SomeTestB . <nl>,temporarily here to keep master clean,1
1d86784cd452e8d9e30d812255cadb75ef8dae15,2010-04-05 14:27:28-04:00,"mmm BlockJUnit4ClassRunner . java <nl> ppp BlockJUnit4ClassRunner . java <nl> - import java . util . ArrayList ; <nl> - Description description= Description . createTestDescription( <nl> - getTestClass() . getJavaClass(), testName(method), method <nl> -  . getAnnotations()) ; <nl> - description . setParent(getDescription()) ; <nl> - return description ; <nl> + return Description . createTestDescription(getTestClass() . getJavaClass(), <nl> + testName(method), method . getAnnotations()) ; <nl> mmm StubbedTheories . java <nl> ppp StubbedTheories . java <nl> + import org . junit . runners . model . TestClass ; <nl> - return new StubbedTheoryAnchor(method) ; <nl> + return new StubbedTheoryAnchor(method, getTestClass()) <nl>",fix compilation error,1
ab51452ac565d286b7bbd5a13767253c317bb29f,2010-05-03 22:23:59-04:00,mmm ExpectException . java <nl> ppp ExpectException . java <nl> + import org . junit . internal . AssumptionViolatedException ; <nl> + } catch (AssumptionViolatedException e) { <nl> + throw e ; <nl> mmm AssumptionTest . java <nl> ppp AssumptionTest . java <nl> + @Test(expected = IllegalArgumentException . class) <nl> + public void assumeWithExpectedException() { <nl> + assumeTrue(false) ; <nl> + } <nl>,fix github # 98 : assumption with expect exception,1
b3831d600d2d893ec6250ee930188cc373d81ee5,2010-08-30 22:10:50-04:00,mmm Categories . java <nl> ppp Categories . java <nl> + import org . junit . runner . RunWith ; <nl> + import org . junit . runners . Parameterized ; <nl> + if (isParameterizedClass(description)) <nl> + return false ; <nl> + private boolean isParameterizedClass(Description description) { <nl> + RunWith annotation= description . getAnnotation(RunWith . class) ; <nl> + if (annotation == null) <nl> + return false ; <nl> + return annotation . value() . equals(Parameterized . class) ; <nl> + } <nl> mmm AllTests . java <nl> ppp AllTests . java <nl> - CategoryTest . class <nl> + <nl>,"fix direct category/parameterized conflict in a hacky way next , error for method-level category annotation in parameterized class",1
766343797294634c86186664c519d65d7d984c96,2011-01-07 20:36:11-08:00,"mmm Assert . java <nl> ppp Assert . java <nl> + if (message == null) { <nl> + throw new AssertionFailedError() ; <nl> + } <nl> - throw new ComparisonFailure(message, expected, actual) ; <nl> + String cleanMessage= message == null ? """" : message ; <nl> + throw new ComparisonFailure(cleanMessage, expected, actual) ; <nl> - if (message != null) <nl> + if (message != null && !message . isEmpty()) <nl> mmm Assert . java <nl> ppp Assert . java <nl> - throw new AssertionError(message == null ? """" : message) ; <nl> + if (message == null) <nl> + <nl>",fix assertionerror.tostring ( ) when no message be pass,1
5eee07b3e21f196b8cb937fb88eb8cf4be694f76,2011-05-30 20:08:41-07:00,"mmm ParentRunner . java <nl> ppp ParentRunner . java <nl> - private Filter fFilter= Filter . ALL ; <nl> - fFilter= fFilter . intersect(filter) ; <nl> - if (shouldRun(each)) <nl> + if (shouldRun(filter, each)) <nl> - filterChild(each) ; <nl> + filter . apply(each) ; <nl> - private void filterChild(T child) throws NoTestsRemainException { <nl> - fFilter . apply(child) ; <nl> - } <nl> - private boolean shouldRun(T each) { <nl> - return fFilter . shouldRun(describeChild(each)) ; <nl> + private boolean shouldRun(Filter filter, T each) { <nl> + return filter . shouldRun(describeChild(each)) ; <nl>",optimize parentrunner.filter for nested suite,1
a4c5380ffe636edc0acbab144080adbc709d668c,2011-05-30 20:28:12-07:00,"mmm Filter . java <nl> ppp Filter . java <nl> - } ; <nl> + } <nl> + @Override <nl> + public Filter intersect(Filter second) { <nl> + return second ; <nl> + } <nl> + if (second == this || second == ALL) { <nl> + return this ; <nl> + } <nl> mmm FilterTest . java <nl> ppp FilterTest . java <nl> + import static org . junit . Assert . assertSame ; <nl> + @Test <nl> + public void intersectSelf() { <nl> + NamedFilter a= new NamedFilter(""a"") ; <nl> + assertSame(a, a . intersect(a)) ; <nl> <nl>",optimize filter.intersect ( ) for common case,1
13885b99cf6d2f4bd2efa2211f57c103bbc03263,2011-09-14 10:09:08-04:00,mmm AllMembersSupplier . java <nl> ppp AllMembersSupplier . java <nl> + @SuppressWarnings("deprecation") <nl> mmm RuleFieldValidator . java <nl> ppp RuleFieldValidator . java <nl> - import org . junit . rules . MethodRule ; <nl> - return MethodRule . class . isAssignableFrom(target . getType()) ; <nl> + return org . junit . rules . MethodRule . class . isAssignableFrom(target <nl> +  . getType()) ; <nl> mmm BlockJUnit4ClassRunner . java <nl> ppp BlockJUnit4ClassRunner . java <nl> - import org . junit . rules . MethodRule ; <nl> mmm Parameterized . java <nl> ppp Parameterized . java <nl> + import java <nl>,fix gh-291 : category + parameterized still do not work,1
785a33b478d358e79a3b6592754ad9ec051e4278,2011-09-19 18:01:09-04:00,mmm MethodSorter . java <nl> ppp MethodSorter . java <nl> + import java . util . Collections ; <nl> - final List<String> names ; <nl> + List<String> names = Collections . emptyList() ; <nl> - return methods ; <nl> + final List<String> _names = names ; <nl> - int i1 = names . indexOf(nameAndDescriptor(m1)) ; <nl> - int i2 = names . indexOf(nameAndDescriptor(m2)) ; <nl> + int i1 = _names . indexOf(nameAndDescriptor(m1)) ; <nl> + int i2 = _names . indexOf(nameAndDescriptor(m2)) ; <nl>,"if bytecode can not be locate or parse , at least alpha sort",1
128553fc50758932f02fc6e13a3e25ef6a711152,2011-09-22 01:10:02+02:00,"mmm ExpectedException . java <nl> ppp ExpectedException . java <nl> + import static org . junit . Assert . assertThat ; <nl> - import org . junit . Assert ; <nl> + import org . junit . internal . AssumptionViolatedException ; <nl> + private boolean handleAssumptionViolatedExceptions= false ; <nl> + private boolean handleAssertionErrors= false ; <nl> + public void handleAssertionErrors() { <nl> + handleAssertionErrors= true ; <nl> + } <nl> + public void handleAssumptionViolatedExceptions() { <nl> + handleAssumptionViolatedExceptions= true ; <nl> + } <nl> + } catch (AssumptionViolatedException e) { <nl> + optionallyHandleException(e, handleAssumptionViolatedExceptions) ; <nl> + return ; <nl>",fix gh-121 handle junit exception,1
f634102cf058ed5761b2e4ef66761e2f397b6160,2012-02-15 21:27:20+01:00,mmm FailOnTimeout . java <nl> ppp FailOnTimeout . java <nl> + if (!thread . fFinished) { <nl> + thread . recordStackTrace() ; <nl> + } <nl> - exception . setStackTrace(thread . getStackTrace()) ; <nl> + exception . setStackTrace(thread . getRecordedStackTrace()) ; <nl> + private StackTraceElement[] fRecordedStackTrace= null ; <nl> + public void recordStackTrace() { <nl> + fRecordedStackTrace= getStackTrace() ; <nl> + } <nl> + public StackTraceElement[] getRecordedStackTrace() { <nl> + return fRecordedStackTrace ; <nl> + } <nl> mmm FailOnTimeoutTest . java <nl> ppp FailOnTimeoutTest . java <nl> - import static java . lang . Thread . sleep ; <nl> <nl>,timeout exception contain the real cause of the timeout,1
0ce06206263ed060bd0ede049c1713286c2487ea,2012-03-10 02:05:14+01:00,mmm RunNotifier . java <nl> ppp RunNotifier . java <nl> + import static java . util . Arrays . asList ; <nl> + private final List<RunListener> fCurrentListeners ; <nl> + SafeNotifier() { <nl> + this(fListeners) ; <nl> + } <nl> + SafeNotifier(List<RunListener> currentListeners) { <nl> + fCurrentListeners= currentListeners ; <nl> + } <nl> - for (Iterator<RunListener> all= fListeners . iterator() ; all . hasNext() ;) <nl> + List<RunListener> safeListeners= new ArrayList<RunListener>() ; <nl> + List<Failure> failures= new ArrayList<Failure>() ; <nl> + for (Iterator<RunListener> all= fCurrentListeners . iterator() ; all <nl> +  . hasNext() ;) <nl> - notifyListener(all . <nl>,"do not remove listener , which throw exception # 209 and # 395",1
8b9dfefada78a74b6b1fa34ff0bab298267f8210,2012-04-03 21:24:58+02:00,mmm ResultMatchers . java <nl> ppp ResultMatchers . java <nl> - import org . junit . internal . matchers . TypeSafeMatcher ; <nl> + import org . hamcrest . TypeSafeMatcher ; <nl> mmm TypeSafeMatcher . java <nl> ppp TypeSafeMatcher . java <nl> + @Deprecated <nl> mmm ExpectedException . java <nl> ppp ExpectedException . java <nl> + import org . hamcrest . TypeSafeMatcher ; <nl> - import org . junit . internal . matchers . TypeSafeMatcher ; <nl> mmm ParallelClassTest . java <nl> ppp ParallelClassTest . java <nl> + import org . hamcrest . TypeSafeMatcher ; <nl> - import org <nl>,deprecate typesafematcher which be now provide by hamcrest,1
3637f328439c9c8ab2d165cbf328fb131f8716a2,2012-04-23 21:58:19+01:00,"mmm Description . java <nl> ppp Description . java <nl> - public static Description createSuiteDescription(String name, Object uniqueId, Annotation .  .  .  annotations) { <nl> + public static Description createSuiteDescription(String name, Serializable uniqueId, Annotation .  .  .  annotations) { <nl> - private final Object fUniqueId ; <nl> + private final Serializable fUniqueId ; <nl> - private Description(String displayName, Object uniqueId, Annotation .  .  .  annotations) { <nl> + private Description(String displayName, Serializable uniqueId, Annotation .  .  .  annotations) { <nl>",make sure uniqueid be serializable in order to respect description 's serializable contract,1
72e10d3ca80ae76af8920091736882a6dc0a5036,2012-04-27 16:41:06-07:00,mmm Assert . java <nl> ppp Assert . java <nl> - { <nl> - } <nl> - { <nl> - } <nl> mmm InitializationError . java <nl> ppp InitializationError . java <nl> - import java . util . ArrayList ; <nl> - import java . util . Collections ; <nl> - fErrors= new ArrayList<Throwable>(errors) ; <nl> + fErrors= errors ; <nl> - fErrors= Arrays . asList(error) ; <nl> + this(Arrays . asList(error)) ; <nl> - return Collections . unmodifiableList(fErrors) ; <nl> - } <nl> - @Override <nl> - public String getMessage() { <nl> - StringBuilder sb = new StringBuilder( <nl>,fix problem with style and other small issue,0
6012fa3b4fe4e924311d42e05e216092e425cbf9,2012-08-12 09:26:57+02:00,"mmm TemporaryFolder . java <nl> ppp TemporaryFolder . java <nl> - file . mkdir() ; <nl> + if (!file . mkdir()) <nl> + throw new IllegalStateException( <nl> + ""a folder with the name \'"" folderName ""\' already exists"") ; <nl> mmm TemporaryFolderUsageTest . java <nl> ppp TemporaryFolderUsageTest . java <nl> - new TemporaryFolder() . newFolder(""level1"", ""leve2"", ""leve3"") ; <nl> + new TemporaryFolder() . newFolder(""level1"", ""level2"", ""level3"") ; <nl> + } <nl> + @Test(expected = IllegalStateException . class) <nl> + public void newFolderWithGivenPathThrowsIllegalStateExceptionIfPathExists() throws IOException { <nl> + tempFolder . create() ; <nl> + tempFolder . newFolder(""level1"", ""level2"", ""level3"") ; <nl>",issue 478 : throw an illegalstateexception when the folder already exist,1
6384edfffe7f8a2850d2bcde9a16a8e780734ebe,2012-12-23 21:10:53+01:00,mmm ExpectedException . java <nl> ppp ExpectedException . java <nl> - if (fMatcherBuilder . expectsThrowable()) { <nl> - failDueToMissingException() ; <nl> - } <nl> + return ; <nl> + return ; <nl> + return ; <nl> + } <nl> + if (fMatcherBuilder . expectsThrowable()) { <nl> + failDueToMissingException() ; <nl> - private void failDueToMissingException() throws AssertionError { <nl> - fail(missingExceptionMessage()) ; <nl> - } <nl> + private void failDueToMissingException() throws AssertionError { <nl> + fail(missingExceptionMessage()) ; <nl> + } <nl> mmm ExpectedExceptionTest . java <nl> ppp ExpectedExceptionTest . java <nl> + import static org . hamcrest . CoreMatchers . <nl>,fail when assertionerror expect but not throw,1
cc8497f28e1d5a46d7940a0b36556154c83d6f7a,2013-03-11 01:17:00+00:00,"mmm ParameterSignature . java <nl> ppp ParameterSignature . java <nl> + import java . lang . reflect . Field ; <nl> + import java . lang . reflect . Modifier ; <nl> + import java . util . HashMap ; <nl> + import java . util . Map ; <nl> + @SuppressWarnings(""serial"") <nl> + private static final Map<Class<?>, Class<?>> primitivesBoxingMap = new HashMap<Class<?>, Class<?>>() {{ <nl> + put(boolean . class, Boolean . class) ; <nl> + put(byte . class, Byte . class) ; <nl> + put(short . class, Short . class) ; <nl> + put(char . class, Character . <nl>","parameter be now match on value , not define type , for array and single-valued method and field",1
063004dca462777a969ab1e0002dd3053014381c,2013-10-08 17:40:46+01:00,"mmm Assert . java <nl> ppp Assert . java <nl> - assertNotEquals(message, (Long) unexpected, (Long) actual) ; <nl> + if (unexpected == actual) { <nl> + failEquals(message, actual) ; <nl> + } <nl> - failEquals(message, new Double(actual)) ; <nl> + failEquals(message, actual) ; <nl> - failNotEquals(message, new Double(expected), new Double(actual)) ; <nl> + failNotEquals(message, expected, actual) ; <nl> - failNotEquals(message, new Float(expected), new Float(actual)) ; <nl> + failNotEquals(message, expected, actual) ; <nl> - failEquals(message, new Float(actual)) ; <nl> + failEquals(message, actual) ; <nl> - assertEquals(message, (Long) expected, (Long) actual) ; <nl> + if (expected != actual) { <nl> + <nl>",do not create object without a failure,1
be322bce19656224268c0c4401792ab65e1db54f,2014-02-14 00:05:25+07:00,"mmm Assert . java <nl> ppp Assert . java <nl> - failNotEquals(message, new Double(expected), new Double(actual)) ; <nl> + failNotEquals(message, Double . valueOf(expected), Double . valueOf(actual)) ; <nl> - failNotEquals(message, new Float(expected), new Float(actual)) ; <nl> + failNotEquals(message, Float . valueOf(expected), Float . valueOf(actual)) ; <nl> - assertEquals(message, new Long(expected), new Long(actual)) ; <nl> + assertEquals(message, Long . valueOf(expected), Long . valueOf(actual)) ; <nl> - assertEquals(message, new Byte(expected), new Byte(actual)) ; <nl> + assertEquals(message, Byte . valueOf(expected), Byte . valueOf(actual)) ; <nl> - assertEquals(message, new Character(expected), new Character(actual)) ; <nl> + assertEquals(message, Character . valueOf(expected), Character . valueOf(actual)) ; <nl>",optimize memory consumption in deprecated junit.framework.assert,1
74fa3d0957e59a3f1122ed8eb69b9e65ef924252,2014-02-21 15:28:48+07:00,mmm ParameterizedAssertionError . java <nl> ppp ParameterizedAssertionError . java <nl> - return toString() . equals(obj . toString()) ; <nl> + return obj instanceof ParameterizedAssertionError && toString() . equals(obj . toString()) ; <nl> mmm ParameterizedAssertionErrorTest . java <nl> ppp ParameterizedAssertionErrorTest . java <nl> + import static org . junit . Assert . assertFalse ; <nl> + @Theory <nl> + public void isNotEqualToNull(ParameterizedAssertionError a) { <nl> + assertFalse(a . equals(null)) ; <nl> + } <nl>,fix possible npe in method equal,1
88f7a12d472b1157639db5148b29c8a8825802a3,2014-04-22 03:19:02+02:00,"mmm FrameworkMethod . java <nl> ppp FrameworkMethod . java <nl> - import java . lang . reflect . Modifier ; <nl> - if (!Modifier . isPublic(getDeclaringClass() . getModifiers())) { <nl> - errors . add(new Exception(""Class "" + getDeclaringClass() . getName() + "" should be public"")) ; <nl> - } <nl> mmm AllTests . java <nl> ppp AllTests . java <nl> - import org . junit . tests . validation . InaccessibleBaseClassTest ; <nl> - InaccessibleBaseClassTest . class, <nl> deleted file <nl> mmm InaccessibleBaseClassTest . java <nl> - package org . junit . tests . validation ; <nl> - import <nl>",do not verify the visibility of a method 's declare class,1
883c1bb6da11ff4c8422220fd99d727a495dd51f,2014-09-12 22:18:39+02:00,new file <nl> ppp ClassRoadie . java <nl> + package org . junit . internal . runners ; <nl> + import java . lang . reflect . InvocationTargetException ; <nl> + import java . lang . reflect . Method ; <nl> + import java . util . List ; <nl> + import org . junit . internal . AssumptionViolatedException ; <nl> + import org . junit . runner . Description ; <nl> + import org . junit . runner . notification . Failure ; <nl> + import org . junit . runner . notification . RunNotifier ; <nl> + <nl>,restore class that be deprecate for 6 year,1
2b6109612b4a70cca1175cb01b0322593647f218,2014-12-15 20:27:50+01:00,mmm TestWatcher . java <nl> ppp TestWatcher . java <nl> - } catch (@SuppressWarnings("deprecation") org . junit . internal . AssumptionViolatedException  e) { <nl> + } catch (org . junit . internal . AssumptionViolatedException  e) { <nl> - @SuppressWarnings("deprecation") <nl> - @SuppressWarnings("deprecation") <nl>,only assumptionviolatedexception constructor be deprecate,1
0804ef4cd09b0e94783a9882c60914e22fca5108,2015-01-18 10:25:26-08:00,"mmm ErrorReportingRunner . java <nl> ppp ErrorReportingRunner . java <nl> - private final Class<?> testClass ; <nl> + private final String classNames ; <nl> - if (testClass == null) { <nl> - throw new NullPointerException(""Test class cannot be null"") ; <nl> + this(cause, new Class<?>[] { testClass }) ; <nl> + } <nl> + public ErrorReportingRunner(Throwable cause, Class<?> .  .  .  testClasses) { <nl> + if (testClasses == null || testClasses . length == 0) { <nl> + throw new NullPointerException(""Test classes cannot be null or empty"") ; <nl> + } <nl> + for (Class<?> testClass <nl>",fix swallow exception in request.classes (..,1
1db00d5a965951ea3667480a96467b43a80823c1,2016-02-19 10:16:47+00:00,mmm ExpectedException . java <nl> ppp ExpectedException . java <nl> - public void expect(Matcher<?> matcher) { <nl> + public ExpectedException expect(Matcher<?> matcher) { <nl> + return this ; <nl> - public void expect(Class<? extends Throwable> type) { <nl> + public ExpectedException expect(Class<? extends Throwable> type) { <nl> + return this ; <nl> - public void expectMessage(String substring) { <nl> + public ExpectedException expectMessage(String substring) { <nl> + return this ; <nl> - public void expectMessage(Matcher<String> matcher) { <nl> + public ExpectedException expectMessage(Matcher<String> matcher) { <nl> + return this ; <nl> - public void expectCause(Matcher<? extends Throwable> expectedCause) { <nl> <nl>,fluent expectation for expectedexception,1
24b8ee0bec2f2761b479bdd989275f19597955a3,2016-05-23 21:58:30-07:00,"mmm TemporaryFolder . java <nl> ppp TemporaryFolder . java <nl> + private static final int TEMP_DIR_ATTEMPTS = 10000 ; <nl> + private static final String TMP_PREFIX = ""junit"" ; <nl> - return File . createTempFile(""junit"", null, getRoot()) ; <nl> + return File . createTempFile(TMP_PREFIX, null, getRoot()) ; <nl> - File createdFolder = File . createTempFile(""junit"", """", parentFolder) ; <nl> - createdFolder . delete() ; <nl> - createdFolder . mkdir() ; <nl> - return createdFolder ; <nl> + File createdFolder = null ; <nl> + for (int i = 0 ; i < TEMP_DIR_ATTEMPTS ; ++i) { <nl> + String <nl>",retry temporaryfolder.newfolder 's call to mkdir if the call do not create a new directory,1
7e38e390090ded68a7c08eb639dc33a0838f7278,2016-07-12 17:43:33+02:00,mmm RuleChain . java <nl> ppp RuleChain . java <nl> + if (enclosedRule == null) { <nl> + throw new NullPointerException("The enclosed rule must not be null") ; <nl> + } <nl> mmm RuleChainTest . java <nl> ppp RuleChainTest . java <nl> + import static org . hamcrest . CoreMatchers . containsString ; <nl> + import static org . hamcrest . CoreMatchers . equalTo ; <nl> + import static org . hamcrest . MatcherAssert . assertThat ; <nl> + import static org . junit . Assert . fail ; <nl> + import java . io . PrintWriter ; <nl> <nl>,rulechain # around should not allow null args,1
35c8fd373965ab1b06d63e5c3bbc5d9f2c356ec4,2016-09-17 15:31:28-07:00,mmm MultipleFailureException . java <nl> ppp MultipleFailureException . java <nl> + import java . io . PrintStream ; <nl> + import java . io . PrintWriter ; <nl> + @Override <nl> + public void printStackTrace() { <nl> + for (Throwable e: fErrors) { <nl> + e . printStackTrace() ; <nl> + } <nl> + } <nl> + @Override <nl> + public void printStackTrace(PrintStream s) { <nl> + for (Throwable e: fErrors) { <nl> + e . printStackTrace(s) ; <nl> + } <nl> + } <nl> + @Override <nl> + public void printStackTrace(PrintWriter s) { <nl> + for (Throwable e: <nl>,fix stacktrace printing when multiple exception occur,1
00f2f7635fdfa16f7091d84683b5a3b93059cd20,2018-04-06 23:32:08+02:00,"mmm ExpectedException . java <nl> ppp ExpectedException . java <nl>  <nl> mmm ExpectedExceptionTest . java <nl> ppp ExpectedExceptionTest . java <nl> - + "" an instance of java . lang . IllegalArgumentException"") } <nl> + "" - an instance of java . lang . IllegalArgumentException"") }, <nl> + { <nl> + ErrorCollectorShouldFailAlthoughExpectedExceptionDoesNot . class, <nl> + hasSingleFailureWithMessage(ARBITRARY_MESSAGE) } <nl> + public static class ErrorCollectorShouldFailAlthoughExpectedExceptionDoesNot { <nl> + @Rule <nl> + public ErrorCollector collector = new ErrorCollector() ; <nl> + @Rule(order = Integer . MAX_VALUE) <nl> + public ExpectedException thrown = ExpectedException . none() ; <nl> + @Test <nl> <nl>",recommend to set order for expectedexception,1
ab01cb547dd87f76017e9b079ab68495c38ffc90,2021-06-10 08:44:28+00:00,mmm System . java <nl> ppp System . java <nl> + @Override <nl> + public void exit(int statusCode) { <nl> + Shutdown . exit(statusCode) ; <nl> + } <nl> mmm JavaLangAccess . java <nl> ppp JavaLangAccess . java <nl> + void exit(int statusCode) ; <nl> mmm CLinker . java <nl> ppp CLinker . java <nl>  <nl> mmm CABI . java <nl> ppp CABI . java <nl> - import jdk . internal . foreign . abi . SharedUtils ; <nl> + import sun . security . action . GetPropertyAction ; <nl> + import static sun . security . action <nl>,exception thrown during upcalls should be handle,1
c4b0089548bda3d81328e99e3bd3ba7322801a37,2014-04-16 16:06:08+07:00,"mmm DSASigner . java <nl> ppp DSASigner . java <nl> + SecureRandom providedRandom = null ; <nl> - ParametersWithRandom    rParam = (ParametersWithRandom)param ; <nl> + ParametersWithRandom rParam = (ParametersWithRandom)param ; <nl> - this . random = rParam . getRandom() ; <nl> + providedRandom = rParam . getRandom() ; <nl> - this . random = new SecureRandom() ; <nl> + this . random = initSecureRandom(forSigning && !kCalculator . isDeterministic(), providedRandom) ; <nl> + protected SecureRandom initSecureRandom(boolean needed, SecureRandom provided) <nl> + { <nl> + return !needed ? null : (provided != null) ? provided : new SecureRandom() <nl>",a securerandom should not be create or store if not need,1
